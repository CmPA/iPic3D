!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALIGNED	./include/Alloc.h	68;"	d
ALIGNED	./include/Alloc.h	73;"	d
ALIGNMENT	./include/Alloc.h	66;"	d
ARCHITECTURE_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	264;"	d	file:
ARCHITECTURE_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	267;"	d	file:
ARCHITECTURE_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	270;"	d	file:
ARCHITECTURE_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
ARCHITECTURE_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	277;"	d	file:
ARCHITECTURE_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	264;"	d	file:
ARCHITECTURE_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	267;"	d	file:
ARCHITECTURE_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	270;"	d	file:
ARCHITECTURE_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
ARCHITECTURE_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	277;"	d	file:
ARCHITECTURE_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	264;"	d	file:
ARCHITECTURE_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	267;"	d	file:
ARCHITECTURE_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	270;"	d	file:
ARCHITECTURE_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
ARCHITECTURE_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	277;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	264;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	267;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	270;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	277;"	d	file:
ARCHITECTURE_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	264;"	d	file:
ARCHITECTURE_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	267;"	d	file:
ARCHITECTURE_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	270;"	d	file:
ARCHITECTURE_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
ARCHITECTURE_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	277;"	d	file:
AddPerturbation	./fields/EMfields3D.cpp	/^void EMfields3D::AddPerturbation(double deltaBoB, double kx, double ky, double Ex_mod, double Ex_phase, double Ey_mod, double Ey_phase, double Ez_mod, double Ez_phase, double Bx_mod, double Bx_phase, double By_mod, double By_phase, double Bz_mod, double Bz_phase, double B0, Grid * grid) {$/;"	f	class:EMfields3D
AddPerturbationJ	./particles/Particles3D.cpp	/^void Particles3D::AddPerturbationJ(double deltaBoB, double kx, double ky, double Bx_mod, double By_mod, double Bz_mod, double jx_mod, double jx_phase, double jy_mod, double jy_phase, double jz_mod, double jz_phase, double B0, Grid * grid) {$/;"	f	class:Particles3D
AddPerturbationRho	./fields/EMfields3D.cpp	/^void EMfields3D::AddPerturbationRho(double deltaBoB, double kx, double ky, double Bx_mod, double By_mod, double Bz_mod, double ne_mod, double ne_phase, double ni_mod, double ni_phase, double B0, Grid * grid) {$/;"	f	class:EMfields3D
AlignedAlloc	./include/Alloc.h	69;"	d
AlignedAlloc	./include/Alloc.h	75;"	d
AlignedFree	./include/Alloc.h	71;"	d
AlignedFree	./include/Alloc.h	74;"	d
Alloc.h	./include/Alloc.h	1;"	F
AoS	./include/Particle.h	/^    AoS = 0,$/;"	e	enum:ParticleType::Type
AoS_PCLS_AT_A_TIME	./include/Particle.h	7;"	d
ApplyPlaneRotation	./solvers/GMRES.cpp	/^void ApplyPlaneRotation(double &dx, double &dy, double &cs, double &sn) {$/;"	f
B0x	./include/Collective.h	/^    double B0x;$/;"	m	class:Collective
B0x	./include/EMfields3D.h	/^    double B0x, B0y, B0z, delta;$/;"	m	class:EMfields3D
B0y	./include/Collective.h	/^    double B0y;$/;"	m	class:Collective
B0y	./include/EMfields3D.h	/^    double B0x, B0y, B0z, delta;$/;"	m	class:EMfields3D
B0z	./include/Collective.h	/^    double B0z;$/;"	m	class:Collective
B0z	./include/EMfields3D.h	/^    double B0x, B0y, B0z, delta;$/;"	m	class:EMfields3D
B1x	./include/Collective.h	/^    double B1x;$/;"	m	class:Collective
B1x	./include/EMfields3D.h	/^    double B1x, B1y, B1z;$/;"	m	class:EMfields3D
B1y	./include/Collective.h	/^    double B1y;$/;"	m	class:Collective
B1y	./include/EMfields3D.h	/^    double B1x, B1y, B1z;$/;"	m	class:EMfields3D
B1z	./include/Collective.h	/^    double B1z;$/;"	m	class:Collective
B1z	./include/EMfields3D.h	/^    double B1x, B1y, B1z;$/;"	m	class:EMfields3D
BCStructure.cpp	./fields/BCStructure.cpp	1;"	F
BCStructure.h	./include/BCStructure.h	1;"	F
BCface	./bc/BcFields3D.cpp	/^void BCface(int nx, int ny, int nz, double ***vector, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, int bcFaceZright, int bcFaceZleft, VirtualTopology3D * vct) {$/;"	f
BCface	./bc/BcFields3D.cpp	/^void BCface(int nx, int ny, int nz, int ns, double ****vector, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, int bcFaceZright, int bcFaceZleft, VirtualTopology3D * vct) {$/;"	f
BCface_P	./bc/BcFields3D.cpp	/^void BCface_P(int nx, int ny, int nz, double ***vector, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, int bcFaceZright, int bcFaceZleft, VirtualTopology3D * vct) {$/;"	f
BCface_P	./bc/BcFields3D.cpp	/^void BCface_P(int nx, int ny, int nz, int ns, double ****vector, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, int bcFaceZright, int bcFaceZleft, VirtualTopology3D * vct) {$/;"	f
BCpart	./bc/BcParticles.cpp	/^void BCpart(double *x, double *u, double *v, double *w, double Lx, double ut, double vt, double wt, int bcFaceXright, int bcFaceXleft) {$/;"	f
BCpart	./bc/BcParticles.cpp	/^void BCpart(double *x, double *u, double Lx, double ut, int bcFaceXright, int bcFaceXleft) {$/;"	f
BCpart	./bc/BcParticles.cpp	/^void BCpart(double *x, double *y, double *z, double *u, double *v, double *w, double Lx, double Ly, double Lz, double ut, double vt, double wt, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, int bcFaceZright, int bcFaceZleft, VirtualTopology3D * vct) {$/;"	f
BFIELD	./include/TimeTasks.h	/^    BFIELD,$/;"	e	enum:TimeTasks::Tasks
Basic.h	./include/Basic.h	1;"	F
Basic_H	./include/Basic.h	7;"	d
BcFields3D.cpp	./bc/BcFields3D.cpp	1;"	F
BcFields3D.h	./include/BcFields3D.h	1;"	F
BcFields_H	./include/BcFields3D.h	9;"	d
BcParticles.cpp	./bc/BcParticles.cpp	1;"	F
BcParticles.h	./include/BcParticles.h	1;"	F
BcParticles_H	./include/BcParticles.h	11;"	d
Benergy	./include/iPic3D.h	/^    double Benergy;$/;"	m	class:iPic3D::c_Solver
Bessel.h	./include/Bessel.h	1;"	F
Bessel_H	./include/Bessel.h	9;"	d
BirthRank	./include/Particles3Dcomm.h	/^  int BirthRank[2];$/;"	m	class:Particles3Dcomm
BoundaryConditionsB	./fields/EMfields3D.cpp	/^void EMfields3D::BoundaryConditionsB(arr3_double vectorX, arr3_double vectorY, arr3_double vectorZ,int nx, int ny, int nz,Grid *grid, VirtualTopology3D *vct){$/;"	f	class:EMfields3D
BoundaryConditionsE	./fields/EMfields3D.cpp	/^void EMfields3D::BoundaryConditionsE(arr3_double vectorX, arr3_double vectorY, arr3_double vectorZ,int nx, int ny, int nz,Grid *grid, VirtualTopology3D *vct){$/;"	f	class:EMfields3D
BoundaryConditionsEImage	./fields/EMfields3D.cpp	/^void EMfields3D::BoundaryConditionsEImage(arr3_double imageX, arr3_double imageY, arr3_double imageZ,$/;"	f	class:EMfields3D
BracketRank1	./tests/test_arrays.cpp	/^    BracketRank1(size_t s1) : S1(s1), arr(new type[s1]){}$/;"	f	class:BracketRank1
BracketRank1	./tests/test_arrays.cpp	/^    BracketRank1(size_t s1, void * __restrict__ const storage) : S1(s1),$/;"	f	class:BracketRank1
BracketRank1	./tests/test_arrays.cpp	/^class BracketRank1$/;"	c	file:
BracketRank1::BracketRank1	./tests/test_arrays.cpp	/^    BracketRank1(size_t s1) : S1(s1), arr(new type[s1]){}$/;"	f	class:BracketRank1
BracketRank1::BracketRank1	./tests/test_arrays.cpp	/^    BracketRank1(size_t s1, void * __restrict__ const storage) : S1(s1),$/;"	f	class:BracketRank1
BracketRank1::S1	./tests/test_arrays.cpp	/^    const size_t S1;$/;"	m	class:BracketRank1	file:
BracketRank1::arr	./tests/test_arrays.cpp	/^    type  * __restrict__ const  arr;$/;"	m	class:BracketRank1	file:
BracketRank1::operator []	./tests/test_arrays.cpp	/^    type& operator[](size_t i) const$/;"	f	class:BracketRank1
BracketRank2	./tests/test_arrays.cpp	/^    BracketRank2(size_t s1, size_t s2) : S1(s1), S2(s2),$/;"	f	class:BracketRank2
BracketRank2	./tests/test_arrays.cpp	/^    BracketRank2(size_t s1, size_t s2, void *storage) : S1(s1), S2(s2),$/;"	f	class:BracketRank2
BracketRank2	./tests/test_arrays.cpp	/^class BracketRank2$/;"	c	file:
BracketRank2::BracketRank2	./tests/test_arrays.cpp	/^    BracketRank2(size_t s1, size_t s2) : S1(s1), S2(s2),$/;"	f	class:BracketRank2
BracketRank2::BracketRank2	./tests/test_arrays.cpp	/^    BracketRank2(size_t s1, size_t s2, void *storage) : S1(s1), S2(s2),$/;"	f	class:BracketRank2
BracketRank2::S1	./tests/test_arrays.cpp	/^    const size_t S1, S2;$/;"	m	class:BracketRank2	file:
BracketRank2::S2	./tests/test_arrays.cpp	/^    const size_t S1, S2;$/;"	m	class:BracketRank2	file:
BracketRank2::arr	./tests/test_arrays.cpp	/^    type * __restrict__ const arr;$/;"	m	class:BracketRank2	file:
BracketRank2::free	./tests/test_arrays.cpp	/^    void free(){ delete[] arr; }$/;"	f	class:BracketRank2
BracketRank2::operator ()	./tests/test_arrays.cpp	/^    type& operator()(size_t n1, size_t n2) const$/;"	f	class:BracketRank2
BracketRank2::operator []	./tests/test_arrays.cpp	/^    BracketRank1<type> operator[](size_t i) const$/;"	f	class:BracketRank2
Bx0	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var-2D/user_inputs_block_single_var_2D.h	/^    float Bx0 = 0.0097;                                   \/\/ base field x$/;"	v
Bx0	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var/user_inputs_block_single_var.h	/^    float Bx0 = 0.0097;                                   \/\/ base field x$/;"	v
Bx0	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block/user_inputs_block.h	/^    float Bx0 = 0.0097;                                   \/\/ base field x$/;"	v
Bx0	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point-2D/user_inputs_point_2D.h	/^    float Bx0 = 0.003638;                                   \/\/ base field x$/;"	v
Bx0	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point/user_inputs_point.h	/^    float Bx0 = 0.0097;                                   \/\/ base field x$/;"	v
BxITemp	./include/BCStructure.h	/^  double ***BxITemp;$/;"	m	struct:injInfoFields
Bx_ext	./include/EMfields3D.h	/^    array3_double   Bx_ext;$/;"	m	class:EMfields3D
Bxc	./include/EMfields3D.h	/^    array3_double Bxc;$/;"	m	class:EMfields3D
Bxn	./include/EMfields3D.h	/^    array3_double Bxn;$/;"	m	class:EMfields3D
ByITemp	./include/BCStructure.h	/^  double ***ByITemp;$/;"	m	struct:injInfoFields
By_ext	./include/EMfields3D.h	/^    array3_double   By_ext;$/;"	m	class:EMfields3D
Byc	./include/EMfields3D.h	/^    array3_double Byc;$/;"	m	class:EMfields3D
Byn	./include/EMfields3D.h	/^    array3_double Byn;$/;"	m	class:EMfields3D
BzITemp	./include/BCStructure.h	/^  double ***BzITemp;$/;"	m	struct:injInfoFields
Bz_ext	./include/EMfields3D.h	/^    array3_double   Bz_ext;$/;"	m	class:EMfields3D
Bzc	./include/EMfields3D.h	/^    array3_double Bzc;$/;"	m	class:EMfields3D
Bzn	./include/EMfields3D.h	/^    array3_double Bzn;$/;"	m	class:EMfields3D
CART_COMM	./include/VCtopology3D.h	/^  MPI_Comm CART_COMM;$/;"	m	class:VCtopology3D
CART_COMM_P	./include/VCtopology3D.h	/^  MPI_Comm CART_COMM_P;$/;"	m	class:VCtopology3D
CG	./solvers/CG.cpp	/^bool CG(double *xkrylov, int xkrylovlen, double *b, int maxit, double tol, FIELD_IMAGE FunctionImage, Grid * grid, VirtualTopology3D * vct, Field * field) {$/;"	f
CG	./solvers/CG.cpp	/^bool CG(double *xkrylov, int xkrylovlen, double *b, int maxit, double tol, GENERIC_IMAGE FunctionImage, Grid * grid, VirtualTopology3D * vct) {$/;"	f
CG.cpp	./solvers/CG.cpp	1;"	F
CG.h	./include/CG.h	1;"	F
CG_H	./include/CG.h	8;"	d
CGtol	./include/Collective.h	/^    double CGtol;$/;"	m	class:Collective
CGtol	./include/EMfields3D.h	/^    double CGtol;$/;"	m	class:EMfields3D
CMakeCXXCompilerId.cpp	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	1;"	F
CMakeCXXCompilerId.cpp	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	1;"	F
CMakeCXXCompilerId.cpp	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	1;"	F
CMakeCXXCompilerId.cpp	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	1;"	F
CMakeCXXCompilerId.cpp	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	1;"	F
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	100;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	106;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	109;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	163;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	26;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	32;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	75;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	100;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	106;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	109;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	163;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	26;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	32;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	75;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	100;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	106;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	109;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	163;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	26;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	32;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	75;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	100;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	106;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	109;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	163;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	26;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	32;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	75;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	100;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	106;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	109;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	163;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	26;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	32;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	75;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_MAJOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_MAJOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
COMPILER_VERSION_MAJOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	148;"	d	file:
COMPILER_VERSION_MAJOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	17;"	d	file:
COMPILER_VERSION_MAJOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_MAJOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
COMPILER_VERSION_MAJOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	40;"	d	file:
COMPILER_VERSION_MAJOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_MAJOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_MAJOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	66;"	d	file:
COMPILER_VERSION_MAJOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_MAJOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_MAJOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
COMPILER_VERSION_MAJOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	148;"	d	file:
COMPILER_VERSION_MAJOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	17;"	d	file:
COMPILER_VERSION_MAJOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_MAJOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
COMPILER_VERSION_MAJOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	40;"	d	file:
COMPILER_VERSION_MAJOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_MAJOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_MAJOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	66;"	d	file:
COMPILER_VERSION_MAJOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_MAJOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_MAJOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
COMPILER_VERSION_MAJOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	148;"	d	file:
COMPILER_VERSION_MAJOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	17;"	d	file:
COMPILER_VERSION_MAJOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_MAJOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
COMPILER_VERSION_MAJOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	40;"	d	file:
COMPILER_VERSION_MAJOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_MAJOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_MAJOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	66;"	d	file:
COMPILER_VERSION_MAJOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	148;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	17;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	40;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	66;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_MAJOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_MAJOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
COMPILER_VERSION_MAJOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	148;"	d	file:
COMPILER_VERSION_MAJOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	17;"	d	file:
COMPILER_VERSION_MAJOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_MAJOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
COMPILER_VERSION_MAJOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	40;"	d	file:
COMPILER_VERSION_MAJOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_MAJOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_MAJOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	66;"	d	file:
COMPILER_VERSION_MAJOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_MINOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	120;"	d	file:
COMPILER_VERSION_MINOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MINOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_VERSION_MINOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_VERSION_MINOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	28;"	d	file:
COMPILER_VERSION_MINOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	34;"	d	file:
COMPILER_VERSION_MINOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	41;"	d	file:
COMPILER_VERSION_MINOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	47;"	d	file:
COMPILER_VERSION_MINOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	54;"	d	file:
COMPILER_VERSION_MINOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_MINOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	91;"	d	file:
COMPILER_VERSION_MINOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	120;"	d	file:
COMPILER_VERSION_MINOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MINOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_VERSION_MINOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_VERSION_MINOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	28;"	d	file:
COMPILER_VERSION_MINOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	34;"	d	file:
COMPILER_VERSION_MINOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	41;"	d	file:
COMPILER_VERSION_MINOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	47;"	d	file:
COMPILER_VERSION_MINOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	54;"	d	file:
COMPILER_VERSION_MINOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_MINOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	91;"	d	file:
COMPILER_VERSION_MINOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	120;"	d	file:
COMPILER_VERSION_MINOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MINOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_VERSION_MINOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_VERSION_MINOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	28;"	d	file:
COMPILER_VERSION_MINOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	34;"	d	file:
COMPILER_VERSION_MINOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	41;"	d	file:
COMPILER_VERSION_MINOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	47;"	d	file:
COMPILER_VERSION_MINOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	54;"	d	file:
COMPILER_VERSION_MINOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_MINOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	91;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	120;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	28;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	34;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	41;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	47;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	54;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	91;"	d	file:
COMPILER_VERSION_MINOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	120;"	d	file:
COMPILER_VERSION_MINOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MINOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_VERSION_MINOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_VERSION_MINOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	28;"	d	file:
COMPILER_VERSION_MINOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	34;"	d	file:
COMPILER_VERSION_MINOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	41;"	d	file:
COMPILER_VERSION_MINOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	47;"	d	file:
COMPILER_VERSION_MINOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	54;"	d	file:
COMPILER_VERSION_MINOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_MINOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	91;"	d	file:
COMPILER_VERSION_PATCH	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
COMPILER_VERSION_PATCH	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_PATCH	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	127;"	d	file:
COMPILER_VERSION_PATCH	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_PATCH	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	150;"	d	file:
COMPILER_VERSION_PATCH	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_VERSION_PATCH	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	35;"	d	file:
COMPILER_VERSION_PATCH	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	55;"	d	file:
COMPILER_VERSION_PATCH	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
COMPILER_VERSION_PATCH	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	68;"	d	file:
COMPILER_VERSION_PATCH	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	93;"	d	file:
COMPILER_VERSION_PATCH	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
COMPILER_VERSION_PATCH	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_PATCH	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	127;"	d	file:
COMPILER_VERSION_PATCH	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_PATCH	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	150;"	d	file:
COMPILER_VERSION_PATCH	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_VERSION_PATCH	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	35;"	d	file:
COMPILER_VERSION_PATCH	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	55;"	d	file:
COMPILER_VERSION_PATCH	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
COMPILER_VERSION_PATCH	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	68;"	d	file:
COMPILER_VERSION_PATCH	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	93;"	d	file:
COMPILER_VERSION_PATCH	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
COMPILER_VERSION_PATCH	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_PATCH	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	127;"	d	file:
COMPILER_VERSION_PATCH	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_PATCH	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	150;"	d	file:
COMPILER_VERSION_PATCH	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_VERSION_PATCH	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	35;"	d	file:
COMPILER_VERSION_PATCH	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	55;"	d	file:
COMPILER_VERSION_PATCH	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
COMPILER_VERSION_PATCH	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	68;"	d	file:
COMPILER_VERSION_PATCH	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	93;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	127;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	150;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	35;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	55;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	68;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	93;"	d	file:
COMPILER_VERSION_PATCH	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
COMPILER_VERSION_PATCH	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_PATCH	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	127;"	d	file:
COMPILER_VERSION_PATCH	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_PATCH	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	150;"	d	file:
COMPILER_VERSION_PATCH	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_VERSION_PATCH	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	35;"	d	file:
COMPILER_VERSION_PATCH	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	55;"	d	file:
COMPILER_VERSION_PATCH	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
COMPILER_VERSION_PATCH	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	68;"	d	file:
COMPILER_VERSION_PATCH	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	93;"	d	file:
COMPILER_VERSION_TWEAK	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_TWEAK	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	22;"	d	file:
COMPILER_VERSION_TWEAK	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_TWEAK	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	22;"	d	file:
COMPILER_VERSION_TWEAK	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_TWEAK	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	22;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	22;"	d	file:
COMPILER_VERSION_TWEAK	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_TWEAK	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	22;"	d	file:
CONFIGFILE_H	./ConfigFile/src/ConfigFile.h	44;"	d
CONFIGFILE_H	./include/ConfigFile.h	44;"	d
CalculateB	./main/iPic3Dlib.cpp	/^void c_Solver::CalculateB() {$/;"	f	class:c_Solver
CalculateField	./main/iPic3Dlib.cpp	/^void c_Solver::CalculateField() {$/;"	f	class:c_Solver
CalculateMoments	./main/iPic3Dlib.cpp	/^void c_Solver::CalculateMoments() {$/;"	f	class:c_Solver
CallFinalize	./include/Collective.h	/^    bool CallFinalize;$/;"	m	class:Collective
Case	./include/Collective.h	/^    string Case;$/;"	m	class:Collective
Case	./include/EMfields3D.h	/^    string Case;$/;"	m	class:EMfields3D
CellParticle	./include/Particle.h	/^struct CellParticle$/;"	s
CellParticle::ID	./include/Particle.h	/^  long long ID; \/\/ 8 bytes$/;"	m	struct:CellParticle
CellParticle::cx	./include/Particle.h	/^  int cx[3]; \/\/ mesh cell$/;"	m	struct:CellParticle
CellParticle::fx	./include/Particle.h	/^  float fx[3]; \/\/ mesh cell position (fraction)$/;"	m	struct:CellParticle
CellParticle::fxavg	./include/Particle.h	/^  float fxavg[3]; \/\/ for implicit push$/;"	m	struct:CellParticle
CellParticle::get_ID	./include/Particle.h	/^  long long get_ID()const{ return ID; }$/;"	f	struct:CellParticle
CellParticle::get_fx	./include/Particle.h	/^  float get_fx()const{ return fx[0]; }$/;"	f	struct:CellParticle
CellParticle::get_fy	./include/Particle.h	/^  float get_fy()const{ return fx[1]; }$/;"	f	struct:CellParticle
CellParticle::get_fz	./include/Particle.h	/^  float get_fz()const{ return fx[2]; }$/;"	f	struct:CellParticle
CellParticle::get_q	./include/Particle.h	/^  float get_q()const{ return q; }$/;"	f	struct:CellParticle
CellParticle::get_u	./include/Particle.h	/^  float get_u()const{ return u[0]; }$/;"	f	struct:CellParticle
CellParticle::get_v	./include/Particle.h	/^  float get_v()const{ return u[1]; }$/;"	f	struct:CellParticle
CellParticle::get_w	./include/Particle.h	/^  float get_w()const{ return u[2]; }$/;"	f	struct:CellParticle
CellParticle::init	./include/Particle.h	/^  void init(const SpeciesParticle& pcl,$/;"	f	struct:CellParticle
CellParticle::q	./include/Particle.h	/^  float q; \/\/ float m would be better for stitching to MHD for dusty plasma$/;"	m	struct:CellParticle
CellParticle::qom	./include/Particle.h	/^  float qom; \/\/ for dusty plasma$/;"	m	struct:CellParticle
CellParticle::set_ID	./include/Particle.h	/^  void set_ID(long long in){ ID=in; }$/;"	f	struct:CellParticle
CellParticle::set_u	./include/Particle.h	/^  void set_u(float in){ u[0]=in; }$/;"	f	struct:CellParticle
CellParticle::set_v	./include/Particle.h	/^  void set_v(float in){ u[1]=in; }$/;"	f	struct:CellParticle
CellParticle::set_w	./include/Particle.h	/^  void set_w(float in){ u[2]=in; }$/;"	f	struct:CellParticle
CellParticle::u	./include/Particle.h	/^  float u[3];$/;"	m	struct:CellParticle
ClosePHDF5file	./inputoutput/phdf5.cpp	/^void PHDF5fileClass::ClosePHDF5file(){$/;"	f	class:PHDF5fileClass
Collective	./include/Collective.h	/^class Collective$/;"	c
Collective	./inputoutput/Collective.cpp	/^Collective::Collective(int argc, char **argv) {$/;"	f	class:Collective
Collective.cpp	./inputoutput/Collective.cpp	1;"	F
Collective.h	./include/Collective.h	1;"	F
Collective::B0x	./include/Collective.h	/^    double B0x;$/;"	m	class:Collective
Collective::B0y	./include/Collective.h	/^    double B0y;$/;"	m	class:Collective
Collective::B0z	./include/Collective.h	/^    double B0z;$/;"	m	class:Collective
Collective::B1x	./include/Collective.h	/^    double B1x;$/;"	m	class:Collective
Collective::B1y	./include/Collective.h	/^    double B1y;$/;"	m	class:Collective
Collective::B1z	./include/Collective.h	/^    double B1z;$/;"	m	class:Collective
Collective::CGtol	./include/Collective.h	/^    double CGtol;$/;"	m	class:Collective
Collective::CallFinalize	./include/Collective.h	/^    bool CallFinalize;$/;"	m	class:Collective
Collective::Case	./include/Collective.h	/^    string Case;$/;"	m	class:Collective
Collective::Collective	./inputoutput/Collective.cpp	/^Collective::Collective(int argc, char **argv) {$/;"	f	class:Collective
Collective::DiagnosticsOutputCycle	./include/Collective.h	/^    int DiagnosticsOutputCycle;$/;"	m	class:Collective
Collective::FieldOutputCycle	./include/Collective.h	/^    int FieldOutputCycle;$/;"	m	class:Collective
Collective::GMREStol	./include/Collective.h	/^    double GMREStol;$/;"	m	class:Collective
Collective::L_square	./include/Collective.h	/^    double L_square;$/;"	m	class:Collective
Collective::Lx	./include/Collective.h	/^    double Lx;$/;"	m	class:Collective
Collective::Ly	./include/Collective.h	/^    double Ly;$/;"	m	class:Collective
Collective::Lz	./include/Collective.h	/^    double Lz;$/;"	m	class:Collective
Collective::NiterMover	./include/Collective.h	/^    int NiterMover;$/;"	m	class:Collective
Collective::NpMaxNpRatio	./include/Collective.h	/^    double NpMaxNpRatio;$/;"	m	class:Collective
Collective::PERIODICX	./include/Collective.h	/^    bool PERIODICX;$/;"	m	class:Collective
Collective::PERIODICY	./include/Collective.h	/^    bool PERIODICY;$/;"	m	class:Collective
Collective::PERIODICZ	./include/Collective.h	/^    bool PERIODICZ;$/;"	m	class:Collective
Collective::ParticlesOutputCycle	./include/Collective.h	/^    int ParticlesOutputCycle;$/;"	m	class:Collective
Collective::PoissonCorrection	./include/Collective.h	/^    string PoissonCorrection;$/;"	m	class:Collective
Collective::Print	./inputoutput/Collective.cpp	/^void Collective::Print() {$/;"	f	class:Collective
Collective::RESTART1	./include/Collective.h	/^    bool RESTART1;$/;"	m	class:Collective
Collective::ReadInput	./inputoutput/Collective.cpp	/^void Collective::ReadInput(string inputfile) {$/;"	f	class:Collective
Collective::ReadRestart	./inputoutput/Collective.cpp	/^int Collective::ReadRestart(string inputfile) {$/;"	f	class:Collective
Collective::RestartDirName	./include/Collective.h	/^    string RestartDirName;$/;"	m	class:Collective
Collective::RestartOutputCycle	./include/Collective.h	/^    int RestartOutputCycle;$/;"	m	class:Collective
Collective::SaveDirName	./include/Collective.h	/^    string SaveDirName;$/;"	m	class:Collective
Collective::SimName	./include/Collective.h	/^    string SimName;$/;"	m	class:Collective
Collective::Smooth	./include/Collective.h	/^    double Smooth;$/;"	m	class:Collective
Collective::TrackParticleID	./include/Collective.h	/^    bool *TrackParticleID;$/;"	m	class:Collective
Collective::Vinj	./include/Collective.h	/^    double Vinj;$/;"	m	class:Collective
Collective::XLEN	./include/Collective.h	/^    int XLEN;$/;"	m	class:Collective
Collective::YLEN	./include/Collective.h	/^    int YLEN;$/;"	m	class:Collective
Collective::ZLEN	./include/Collective.h	/^    int ZLEN;$/;"	m	class:Collective
Collective::bcBx	./include/Collective.h	/^    int bcBx[6], bcBy[6], bcBz[6];$/;"	m	class:Collective
Collective::bcBy	./include/Collective.h	/^    int bcBx[6], bcBy[6], bcBz[6];$/;"	m	class:Collective
Collective::bcBz	./include/Collective.h	/^    int bcBx[6], bcBy[6], bcBz[6];$/;"	m	class:Collective
Collective::bcEMfaceXleft	./include/Collective.h	/^    int bcEMfaceXleft;$/;"	m	class:Collective
Collective::bcEMfaceXright	./include/Collective.h	/^    int bcEMfaceXright;$/;"	m	class:Collective
Collective::bcEMfaceYleft	./include/Collective.h	/^    int bcEMfaceYleft;$/;"	m	class:Collective
Collective::bcEMfaceYright	./include/Collective.h	/^    int bcEMfaceYright;$/;"	m	class:Collective
Collective::bcEMfaceZleft	./include/Collective.h	/^    int bcEMfaceZleft;$/;"	m	class:Collective
Collective::bcEMfaceZright	./include/Collective.h	/^    int bcEMfaceZright;$/;"	m	class:Collective
Collective::bcEx	./include/Collective.h	/^    int bcEx[6], bcEy[6], bcEz[6];$/;"	m	class:Collective
Collective::bcEy	./include/Collective.h	/^    int bcEx[6], bcEy[6], bcEz[6];$/;"	m	class:Collective
Collective::bcEz	./include/Collective.h	/^    int bcEx[6], bcEy[6], bcEz[6];$/;"	m	class:Collective
Collective::bcPHIfaceXleft	./include/Collective.h	/^    int bcPHIfaceXleft;$/;"	m	class:Collective
Collective::bcPHIfaceXright	./include/Collective.h	/^    int bcPHIfaceXright;$/;"	m	class:Collective
Collective::bcPHIfaceYleft	./include/Collective.h	/^    int bcPHIfaceYleft;$/;"	m	class:Collective
Collective::bcPHIfaceYright	./include/Collective.h	/^    int bcPHIfaceYright;$/;"	m	class:Collective
Collective::bcPHIfaceZleft	./include/Collective.h	/^    int bcPHIfaceZleft;$/;"	m	class:Collective
Collective::bcPHIfaceZright	./include/Collective.h	/^    int bcPHIfaceZright;$/;"	m	class:Collective
Collective::bcPfaceXleft	./include/Collective.h	/^    int bcPfaceXleft;$/;"	m	class:Collective
Collective::bcPfaceXright	./include/Collective.h	/^    int bcPfaceXright;$/;"	m	class:Collective
Collective::bcPfaceYleft	./include/Collective.h	/^    int bcPfaceYleft;$/;"	m	class:Collective
Collective::bcPfaceYright	./include/Collective.h	/^    int bcPfaceYright;$/;"	m	class:Collective
Collective::bcPfaceZleft	./include/Collective.h	/^    int bcPfaceZleft;$/;"	m	class:Collective
Collective::bcPfaceZright	./include/Collective.h	/^    int bcPfaceZright;$/;"	m	class:Collective
Collective::c	./include/Collective.h	/^    double c;$/;"	m	class:Collective
Collective::delta	./include/Collective.h	/^    double delta;$/;"	m	class:Collective
Collective::dim	./include/Collective.h	/^    int dim;$/;"	m	class:Collective
Collective::dt	./include/Collective.h	/^    double dt;$/;"	m	class:Collective
Collective::dx	./include/Collective.h	/^    double dx;$/;"	m	class:Collective
Collective::dy	./include/Collective.h	/^    double dy;$/;"	m	class:Collective
Collective::dz	./include/Collective.h	/^    double dz;$/;"	m	class:Collective
Collective::fourpi	./include/Collective.h	/^    double fourpi;$/;"	m	class:Collective
Collective::getB0x	./include/Collective.h	/^    double getB0x()const{ return (B0x); }$/;"	f	class:Collective
Collective::getB0y	./include/Collective.h	/^    double getB0y()const{ return (B0y); }$/;"	f	class:Collective
Collective::getB0z	./include/Collective.h	/^    double getB0z()const{ return (B0z); }$/;"	f	class:Collective
Collective::getB1x	./include/Collective.h	/^    double getB1x()const{ return (B1x); }$/;"	f	class:Collective
Collective::getB1y	./include/Collective.h	/^    double getB1y()const{ return (B1y); }$/;"	f	class:Collective
Collective::getB1z	./include/Collective.h	/^    double getB1z()const{ return (B1z); }$/;"	f	class:Collective
Collective::getBcEMfaceXleft	./include/Collective.h	/^    int getBcEMfaceXleft()const{ return (bcEMfaceXleft); }$/;"	f	class:Collective
Collective::getBcEMfaceXright	./include/Collective.h	/^    int getBcEMfaceXright()const{ return (bcEMfaceXright); }$/;"	f	class:Collective
Collective::getBcEMfaceYleft	./include/Collective.h	/^    int getBcEMfaceYleft()const{ return (bcEMfaceYleft); }$/;"	f	class:Collective
Collective::getBcEMfaceYright	./include/Collective.h	/^    int getBcEMfaceYright()const{ return (bcEMfaceYright); }$/;"	f	class:Collective
Collective::getBcEMfaceZleft	./include/Collective.h	/^    int getBcEMfaceZleft()const{ return (bcEMfaceZleft); }$/;"	f	class:Collective
Collective::getBcEMfaceZright	./include/Collective.h	/^    int getBcEMfaceZright()const{ return (bcEMfaceZright); }$/;"	f	class:Collective
Collective::getBcPHIfaceXleft	./include/Collective.h	/^    int getBcPHIfaceXleft()const{ return (bcPHIfaceXleft); }$/;"	f	class:Collective
Collective::getBcPHIfaceXright	./include/Collective.h	/^    int getBcPHIfaceXright()const{ return (bcPHIfaceXright); }$/;"	f	class:Collective
Collective::getBcPHIfaceYleft	./include/Collective.h	/^    int getBcPHIfaceYleft()const{ return (bcPHIfaceYleft); }$/;"	f	class:Collective
Collective::getBcPHIfaceYright	./include/Collective.h	/^    int getBcPHIfaceYright()const{ return (bcPHIfaceYright); }$/;"	f	class:Collective
Collective::getBcPHIfaceZleft	./include/Collective.h	/^    int getBcPHIfaceZleft()const{ return (bcPHIfaceZleft); }$/;"	f	class:Collective
Collective::getBcPHIfaceZright	./include/Collective.h	/^    int getBcPHIfaceZright()const{ return (bcPHIfaceZright); }$/;"	f	class:Collective
Collective::getBcPfaceXleft	./include/Collective.h	/^    int getBcPfaceXleft()const{ return (bcPfaceXleft); }$/;"	f	class:Collective
Collective::getBcPfaceXright	./include/Collective.h	/^    int getBcPfaceXright()const{ return (bcPfaceXright); }$/;"	f	class:Collective
Collective::getBcPfaceYleft	./include/Collective.h	/^    int getBcPfaceYleft()const{ return (bcPfaceYleft); }$/;"	f	class:Collective
Collective::getBcPfaceYright	./include/Collective.h	/^    int getBcPfaceYright()const{ return (bcPfaceYright); }$/;"	f	class:Collective
Collective::getBcPfaceZleft	./include/Collective.h	/^    int getBcPfaceZleft()const{ return (bcPfaceZleft); }$/;"	f	class:Collective
Collective::getBcPfaceZright	./include/Collective.h	/^    int getBcPfaceZright()const{ return (bcPfaceZright); }$/;"	f	class:Collective
Collective::getC	./include/Collective.h	/^    double getC()const{ return (c); }$/;"	f	class:Collective
Collective::getCGtol	./include/Collective.h	/^    double getCGtol()const{ return (CGtol); }$/;"	f	class:Collective
Collective::getCallFinalize	./include/Collective.h	/^    bool getCallFinalize()const{ return (CallFinalize); }$/;"	f	class:Collective
Collective::getCase	./include/Collective.h	/^    string getCase()const{ return (Case); }$/;"	f	class:Collective
Collective::getDelta	./include/Collective.h	/^    double getDelta()const{ return (delta); }$/;"	f	class:Collective
Collective::getDiagnosticsOutputCycle	./include/Collective.h	/^    int getDiagnosticsOutputCycle()const{ return (DiagnosticsOutputCycle); }$/;"	f	class:Collective
Collective::getDim	./include/Collective.h	/^    int getDim()const{ return (dim); }$/;"	f	class:Collective
Collective::getDt	./include/Collective.h	/^    double getDt()const{ return (dt); }$/;"	f	class:Collective
Collective::getDx	./include/Collective.h	/^    double getDx()const{ return (dx); }$/;"	f	class:Collective
Collective::getDy	./include/Collective.h	/^    double getDy()const{ return (dy); }$/;"	f	class:Collective
Collective::getDz	./include/Collective.h	/^    double getDz()const{ return (dz); }$/;"	f	class:Collective
Collective::getFieldOutputCycle	./include/Collective.h	/^    int getFieldOutputCycle()const{ return (FieldOutputCycle); }$/;"	f	class:Collective
Collective::getGMREStol	./include/Collective.h	/^    double getGMREStol()const{ return (GMREStol); }$/;"	f	class:Collective
Collective::getL_square	./include/Collective.h	/^    double getL_square()const{ return (L_square); }$/;"	f	class:Collective
Collective::getLast_cycle	./include/Collective.h	/^    int getLast_cycle()const{ return (last_cycle); }$/;"	f	class:Collective
Collective::getLx	./include/Collective.h	/^    double getLx()const{ return (Lx); }$/;"	f	class:Collective
Collective::getLy	./include/Collective.h	/^    double getLy()const{ return (Ly); }$/;"	f	class:Collective
Collective::getLz	./include/Collective.h	/^    double getLz()const{ return (Lz); }$/;"	f	class:Collective
Collective::getNcycles	./include/Collective.h	/^    int getNcycles()const{ return (ncycles); }$/;"	f	class:Collective
Collective::getNiterMover	./include/Collective.h	/^    int getNiterMover()const{ return (NiterMover); }$/;"	f	class:Collective
Collective::getNp	./include/Collective.h	/^    int getNp(int nspecies)const{ return (np[nspecies]); }$/;"	f	class:Collective
Collective::getNpMax	./include/Collective.h	/^    int getNpMax(int nspecies)const{ return (npMax[nspecies]); }$/;"	f	class:Collective
Collective::getNpMaxNpRatio	./include/Collective.h	/^    double getNpMaxNpRatio()const{ return (NpMaxNpRatio); }$/;"	f	class:Collective
Collective::getNpcel	./include/Collective.h	/^    int getNpcel(int nspecies)const{ return (npcel[nspecies]); }$/;"	f	class:Collective
Collective::getNpcelx	./include/Collective.h	/^    int getNpcelx(int nspecies)const{ return (npcelx[nspecies]); }$/;"	f	class:Collective
Collective::getNpcely	./include/Collective.h	/^    int getNpcely(int nspecies)const{ return (npcely[nspecies]); }$/;"	f	class:Collective
Collective::getNpcelz	./include/Collective.h	/^    int getNpcelz(int nspecies)const{ return (npcelz[nspecies]); }$/;"	f	class:Collective
Collective::getNs	./include/Collective.h	/^    int getNs()const{ return (ns); }$/;"	f	class:Collective
Collective::getNxc	./include/Collective.h	/^    int getNxc()const{ return (nxc); }$/;"	f	class:Collective
Collective::getNyc	./include/Collective.h	/^    int getNyc()const{ return (nyc); }$/;"	f	class:Collective
Collective::getNzc	./include/Collective.h	/^    int getNzc()const{ return (nzc); }$/;"	f	class:Collective
Collective::getPERIODICX	./include/Collective.h	/^    bool getPERIODICX()const{ return (PERIODICX); }$/;"	f	class:Collective
Collective::getPERIODICY	./include/Collective.h	/^    bool getPERIODICY()const{ return (PERIODICY); }$/;"	f	class:Collective
Collective::getPERIODICZ	./include/Collective.h	/^    bool getPERIODICZ()const{ return (PERIODICZ); }$/;"	f	class:Collective
Collective::getParticlesOutputCycle	./include/Collective.h	/^    int getParticlesOutputCycle()const{ return (ParticlesOutputCycle); }$/;"	f	class:Collective
Collective::getPoissonCorrection	./include/Collective.h	/^    string getPoissonCorrection()const{ return (PoissonCorrection); }$/;"	f	class:Collective
Collective::getQOM	./include/Collective.h	/^    double getQOM(int nspecies)const{ return (qom[nspecies]); }$/;"	f	class:Collective
Collective::getRHOinit	./include/Collective.h	/^    double getRHOinit(int nspecies)const{ return (rhoINIT[nspecies]); }$/;"	f	class:Collective
Collective::getRHOinject	./include/Collective.h	/^    double getRHOinject(int nspecies)const { return(rhoINJECT[nspecies]); }$/;"	f	class:Collective
Collective::getRestartDirName	./include/Collective.h	/^    string getRestartDirName()const{ return (RestartDirName); }$/;"	f	class:Collective
Collective::getRestartOutputCycle	./include/Collective.h	/^    int getRestartOutputCycle()const{ return (RestartOutputCycle); }$/;"	f	class:Collective
Collective::getRestart_status	./include/Collective.h	/^    int getRestart_status()const{ return (restart_status); }$/;"	f	class:Collective
Collective::getSaveDirName	./include/Collective.h	/^    string getSaveDirName()const{ return (SaveDirName); }$/;"	f	class:Collective
Collective::getSimName	./include/Collective.h	/^    string getSimName()const{ return (SimName); }$/;"	f	class:Collective
Collective::getSmooth	./include/Collective.h	/^    double getSmooth()const{ return (Smooth); }$/;"	f	class:Collective
Collective::getTh	./include/Collective.h	/^    double getTh()const{ return (th); }$/;"	f	class:Collective
Collective::getTrackParticleID	./include/Collective.h	/^    bool getTrackParticleID(int nspecies)const$/;"	f	class:Collective
Collective::getU0	./include/Collective.h	/^    double getU0(int nspecies)const{ return (u0[nspecies]); }$/;"	f	class:Collective
Collective::getUth	./include/Collective.h	/^    double getUth(int nspecies)const{ return (uth[nspecies]); }$/;"	f	class:Collective
Collective::getV0	./include/Collective.h	/^    double getV0(int nspecies)const{ return (v0[nspecies]); }$/;"	f	class:Collective
Collective::getVerbose	./include/Collective.h	/^    bool getVerbose()const{ return (verbose); }$/;"	f	class:Collective
Collective::getVinj	./include/Collective.h	/^    double getVinj()const{ return (Vinj); }$/;"	f	class:Collective
Collective::getVth	./include/Collective.h	/^    double getVth(int nspecies)const{ return (vth[nspecies]); }$/;"	f	class:Collective
Collective::getW0	./include/Collective.h	/^    double getW0(int nspecies)const{ return (w0[nspecies]); }$/;"	f	class:Collective
Collective::getWriteMethod	./include/Collective.h	/^    string getWriteMethod()const{ return (wmethod); }$/;"	f	class:Collective
Collective::getWth	./include/Collective.h	/^    double getWth(int nspecies)const{ return (wth[nspecies]); }$/;"	f	class:Collective
Collective::getXLEN	./include/Collective.h	/^    int getXLEN()const{ return (XLEN); }$/;"	f	class:Collective
Collective::getYLEN	./include/Collective.h	/^    int getYLEN()const{ return (YLEN); }$/;"	f	class:Collective
Collective::getZLEN	./include/Collective.h	/^    int getZLEN()const{ return (ZLEN); }$/;"	f	class:Collective
Collective::getinputfile	./include/Collective.h	/^    string getinputfile()const{ return (inputfile); }$/;"	f	class:Collective
Collective::getx_center	./include/Collective.h	/^    double getx_center()const{ return (x_center); }$/;"	f	class:Collective
Collective::gety_center	./include/Collective.h	/^    double gety_center()const{ return (y_center); }$/;"	f	class:Collective
Collective::getz_center	./include/Collective.h	/^    double getz_center()const{ return (z_center); }$/;"	f	class:Collective
Collective::inputfile	./include/Collective.h	/^    string inputfile;$/;"	m	class:Collective
Collective::last_cycle	./include/Collective.h	/^    int last_cycle;$/;"	m	class:Collective
Collective::ncycles	./include/Collective.h	/^    int ncycles;$/;"	m	class:Collective
Collective::np	./include/Collective.h	/^    int *np;$/;"	m	class:Collective
Collective::npMax	./include/Collective.h	/^    int *npMax;$/;"	m	class:Collective
Collective::npcel	./include/Collective.h	/^    int *npcel;$/;"	m	class:Collective
Collective::npcelx	./include/Collective.h	/^    int *npcelx;$/;"	m	class:Collective
Collective::npcely	./include/Collective.h	/^    int *npcely;$/;"	m	class:Collective
Collective::npcelz	./include/Collective.h	/^    int *npcelz;$/;"	m	class:Collective
Collective::ns	./include/Collective.h	/^    int ns;$/;"	m	class:Collective
Collective::nxc	./include/Collective.h	/^    int nxc;$/;"	m	class:Collective
Collective::nyc	./include/Collective.h	/^    int nyc;$/;"	m	class:Collective
Collective::nzc	./include/Collective.h	/^    int nzc;$/;"	m	class:Collective
Collective::qom	./include/Collective.h	/^    double *qom;$/;"	m	class:Collective
Collective::restart_status	./include/Collective.h	/^    int restart_status;$/;"	m	class:Collective
Collective::rhoINIT	./include/Collective.h	/^    double *rhoINIT;$/;"	m	class:Collective
Collective::rhoINJECT	./include/Collective.h	/^    double *rhoINJECT;$/;"	m	class:Collective
Collective::save	./inputoutput/Collective.cpp	/^void Collective::save() {$/;"	f	class:Collective
Collective::th	./include/Collective.h	/^    double th;$/;"	m	class:Collective
Collective::u0	./include/Collective.h	/^    double *u0;$/;"	m	class:Collective
Collective::uth	./include/Collective.h	/^    double *uth;$/;"	m	class:Collective
Collective::v0	./include/Collective.h	/^    double *v0;$/;"	m	class:Collective
Collective::verbose	./include/Collective.h	/^    bool verbose;$/;"	m	class:Collective
Collective::vth	./include/Collective.h	/^    double *vth;$/;"	m	class:Collective
Collective::w0	./include/Collective.h	/^    double *w0;$/;"	m	class:Collective
Collective::wmethod	./include/Collective.h	/^    string wmethod;$/;"	m	class:Collective
Collective::wth	./include/Collective.h	/^    double *wth;$/;"	m	class:Collective
Collective::x_center	./include/Collective.h	/^    double x_center;$/;"	m	class:Collective
Collective::y_center	./include/Collective.h	/^    double y_center;$/;"	m	class:Collective
Collective::z_center	./include/Collective.h	/^    double z_center;$/;"	m	class:Collective
Collective::~Collective	./inputoutput/Collective.cpp	/^Collective::~Collective() {$/;"	f	class:Collective
CollectiveIO	./include/Collective.h	/^typedef Collective CollectiveIO;$/;"	t
CollectiveIO.h	./include/CollectiveIO.h	1;"	F
CollectiveIO_H	./include/CollectiveIO.h	9;"	d
Collective_H	./include/Collective.h	9;"	d
ComBasic3D.cpp	./communication/ComBasic3D.cpp	1;"	F
ComBasic3D.h	./include/ComBasic3D.h	1;"	F
ComBasic_H	./include/ComBasic3D.h	7;"	d
ComInterpNodes3D.cpp	./communication/ComInterpNodes3D.cpp	1;"	F
ComInterpNodes3D.h	./include/ComInterpNodes3D.h	1;"	F
ComInterpNodes_H	./include/ComInterpNodes3D.h	11;"	d
ComNodes3D.cpp	./communication/ComNodes3D.cpp	1;"	F
ComNodes3D.h	./include/ComNodes3D.h	1;"	F
ComNodes_H	./include/ComNodes3D.h	11;"	d
ComParser3D.cpp	./communication/ComParser3D.cpp	1;"	F
ComParser3D.h	./include/ComParser3D.h	1;"	F
ComParser_H	./include/ComParser3D.h	10;"	d
ComParticles3D.cpp	./communication/ComParticles3D.cpp	1;"	F
ComParticles3D.h	./include/ComParticles3D.h	1;"	F
ComParticles3D_H	./include/ComParticles3D.h	10;"	d
ConfigFile	./ConfigFile/src/ConfigFile.cpp	/^ConfigFile::ConfigFile()$/;"	f	class:ConfigFile
ConfigFile	./ConfigFile/src/ConfigFile.cpp	/^ConfigFile::ConfigFile(string filename, string delimiter, string comment, string sentry)$/;"	f	class:ConfigFile
ConfigFile	./ConfigFile/src/ConfigFile.h	/^class ConfigFile {$/;"	c
ConfigFile	./include/ConfigFile.h	/^class ConfigFile {$/;"	c
ConfigFile.cpp	./ConfigFile/src/ConfigFile.cpp	1;"	F
ConfigFile.h	./ConfigFile/src/ConfigFile.h	1;"	F
ConfigFile.h	./include/ConfigFile.h	1;"	F
ConfigFile::ConfigFile	./ConfigFile/src/ConfigFile.cpp	/^ConfigFile::ConfigFile()$/;"	f	class:ConfigFile
ConfigFile::ConfigFile	./ConfigFile/src/ConfigFile.cpp	/^ConfigFile::ConfigFile(string filename, string delimiter, string comment, string sentry)$/;"	f	class:ConfigFile
ConfigFile::T_as_string	./ConfigFile/src/ConfigFile.h	/^template < class T > string ConfigFile::T_as_string(const T & t) {$/;"	f	class:ConfigFile
ConfigFile::T_as_string	./include/ConfigFile.h	/^template < class T > string ConfigFile::T_as_string(const T & t) {$/;"	f	class:ConfigFile
ConfigFile::add	./ConfigFile/src/ConfigFile.h	/^template < class T > void ConfigFile::add(string key, const T & value) {$/;"	f	class:ConfigFile
ConfigFile::add	./include/ConfigFile.h	/^template < class T > void ConfigFile::add(string key, const T & value) {$/;"	f	class:ConfigFile
ConfigFile::file_not_found	./ConfigFile/src/ConfigFile.h	/^  struct file_not_found {$/;"	s	class:ConfigFile
ConfigFile::file_not_found	./include/ConfigFile.h	/^  struct file_not_found {$/;"	s	class:ConfigFile
ConfigFile::file_not_found::file_not_found	./ConfigFile/src/ConfigFile.h	/^    file_not_found(const string & filename_ = string())$/;"	f	struct:ConfigFile::file_not_found
ConfigFile::file_not_found::file_not_found	./include/ConfigFile.h	/^    file_not_found(const string & filename_ = string())$/;"	f	struct:ConfigFile::file_not_found
ConfigFile::file_not_found::filename	./ConfigFile/src/ConfigFile.h	/^    string filename;$/;"	m	struct:ConfigFile::file_not_found
ConfigFile::file_not_found::filename	./include/ConfigFile.h	/^    string filename;$/;"	m	struct:ConfigFile::file_not_found
ConfigFile::getComment	./ConfigFile/src/ConfigFile.h	/^  } string getComment() const {$/;"	f	class:ConfigFile
ConfigFile::getComment	./include/ConfigFile.h	/^  } string getComment() const {$/;"	f	class:ConfigFile
ConfigFile::getDelimiter	./ConfigFile/src/ConfigFile.h	/^  string getDelimiter() const {$/;"	f	class:ConfigFile
ConfigFile::getDelimiter	./include/ConfigFile.h	/^  string getDelimiter() const {$/;"	f	class:ConfigFile
ConfigFile::getSentry	./ConfigFile/src/ConfigFile.h	/^  } string getSentry() const {$/;"	f	class:ConfigFile
ConfigFile::getSentry	./include/ConfigFile.h	/^  } string getSentry() const {$/;"	f	class:ConfigFile
ConfigFile::keyExists	./ConfigFile/src/ConfigFile.cpp	/^bool ConfigFile::keyExists(const string & key) const {$/;"	f	class:ConfigFile
ConfigFile::key_not_found	./ConfigFile/src/ConfigFile.h	/^  struct key_not_found {        \/\/ thrown only by T read(key) variant of read()$/;"	s	class:ConfigFile
ConfigFile::key_not_found	./include/ConfigFile.h	/^  struct key_not_found {        \/\/ thrown only by T read(key) variant of read()$/;"	s	class:ConfigFile
ConfigFile::key_not_found::key	./ConfigFile/src/ConfigFile.h	/^    string key;$/;"	m	struct:ConfigFile::key_not_found
ConfigFile::key_not_found::key	./include/ConfigFile.h	/^    string key;$/;"	m	struct:ConfigFile::key_not_found
ConfigFile::key_not_found::key_not_found	./ConfigFile/src/ConfigFile.h	/^    key_not_found(const string & key_ = string())$/;"	f	struct:ConfigFile::key_not_found
ConfigFile::key_not_found::key_not_found	./include/ConfigFile.h	/^    key_not_found(const string & key_ = string())$/;"	f	struct:ConfigFile::key_not_found
ConfigFile::mapci	./ConfigFile/src/ConfigFile.h	/^  typedef std::map < string, string >::const_iterator mapci;$/;"	t	class:ConfigFile
ConfigFile::mapci	./include/ConfigFile.h	/^  typedef std::map < string, string >::const_iterator mapci;$/;"	t	class:ConfigFile
ConfigFile::mapi	./ConfigFile/src/ConfigFile.h	/^  typedef std::map < string, string >::iterator mapi;$/;"	t	class:ConfigFile
ConfigFile::mapi	./include/ConfigFile.h	/^  typedef std::map < string, string >::iterator mapi;$/;"	t	class:ConfigFile
ConfigFile::myComment	./ConfigFile/src/ConfigFile.h	/^  string myComment;             \/\/ separator between value and comments$/;"	m	class:ConfigFile
ConfigFile::myComment	./include/ConfigFile.h	/^  string myComment;             \/\/ separator between value and comments$/;"	m	class:ConfigFile
ConfigFile::myContents	./ConfigFile/src/ConfigFile.h	/^  std::map < string, string > myContents; \/\/ extracted keys and values$/;"	m	class:ConfigFile
ConfigFile::myContents	./include/ConfigFile.h	/^  std::map < string, string > myContents; \/\/ extracted keys and values$/;"	m	class:ConfigFile
ConfigFile::myDelimiter	./ConfigFile/src/ConfigFile.h	/^  string myDelimiter;           \/\/ separator between key and value$/;"	m	class:ConfigFile
ConfigFile::myDelimiter	./include/ConfigFile.h	/^  string myDelimiter;           \/\/ separator between key and value$/;"	m	class:ConfigFile
ConfigFile::mySentry	./ConfigFile/src/ConfigFile.h	/^  string mySentry;              \/\/ optional string to signal end of file$/;"	m	class:ConfigFile
ConfigFile::mySentry	./include/ConfigFile.h	/^  string mySentry;              \/\/ optional string to signal end of file$/;"	m	class:ConfigFile
ConfigFile::read	./ConfigFile/src/ConfigFile.h	/^template < class T > T ConfigFile::read(const string & key) const {$/;"	f	class:ConfigFile
ConfigFile::read	./ConfigFile/src/ConfigFile.h	/^template < class T > T ConfigFile::read(const string & key, const T & value) const {$/;"	f	class:ConfigFile
ConfigFile::read	./include/ConfigFile.h	/^template < class T > T ConfigFile::read(const string & key) const {$/;"	f	class:ConfigFile
ConfigFile::read	./include/ConfigFile.h	/^template < class T > T ConfigFile::read(const string & key, const T & value) const {$/;"	f	class:ConfigFile
ConfigFile::readInto	./ConfigFile/src/ConfigFile.h	/^template < class T > bool ConfigFile::readInto(T & var, const string & key) const {$/;"	f	class:ConfigFile
ConfigFile::readInto	./ConfigFile/src/ConfigFile.h	/^template < class T > bool ConfigFile::readInto(T & var, const string & key, const T & value) const {$/;"	f	class:ConfigFile
ConfigFile::readInto	./include/ConfigFile.h	/^template < class T > bool ConfigFile::readInto(T & var, const string & key) const {$/;"	f	class:ConfigFile
ConfigFile::readInto	./include/ConfigFile.h	/^template < class T > bool ConfigFile::readInto(T & var, const string & key, const T & value) const {$/;"	f	class:ConfigFile
ConfigFile::remove	./ConfigFile/src/ConfigFile.cpp	/^void ConfigFile::remove(const string & key) {$/;"	f	class:ConfigFile
ConfigFile::setComment	./ConfigFile/src/ConfigFile.h	/^  } string setComment(const string & s) {$/;"	f	class:ConfigFile
ConfigFile::setComment	./include/ConfigFile.h	/^  } string setComment(const string & s) {$/;"	f	class:ConfigFile
ConfigFile::setDelimiter	./ConfigFile/src/ConfigFile.h	/^  } string setDelimiter(const string & s) {$/;"	f	class:ConfigFile
ConfigFile::setDelimiter	./include/ConfigFile.h	/^  } string setDelimiter(const string & s) {$/;"	f	class:ConfigFile
ConfigFile::string_as_T	./ConfigFile/src/ConfigFile.h	/^template < class T > T ConfigFile::string_as_T(const string & s) {$/;"	f	class:ConfigFile
ConfigFile::string_as_T	./ConfigFile/src/ConfigFile.h	/^template <> inline bool ConfigFile::string_as_T < bool > (const string & s) {$/;"	f	class:ConfigFile
ConfigFile::string_as_T	./ConfigFile/src/ConfigFile.h	/^template <> inline string ConfigFile::string_as_T < string > (const string & s) {$/;"	f	class:ConfigFile
ConfigFile::string_as_T	./include/ConfigFile.h	/^template < class T > T ConfigFile::string_as_T(const string & s) {$/;"	f	class:ConfigFile
ConfigFile::string_as_T	./include/ConfigFile.h	/^template <> inline bool ConfigFile::string_as_T < bool > (const string & s) {$/;"	f	class:ConfigFile
ConfigFile::string_as_T	./include/ConfigFile.h	/^template <> inline string ConfigFile::string_as_T < string > (const string & s) {$/;"	f	class:ConfigFile
ConfigFile::trim	./ConfigFile/src/ConfigFile.cpp	/^void ConfigFile::trim(string & s) {$/;"	f	class:ConfigFile
ConstantChargeOpenBC	./fields/EMfields3D.cpp	/^void EMfields3D::ConstantChargeOpenBC(Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
ConstantChargeOpenBCv2	./fields/EMfields3D.cpp	/^void EMfields3D::ConstantChargeOpenBCv2(Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
ConstantChargePlanet	./fields/EMfields3D.cpp	/^void EMfields3D::ConstantChargePlanet(Grid * grid, VirtualTopology3D * vct, double R, double x_center, double y_center, double z_center) {$/;"	f	class:EMfields3D
CreatePHDF5file	./inputoutput/phdf5.cpp	/^void PHDF5fileClass::CreatePHDF5file(double *L, int *dglob, int *dlocl, bool bp){$/;"	f	class:PHDF5fileClass
DEC	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	281;"	d	file:
DEC	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	281;"	d	file:
DEC	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	281;"	d	file:
DEC	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	281;"	d	file:
DEC	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	281;"	d	file:
DiagnosticsOutputCycle	./include/Collective.h	/^    int DiagnosticsOutputCycle;$/;"	m	class:Collective
Dimens	./include/PSKOutput.h	/^    Dimens(const std::vector < int >&dimens):_dimens(dimens) {;$/;"	f	class:PSK::Dimens
Dimens	./include/PSKOutput.h	/^    Dimens(int d1):_dimens(1) {$/;"	f	class:PSK::Dimens
Dimens	./include/PSKOutput.h	/^    Dimens(int d1, int d2):_dimens(2) {$/;"	f	class:PSK::Dimens
Dimens	./include/PSKOutput.h	/^    Dimens(int d1, int d2, int d3):_dimens(3) {$/;"	f	class:PSK::Dimens
Dimens	./include/PSKOutput.h	/^    Dimens(int d1, int d2, int d3, int d4):_dimens(4) {$/;"	f	class:PSK::Dimens
Dimens	./include/PSKOutput.h	/^    Dimens(void) {;$/;"	f	class:PSK::Dimens
Dimens	./include/PSKOutput.h	/^    } Dimens(const Dimens & dimens):_dimens(dimens._dimens) {;$/;"	f	class:PSK::Dimens
Dimens	./include/PSKOutput.h	/^  class Dimens {$/;"	c	namespace:PSK
DriftSpecies	./include/EMfields3D.h	/^    bool *DriftSpecies;$/;"	m	class:EMfields3D
Dx	./include/EMfields3D.h	/^    array3_double Dx;$/;"	m	class:EMfields3D
Dy	./include/EMfields3D.h	/^    array3_double Dy;$/;"	m	class:EMfields3D
Dz	./include/EMfields3D.h	/^    array3_double Dz;$/;"	m	class:EMfields3D
ELLIPTIC_H	./include/EllipticF.h	8;"	d
EMf	./include/iPic3D.h	/^    EMfields3D    *EMf;$/;"	m	class:iPic3D::c_Solver
EMfields3D	./fields/EMfields3D.cpp	/^EMfields3D::EMfields3D(Collective * col, Grid * grid) : $/;"	f	class:EMfields3D
EMfields3D	./include/EMfields3D.h	/^class EMfields3D                \/\/ :public Field$/;"	c
EMfields3D.cpp	./fields/EMfields3D.cpp	1;"	F
EMfields3D.h	./include/EMfields3D.h	1;"	F
EMfields3D::AddPerturbation	./fields/EMfields3D.cpp	/^void EMfields3D::AddPerturbation(double deltaBoB, double kx, double ky, double Ex_mod, double Ex_phase, double Ey_mod, double Ey_phase, double Ez_mod, double Ez_phase, double Bx_mod, double Bx_phase, double By_mod, double By_phase, double Bz_mod, double Bz_phase, double B0, Grid * grid) {$/;"	f	class:EMfields3D
EMfields3D::AddPerturbationRho	./fields/EMfields3D.cpp	/^void EMfields3D::AddPerturbationRho(double deltaBoB, double kx, double ky, double Bx_mod, double By_mod, double Bz_mod, double ne_mod, double ne_phase, double ni_mod, double ni_phase, double B0, Grid * grid) {$/;"	f	class:EMfields3D
EMfields3D::B0x	./include/EMfields3D.h	/^    double B0x, B0y, B0z, delta;$/;"	m	class:EMfields3D
EMfields3D::B0y	./include/EMfields3D.h	/^    double B0x, B0y, B0z, delta;$/;"	m	class:EMfields3D
EMfields3D::B0z	./include/EMfields3D.h	/^    double B0x, B0y, B0z, delta;$/;"	m	class:EMfields3D
EMfields3D::B1x	./include/EMfields3D.h	/^    double B1x, B1y, B1z;$/;"	m	class:EMfields3D
EMfields3D::B1y	./include/EMfields3D.h	/^    double B1x, B1y, B1z;$/;"	m	class:EMfields3D
EMfields3D::B1z	./include/EMfields3D.h	/^    double B1x, B1y, B1z;$/;"	m	class:EMfields3D
EMfields3D::BoundaryConditionsB	./fields/EMfields3D.cpp	/^void EMfields3D::BoundaryConditionsB(arr3_double vectorX, arr3_double vectorY, arr3_double vectorZ,int nx, int ny, int nz,Grid *grid, VirtualTopology3D *vct){$/;"	f	class:EMfields3D
EMfields3D::BoundaryConditionsE	./fields/EMfields3D.cpp	/^void EMfields3D::BoundaryConditionsE(arr3_double vectorX, arr3_double vectorY, arr3_double vectorZ,int nx, int ny, int nz,Grid *grid, VirtualTopology3D *vct){$/;"	f	class:EMfields3D
EMfields3D::BoundaryConditionsEImage	./fields/EMfields3D.cpp	/^void EMfields3D::BoundaryConditionsEImage(arr3_double imageX, arr3_double imageY, arr3_double imageZ,$/;"	f	class:EMfields3D
EMfields3D::Bx_ext	./include/EMfields3D.h	/^    array3_double   Bx_ext;$/;"	m	class:EMfields3D
EMfields3D::Bxc	./include/EMfields3D.h	/^    array3_double Bxc;$/;"	m	class:EMfields3D
EMfields3D::Bxn	./include/EMfields3D.h	/^    array3_double Bxn;$/;"	m	class:EMfields3D
EMfields3D::By_ext	./include/EMfields3D.h	/^    array3_double   By_ext;$/;"	m	class:EMfields3D
EMfields3D::Byc	./include/EMfields3D.h	/^    array3_double Byc;$/;"	m	class:EMfields3D
EMfields3D::Byn	./include/EMfields3D.h	/^    array3_double Byn;$/;"	m	class:EMfields3D
EMfields3D::Bz_ext	./include/EMfields3D.h	/^    array3_double   Bz_ext;$/;"	m	class:EMfields3D
EMfields3D::Bzc	./include/EMfields3D.h	/^    array3_double Bzc;$/;"	m	class:EMfields3D
EMfields3D::Bzn	./include/EMfields3D.h	/^    array3_double Bzn;$/;"	m	class:EMfields3D
EMfields3D::CGtol	./include/EMfields3D.h	/^    double CGtol;$/;"	m	class:EMfields3D
EMfields3D::Case	./include/EMfields3D.h	/^    string Case;$/;"	m	class:EMfields3D
EMfields3D::ConstantChargeOpenBC	./fields/EMfields3D.cpp	/^void EMfields3D::ConstantChargeOpenBC(Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
EMfields3D::ConstantChargeOpenBCv2	./fields/EMfields3D.cpp	/^void EMfields3D::ConstantChargeOpenBCv2(Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
EMfields3D::ConstantChargePlanet	./fields/EMfields3D.cpp	/^void EMfields3D::ConstantChargePlanet(Grid * grid, VirtualTopology3D * vct, double R, double x_center, double y_center, double z_center) {$/;"	f	class:EMfields3D
EMfields3D::DriftSpecies	./include/EMfields3D.h	/^    bool *DriftSpecies;$/;"	m	class:EMfields3D
EMfields3D::Dx	./include/EMfields3D.h	/^    array3_double Dx;$/;"	m	class:EMfields3D
EMfields3D::Dy	./include/EMfields3D.h	/^    array3_double Dy;$/;"	m	class:EMfields3D
EMfields3D::Dz	./include/EMfields3D.h	/^    array3_double Dz;$/;"	m	class:EMfields3D
EMfields3D::EMfields3D	./fields/EMfields3D.cpp	/^EMfields3D::EMfields3D(Collective * col, Grid * grid) : $/;"	f	class:EMfields3D
EMfields3D::Ex	./include/EMfields3D.h	/^    array3_double Ex;$/;"	m	class:EMfields3D
EMfields3D::Exth	./include/EMfields3D.h	/^    array3_double Exth;$/;"	m	class:EMfields3D
EMfields3D::Ey	./include/EMfields3D.h	/^    array3_double Ey;$/;"	m	class:EMfields3D
EMfields3D::Eyth	./include/EMfields3D.h	/^    array3_double Eyth;$/;"	m	class:EMfields3D
EMfields3D::Ez	./include/EMfields3D.h	/^    array3_double Ez;$/;"	m	class:EMfields3D
EMfields3D::Ezth	./include/EMfields3D.h	/^    array3_double Ezth;$/;"	m	class:EMfields3D
EMfields3D::FourPI	./include/EMfields3D.h	/^    double FourPI;$/;"	m	class:EMfields3D
EMfields3D::GMREStol	./include/EMfields3D.h	/^    double GMREStol;$/;"	m	class:EMfields3D
EMfields3D::Jx	./include/EMfields3D.h	/^    array3_double Jx;$/;"	m	class:EMfields3D
EMfields3D::Jx_ext	./include/EMfields3D.h	/^    array3_double   Jx_ext;$/;"	m	class:EMfields3D
EMfields3D::Jxh	./include/EMfields3D.h	/^    array3_double Jxh;$/;"	m	class:EMfields3D
EMfields3D::Jxs	./include/EMfields3D.h	/^    array4_double Jxs;$/;"	m	class:EMfields3D
EMfields3D::Jy	./include/EMfields3D.h	/^    array3_double Jy;$/;"	m	class:EMfields3D
EMfields3D::Jy_ext	./include/EMfields3D.h	/^    array3_double   Jy_ext;$/;"	m	class:EMfields3D
EMfields3D::Jyh	./include/EMfields3D.h	/^    array3_double Jyh;$/;"	m	class:EMfields3D
EMfields3D::Jys	./include/EMfields3D.h	/^    array4_double Jys;$/;"	m	class:EMfields3D
EMfields3D::Jz	./include/EMfields3D.h	/^    array3_double Jz;$/;"	m	class:EMfields3D
EMfields3D::Jz_ext	./include/EMfields3D.h	/^    array3_double   Jz_ext;$/;"	m	class:EMfields3D
EMfields3D::Jzh	./include/EMfields3D.h	/^    array3_double Jzh;$/;"	m	class:EMfields3D
EMfields3D::Jzs	./include/EMfields3D.h	/^    array4_double Jzs;$/;"	m	class:EMfields3D
EMfields3D::L_square	./include/EMfields3D.h	/^    double L_square;$/;"	m	class:EMfields3D
EMfields3D::Lx	./include/EMfields3D.h	/^    double Lx;$/;"	m	class:EMfields3D
EMfields3D::Ly	./include/EMfields3D.h	/^    double Ly;$/;"	m	class:EMfields3D
EMfields3D::Lz	./include/EMfields3D.h	/^    double Lz;$/;"	m	class:EMfields3D
EMfields3D::MUdot	./fields/EMfields3D.cpp	/^void EMfields3D::MUdot(arr3_double MUdotX, arr3_double MUdotY, arr3_double MUdotZ,$/;"	f	class:EMfields3D
EMfields3D::MaxwellImage	./fields/EMfields3D.cpp	/^void EMfields3D::MaxwellImage(double *im, double *vector, Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
EMfields3D::MaxwellSource	./fields/EMfields3D.cpp	/^void EMfields3D::MaxwellSource(double *bkrylov, Grid * grid, VirtualTopology3D * vct, Collective *col) {$/;"	f	class:EMfields3D
EMfields3D::PHI	./include/EMfields3D.h	/^    array3_double PHI;$/;"	m	class:EMfields3D
EMfields3D::PIdot	./fields/EMfields3D.cpp	/^void EMfields3D::PIdot(arr3_double PIdotX, arr3_double PIdotY, arr3_double PIdotZ, const_arr3_double vectX, const_arr3_double vectY, const_arr3_double vectZ, int ns, Grid * grid) {$/;"	f	class:EMfields3D
EMfields3D::PoissonCorrection	./include/EMfields3D.h	/^    bool PoissonCorrection;$/;"	m	class:EMfields3D
EMfields3D::PoissonImage	./fields/EMfields3D.cpp	/^void EMfields3D::PoissonImage(double *image, double *vector, Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
EMfields3D::RestartDirName	./include/EMfields3D.h	/^    string RestartDirName;$/;"	m	class:EMfields3D
EMfields3D::Smooth	./include/EMfields3D.h	/^    double Smooth;$/;"	m	class:EMfields3D
EMfields3D::addJx	./include/EMfields3D.h	/^inline void EMfields3D::addJx(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
EMfields3D::addJy	./include/EMfields3D.h	/^inline void EMfields3D::addJy(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
EMfields3D::addJz	./include/EMfields3D.h	/^inline void EMfields3D::addJz(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
EMfields3D::addPxx	./include/EMfields3D.h	/^inline void EMfields3D::addPxx(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
EMfields3D::addPxy	./include/EMfields3D.h	/^inline void EMfields3D::addPxy(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
EMfields3D::addPxz	./include/EMfields3D.h	/^inline void EMfields3D::addPxz(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
EMfields3D::addPyy	./include/EMfields3D.h	/^inline void EMfields3D::addPyy(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
EMfields3D::addPyz	./include/EMfields3D.h	/^inline void EMfields3D::addPyz(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
EMfields3D::addPzz	./include/EMfields3D.h	/^inline void EMfields3D::addPzz(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
EMfields3D::addRho	./include/EMfields3D.h	/^inline void EMfields3D::addRho(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
EMfields3D::adjustNonPeriodicDensities	./fields/EMfields3D.cpp	/^void EMfields3D::adjustNonPeriodicDensities(int is, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
EMfields3D::bcEMfaceXleft	./include/EMfields3D.h	/^    int bcEMfaceXleft;$/;"	m	class:EMfields3D
EMfields3D::bcEMfaceXright	./include/EMfields3D.h	/^    int bcEMfaceXright;$/;"	m	class:EMfields3D
EMfields3D::bcEMfaceYleft	./include/EMfields3D.h	/^    int bcEMfaceYleft;$/;"	m	class:EMfields3D
EMfields3D::bcEMfaceYright	./include/EMfields3D.h	/^    int bcEMfaceYright;$/;"	m	class:EMfields3D
EMfields3D::bcEMfaceZleft	./include/EMfields3D.h	/^    int bcEMfaceZleft;$/;"	m	class:EMfields3D
EMfields3D::bcEMfaceZright	./include/EMfields3D.h	/^    int bcEMfaceZright;$/;"	m	class:EMfields3D
EMfields3D::bcPHIfaceXleft	./include/EMfields3D.h	/^    int bcPHIfaceXleft;$/;"	m	class:EMfields3D
EMfields3D::bcPHIfaceXright	./include/EMfields3D.h	/^    int bcPHIfaceXright;$/;"	m	class:EMfields3D
EMfields3D::bcPHIfaceYleft	./include/EMfields3D.h	/^    int bcPHIfaceYleft;$/;"	m	class:EMfields3D
EMfields3D::bcPHIfaceYright	./include/EMfields3D.h	/^    int bcPHIfaceYright;$/;"	m	class:EMfields3D
EMfields3D::bcPHIfaceZleft	./include/EMfields3D.h	/^    int bcPHIfaceZleft;$/;"	m	class:EMfields3D
EMfields3D::bcPHIfaceZright	./include/EMfields3D.h	/^    int bcPHIfaceZright;$/;"	m	class:EMfields3D
EMfields3D::c	./include/EMfields3D.h	/^    double c;$/;"	m	class:EMfields3D
EMfields3D::calculateB	./fields/EMfields3D.cpp	/^void EMfields3D::calculateB(Grid * grid, VirtualTopology3D * vct, Collective *col) {$/;"	f	class:EMfields3D
EMfields3D::calculateE	./fields/EMfields3D.cpp	/^void EMfields3D::calculateE(Grid * grid, VirtualTopology3D * vct, Collective *col) {$/;"	f	class:EMfields3D
EMfields3D::calculateHatFunctions	./fields/EMfields3D.cpp	/^void EMfields3D::calculateHatFunctions(Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
EMfields3D::communicateGhostP2G	./fields/EMfields3D.cpp	/^void EMfields3D::communicateGhostP2G(int ns, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
EMfields3D::delt	./include/EMfields3D.h	/^    double delt;$/;"	m	class:EMfields3D
EMfields3D::delta	./include/EMfields3D.h	/^    double B0x, B0y, B0z, delta;$/;"	m	class:EMfields3D
EMfields3D::divC	./include/EMfields3D.h	/^    array3_double divC;$/;"	m	class:EMfields3D
EMfields3D::dt	./include/EMfields3D.h	/^    double dt;$/;"	m	class:EMfields3D
EMfields3D::dx	./include/EMfields3D.h	/^    double dx, dy, dz, invVOL;$/;"	m	class:EMfields3D
EMfields3D::dy	./include/EMfields3D.h	/^    double dx, dy, dz, invVOL;$/;"	m	class:EMfields3D
EMfields3D::dz	./include/EMfields3D.h	/^    double dx, dy, dz, invVOL;$/;"	m	class:EMfields3D
EMfields3D::fetch_moments10Array	./include/EMfields3D.h	/^    Moments10& fetch_moments10Array(int i){$/;"	f	class:EMfields3D
EMfields3D::fieldForPcls	./include/EMfields3D.h	/^    array4_pfloat fieldForPcls;$/;"	m	class:EMfields3D
EMfields3D::fixBforcefree	./fields/EMfields3D.cpp	/^void EMfields3D::fixBforcefree(Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
EMfields3D::fixBgem	./fields/EMfields3D.cpp	/^void EMfields3D::fixBgem(Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
EMfields3D::getBenergy	./fields/EMfields3D.cpp	/^double EMfields3D::getBenergy(void) {$/;"	f	class:EMfields3D
EMfields3D::getBx	./include/EMfields3D.h	/^    arr3_double getBx() { return Bxn; }$/;"	f	class:EMfields3D
EMfields3D::getBx	./include/EMfields3D.h	/^    double getBx(int X, int Y, int Z) const { return Bxn.get(X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getBx_ext	./include/EMfields3D.h	/^    arr3_double getBx_ext() { return Bx_ext; }$/;"	f	class:EMfields3D
EMfields3D::getBx_ext	./include/EMfields3D.h	/^    double getBx_ext(int X, int Y, int Z) const{return Bx_ext.get(X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getBxc	./fields/EMfields3D.cpp	/^void EMfields3D::getBxc(arr3_double arr) {$/;"	f	class:EMfields3D
EMfields3D::getBy	./include/EMfields3D.h	/^    arr3_double getBy() { return Byn; }$/;"	f	class:EMfields3D
EMfields3D::getBy	./include/EMfields3D.h	/^    double getBy(int X, int Y, int Z) const { return Byn.get(X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getBy_ext	./include/EMfields3D.h	/^    arr3_double getBy_ext() { return By_ext; }$/;"	f	class:EMfields3D
EMfields3D::getBy_ext	./include/EMfields3D.h	/^    double getBy_ext(int X, int Y, int Z) const{return By_ext.get(X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getByc	./fields/EMfields3D.cpp	/^void EMfields3D::getByc(arr3_double arr) {$/;"	f	class:EMfields3D
EMfields3D::getBz	./include/EMfields3D.h	/^    arr3_double getBz() { return Bzn; }$/;"	f	class:EMfields3D
EMfields3D::getBz	./include/EMfields3D.h	/^    double getBz(int X, int Y, int Z) const { return Bzn.get(X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getBz_ext	./include/EMfields3D.h	/^    arr3_double getBz_ext() { return Bz_ext; }$/;"	f	class:EMfields3D
EMfields3D::getBz_ext	./include/EMfields3D.h	/^    double getBz_ext(int X, int Y, int Z) const{return Bz_ext.get(X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getBzc	./fields/EMfields3D.cpp	/^void EMfields3D::getBzc(arr3_double arr) {$/;"	f	class:EMfields3D
EMfields3D::getEenergy	./fields/EMfields3D.cpp	/^double EMfields3D::getEenergy(void) {$/;"	f	class:EMfields3D
EMfields3D::getEx	./include/EMfields3D.h	/^    arr3_double getEx() { return Ex; }$/;"	f	class:EMfields3D
EMfields3D::getEx	./include/EMfields3D.h	/^    double getEx(int X, int Y, int Z) const { return Ex.get(X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getExc	./fields/EMfields3D.cpp	/^void EMfields3D::getExc(arr3_double arr, Grid3DCU *grid) {$/;"	f	class:EMfields3D
EMfields3D::getEy	./include/EMfields3D.h	/^    arr3_double getEy() { return Ey; }$/;"	f	class:EMfields3D
EMfields3D::getEy	./include/EMfields3D.h	/^    double getEy(int X, int Y, int Z) const { return Ey.get(X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getEyc	./fields/EMfields3D.cpp	/^void EMfields3D::getEyc(arr3_double arr, Grid3DCU *grid) {$/;"	f	class:EMfields3D
EMfields3D::getEz	./include/EMfields3D.h	/^    arr3_double getEz() { return Ez; }$/;"	f	class:EMfields3D
EMfields3D::getEz	./include/EMfields3D.h	/^    double getEz(int X, int Y, int Z) const { return Ez.get(X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getEzc	./fields/EMfields3D.cpp	/^void EMfields3D::getEzc(arr3_double arr, Grid3DCU *grid) {$/;"	f	class:EMfields3D
EMfields3D::getJx	./include/EMfields3D.h	/^    arr3_double getJx() { return Jx; }$/;"	f	class:EMfields3D
EMfields3D::getJx	./include/EMfields3D.h	/^    double getJx(int X, int Y, int Z) const { return Jx.get(X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getJxs	./include/EMfields3D.h	/^    arr4_double getJxs() { return Jxs; }$/;"	f	class:EMfields3D
EMfields3D::getJxs	./include/EMfields3D.h	/^    double getJxs(int X,int Y,int Z,int is)const{return Jxs.get(is,X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getJxsc	./fields/EMfields3D.cpp	/^void EMfields3D::getJxsc(arr3_double arr, Grid3DCU *grid, int is) {$/;"	f	class:EMfields3D
EMfields3D::getJy	./include/EMfields3D.h	/^    arr3_double getJy() { return Jy; }$/;"	f	class:EMfields3D
EMfields3D::getJy	./include/EMfields3D.h	/^    double getJy(int X, int Y, int Z) const { return Jy.get(X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getJys	./include/EMfields3D.h	/^    arr4_double getJys() { return Jys; }$/;"	f	class:EMfields3D
EMfields3D::getJys	./include/EMfields3D.h	/^    double getJys(int X,int Y,int Z,int is)const{return Jys.get(is,X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getJysc	./fields/EMfields3D.cpp	/^void EMfields3D::getJysc(arr3_double arr, Grid3DCU *grid, int is) {$/;"	f	class:EMfields3D
EMfields3D::getJz	./include/EMfields3D.h	/^    arr3_double getJz() { return Jz; }$/;"	f	class:EMfields3D
EMfields3D::getJz	./include/EMfields3D.h	/^    double getJz(int X, int Y, int Z) const { return Jz.get(X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getJzs	./include/EMfields3D.h	/^    arr4_double getJzs() { return Jzs; }$/;"	f	class:EMfields3D
EMfields3D::getJzs	./include/EMfields3D.h	/^    double getJzs(int X,int Y,int Z,int is)const{return Jzs.get(is,X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getJzsc	./fields/EMfields3D.cpp	/^void EMfields3D::getJzsc(arr3_double arr, Grid3DCU *grid, int is) {$/;"	f	class:EMfields3D
EMfields3D::getPHI	./include/EMfields3D.h	/^    arr3_double getPHI() {return PHI;}$/;"	f	class:EMfields3D
EMfields3D::getRHOc	./include/EMfields3D.h	/^    arr3_double getRHOc() { return rhoc; }$/;"	f	class:EMfields3D
EMfields3D::getRHOc	./include/EMfields3D.h	/^    double getRHOc(int X, int Y, int Z) const { return rhoc.get(X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getRHOcs	./fields/EMfields3D.cpp	/^void EMfields3D::getRHOcs(arr3_double arr, Grid3DCU *grid, int is) {$/;"	f	class:EMfields3D
EMfields3D::getRHOcs	./include/EMfields3D.h	/^    double getRHOcs(int X,int Y,int Z,int is)const{return rhocs.get(is,X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getRHOn	./include/EMfields3D.h	/^    arr3_double getRHOn() { return rhon; }$/;"	f	class:EMfields3D
EMfields3D::getRHOn	./include/EMfields3D.h	/^    double getRHOn(int X, int Y, int Z) const { return rhon.get(X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::getRHOns	./include/EMfields3D.h	/^    arr4_double getRHOns(){return rhons;}$/;"	f	class:EMfields3D
EMfields3D::getRHOns	./include/EMfields3D.h	/^    double getRHOns(int X,int Y,int Z,int is)const{return rhons.get(is,X,Y,Z);}$/;"	f	class:EMfields3D
EMfields3D::get_InfoFieldsBottom	./fields/EMfields3D.cpp	/^injInfoFields* EMfields3D::get_InfoFieldsBottom() {return injFieldsBottom;}$/;"	f	class:EMfields3D
EMfields3D::get_InfoFieldsFront	./fields/EMfields3D.cpp	/^injInfoFields* EMfields3D::get_InfoFieldsFront() {return injFieldsFront;}$/;"	f	class:EMfields3D
EMfields3D::get_InfoFieldsLeft	./fields/EMfields3D.cpp	/^injInfoFields* EMfields3D::get_InfoFieldsLeft() {return injFieldsLeft;}$/;"	f	class:EMfields3D
EMfields3D::get_InfoFieldsRear	./fields/EMfields3D.cpp	/^injInfoFields* EMfields3D::get_InfoFieldsRear() {return injFieldsRear;}$/;"	f	class:EMfields3D
EMfields3D::get_InfoFieldsRight	./fields/EMfields3D.cpp	/^injInfoFields* EMfields3D::get_InfoFieldsRight() {return injFieldsRight;}$/;"	f	class:EMfields3D
EMfields3D::get_InfoFieldsTop	./fields/EMfields3D.cpp	/^injInfoFields* EMfields3D::get_InfoFieldsTop() {return injFieldsTop;}$/;"	f	class:EMfields3D
EMfields3D::get_fieldForPcls	./include/EMfields3D.h	/^    const_arr4_pfloat get_fieldForPcls() { return fieldForPcls; }$/;"	f	class:EMfields3D
EMfields3D::get_sizeMomentsArray	./include/EMfields3D.h	/^    int get_sizeMomentsArray() { return sizeMomentsArray; }$/;"	f	class:EMfields3D
EMfields3D::getpXXsn	./include/EMfields3D.h	/^    arr4_double getpXXsn() { return pXXsn; }$/;"	f	class:EMfields3D
EMfields3D::getpXYsn	./include/EMfields3D.h	/^    arr4_double getpXYsn() { return pXYsn; }$/;"	f	class:EMfields3D
EMfields3D::getpXZsn	./include/EMfields3D.h	/^    arr4_double getpXZsn() { return pXZsn; }$/;"	f	class:EMfields3D
EMfields3D::getpYYsn	./include/EMfields3D.h	/^    arr4_double getpYYsn() { return pYYsn; }$/;"	f	class:EMfields3D
EMfields3D::getpYZsn	./include/EMfields3D.h	/^    arr4_double getpYZsn() { return pYZsn; }$/;"	f	class:EMfields3D
EMfields3D::getpZZsn	./include/EMfields3D.h	/^    arr4_double getpZZsn() { return pZZsn; }$/;"	f	class:EMfields3D
EMfields3D::imageX	./include/EMfields3D.h	/^    array3_double imageX;$/;"	m	class:EMfields3D
EMfields3D::imageY	./include/EMfields3D.h	/^    array3_double imageY;$/;"	m	class:EMfields3D
EMfields3D::imageZ	./include/EMfields3D.h	/^    array3_double imageZ;$/;"	m	class:EMfields3D
EMfields3D::init	./fields/EMfields3D.cpp	/^void EMfields3D::init(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
EMfields3D::initBATSRUS	./fields/EMfields3D.cpp	/^void EMfields3D::initBATSRUS(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
EMfields3D::initBEAM	./fields/EMfields3D.cpp	/^void EMfields3D::initBEAM(VirtualTopology3D * vct, Grid * grid, Collective *col, double x_center, double y_center, double z_center, double radius) {$/;"	f	class:EMfields3D
EMfields3D::initDipole	./fields/EMfields3D.cpp	/^void EMfields3D::initDipole(VirtualTopology3D *vct, Grid *grid, Collective *col){$/;"	f	class:EMfields3D
EMfields3D::initDoublePeriodicHarrisWithGaussianHumpPerturbation	./fields/EMfields3D.cpp	/^void EMfields3D::initDoublePeriodicHarrisWithGaussianHumpPerturbation(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
EMfields3D::initEM_rotate	./fields/EMfields3D.cpp	/^void EMfields3D::initEM_rotate(VirtualTopology3D * vct, Grid * grid, Collective *col, double B, double theta) {$/;"	f	class:EMfields3D
EMfields3D::initForceFree	./fields/EMfields3D.cpp	/^void EMfields3D::initForceFree(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
EMfields3D::initGEM	./fields/EMfields3D.cpp	/^void EMfields3D::initGEM(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
EMfields3D::initGEMDipoleLikeTailNoPert	./fields/EMfields3D.cpp	/^void EMfields3D::initGEMDipoleLikeTailNoPert(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
EMfields3D::initGEMnoPert	./fields/EMfields3D.cpp	/^void EMfields3D::initGEMnoPert(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
EMfields3D::initOriginalGEM	./fields/EMfields3D.cpp	/^void EMfields3D::initOriginalGEM(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
EMfields3D::initRandomField	./fields/EMfields3D.cpp	/^void EMfields3D::initRandomField(VirtualTopology3D *vct, Grid *grid, Collective *col)$/;"	f	class:EMfields3D
EMfields3D::injFieldsBottom	./include/EMfields3D.h	/^    injInfoFields *injFieldsLeft, *injFieldsRight, *injFieldsTop, *injFieldsBottom, *injFieldsFront, *injFieldsRear;$/;"	m	class:EMfields3D
EMfields3D::injFieldsFront	./include/EMfields3D.h	/^    injInfoFields *injFieldsLeft, *injFieldsRight, *injFieldsTop, *injFieldsBottom, *injFieldsFront, *injFieldsRear;$/;"	m	class:EMfields3D
EMfields3D::injFieldsLeft	./include/EMfields3D.h	/^    injInfoFields *injFieldsLeft, *injFieldsRight, *injFieldsTop, *injFieldsBottom, *injFieldsFront, *injFieldsRear;$/;"	m	class:EMfields3D
EMfields3D::injFieldsRear	./include/EMfields3D.h	/^    injInfoFields *injFieldsLeft, *injFieldsRight, *injFieldsTop, *injFieldsBottom, *injFieldsFront, *injFieldsRear;$/;"	m	class:EMfields3D
EMfields3D::injFieldsRight	./include/EMfields3D.h	/^    injInfoFields *injFieldsLeft, *injFieldsRight, *injFieldsTop, *injFieldsBottom, *injFieldsFront, *injFieldsRear;$/;"	m	class:EMfields3D
EMfields3D::injFieldsTop	./include/EMfields3D.h	/^    injInfoFields *injFieldsLeft, *injFieldsRight, *injFieldsTop, *injFieldsBottom, *injFieldsFront, *injFieldsRear;$/;"	m	class:EMfields3D
EMfields3D::interpDensitiesN2C	./fields/EMfields3D.cpp	/^void EMfields3D::interpDensitiesN2C(VirtualTopology3D * vct, Grid * grid) {$/;"	f	class:EMfields3D
EMfields3D::invVOL	./include/EMfields3D.h	/^    double dx, dy, dz, invVOL;$/;"	m	class:EMfields3D
EMfields3D::moments10Array	./include/EMfields3D.h	/^    Moments10 **moments10Array;$/;"	m	class:EMfields3D
EMfields3D::ns	./include/EMfields3D.h	/^    int ns;$/;"	m	class:EMfields3D
EMfields3D::nxc	./include/EMfields3D.h	/^    int nxc;$/;"	m	class:EMfields3D
EMfields3D::nxn	./include/EMfields3D.h	/^    int nxn;$/;"	m	class:EMfields3D
EMfields3D::nyc	./include/EMfields3D.h	/^    int nyc;$/;"	m	class:EMfields3D
EMfields3D::nyn	./include/EMfields3D.h	/^    int nyn;$/;"	m	class:EMfields3D
EMfields3D::nzc	./include/EMfields3D.h	/^    int nzc;$/;"	m	class:EMfields3D
EMfields3D::nzn	./include/EMfields3D.h	/^    int nzn;$/;"	m	class:EMfields3D
EMfields3D::pXXsn	./include/EMfields3D.h	/^    array4_double pXXsn;$/;"	m	class:EMfields3D
EMfields3D::pXYsn	./include/EMfields3D.h	/^    array4_double pXYsn;$/;"	m	class:EMfields3D
EMfields3D::pXZsn	./include/EMfields3D.h	/^    array4_double pXZsn;$/;"	m	class:EMfields3D
EMfields3D::pYYsn	./include/EMfields3D.h	/^    array4_double pYYsn;$/;"	m	class:EMfields3D
EMfields3D::pYZsn	./include/EMfields3D.h	/^    array4_double pYZsn;$/;"	m	class:EMfields3D
EMfields3D::pZZsn	./include/EMfields3D.h	/^    array4_double pZZsn;$/;"	m	class:EMfields3D
EMfields3D::perfectConductorLeft	./fields/EMfields3D.cpp	/^void EMfields3D::perfectConductorLeft(arr3_double imageX, arr3_double imageY, arr3_double imageZ,$/;"	f	class:EMfields3D
EMfields3D::perfectConductorLeftS	./fields/EMfields3D.cpp	/^void EMfields3D::perfectConductorLeftS(arr3_double vectorX, arr3_double vectorY, arr3_double vectorZ, int dir) {$/;"	f	class:EMfields3D
EMfields3D::perfectConductorRight	./fields/EMfields3D.cpp	/^void EMfields3D::perfectConductorRight($/;"	f	class:EMfields3D
EMfields3D::perfectConductorRightS	./fields/EMfields3D.cpp	/^void EMfields3D::perfectConductorRightS(arr3_double vectorX, arr3_double vectorY, arr3_double vectorZ, int dir) {$/;"	f	class:EMfields3D
EMfields3D::print	./fields/EMfields3D.cpp	/^void EMfields3D::print(void) const {$/;"	f	class:EMfields3D
EMfields3D::qom	./include/EMfields3D.h	/^    double *qom;$/;"	m	class:EMfields3D
EMfields3D::restart1	./include/EMfields3D.h	/^    int restart1;$/;"	m	class:EMfields3D
EMfields3D::rhoINIT	./include/EMfields3D.h	/^    double *rhoINIT;$/;"	m	class:EMfields3D
EMfields3D::rhoc	./include/EMfields3D.h	/^    array3_double rhoc;$/;"	m	class:EMfields3D
EMfields3D::rhocs	./include/EMfields3D.h	/^    array4_double rhocs;$/;"	m	class:EMfields3D
EMfields3D::rhoh	./include/EMfields3D.h	/^    array3_double rhoh;$/;"	m	class:EMfields3D
EMfields3D::rhon	./include/EMfields3D.h	/^    array3_double rhon;$/;"	m	class:EMfields3D
EMfields3D::rhons	./include/EMfields3D.h	/^    array4_double rhons;$/;"	m	class:EMfields3D
EMfields3D::setZeroDensities	./fields/EMfields3D.cpp	/^void EMfields3D::setZeroDensities() {$/;"	f	class:EMfields3D
EMfields3D::setZeroDerivedMoments	./fields/EMfields3D.cpp	/^void EMfields3D::setZeroDerivedMoments()$/;"	f	class:EMfields3D
EMfields3D::setZeroPrimaryMoments	./fields/EMfields3D.cpp	/^void EMfields3D::setZeroPrimaryMoments() {$/;"	f	class:EMfields3D
EMfields3D::set_fieldForPcls	./fields/EMfields3D.cpp	/^void EMfields3D::set_fieldForPcls()$/;"	f	class:EMfields3D
EMfields3D::sizeMomentsArray	./include/EMfields3D.h	/^    int sizeMomentsArray;$/;"	m	class:EMfields3D
EMfields3D::smooth	./fields/EMfields3D.cpp	/^void EMfields3D::smooth(double value, arr3_double vector, int type, Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
EMfields3D::smooth	./fields/EMfields3D.cpp	/^void EMfields3D::smooth(double value, arr4_double vector, int is, int type, Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
EMfields3D::smoothE	./fields/EMfields3D.cpp	/^void EMfields3D::smoothE(double value, VirtualTopology3D * vct, Collective *col) {$/;"	f	class:EMfields3D
EMfields3D::sumMoments	./fields/EMfields3D.cpp	/^void EMfields3D::sumMoments(const Particles3Dcomm* part, Grid * grid, VirtualTopology3D * vct)$/;"	f	class:EMfields3D
EMfields3D::sumMomentsOld	./fields/EMfields3D.cpp	/^void EMfields3D::sumMomentsOld(const Particles3Dcomm& pcls, Grid * grid, VirtualTopology3D * vct)$/;"	f	class:EMfields3D
EMfields3D::sumMoments_AoS	./fields/EMfields3D.cpp	/^void EMfields3D::sumMoments_AoS($/;"	f	class:EMfields3D
EMfields3D::sumMoments_vectorized	./fields/EMfields3D.cpp	/^void EMfields3D::sumMoments_vectorized($/;"	f	class:EMfields3D
EMfields3D::sumOverSpecies	./fields/EMfields3D.cpp	/^void EMfields3D::sumOverSpecies(VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
EMfields3D::sumOverSpeciesJ	./fields/EMfields3D.cpp	/^void EMfields3D::sumOverSpeciesJ() {$/;"	f	class:EMfields3D
EMfields3D::sustensorLeftX	./fields/EMfields3D.cpp	/^void EMfields3D::sustensorLeftX(double **susxx, double **susyx, double **suszx) {$/;"	f	class:EMfields3D
EMfields3D::sustensorLeftY	./fields/EMfields3D.cpp	/^void EMfields3D::sustensorLeftY(double **susxy, double **susyy, double **suszy) {$/;"	f	class:EMfields3D
EMfields3D::sustensorLeftZ	./fields/EMfields3D.cpp	/^void EMfields3D::sustensorLeftZ(double **susxz, double **susyz, double **suszz) {$/;"	f	class:EMfields3D
EMfields3D::sustensorRightX	./fields/EMfields3D.cpp	/^void EMfields3D::sustensorRightX(double **susxx, double **susyx, double **suszx) {$/;"	f	class:EMfields3D
EMfields3D::sustensorRightY	./fields/EMfields3D.cpp	/^void EMfields3D::sustensorRightY(double **susxy, double **susyy, double **suszy) {$/;"	f	class:EMfields3D
EMfields3D::sustensorRightZ	./fields/EMfields3D.cpp	/^void EMfields3D::sustensorRightZ(double **susxz, double **susyz, double **suszz) {$/;"	f	class:EMfields3D
EMfields3D::temp2X	./include/EMfields3D.h	/^    array3_double temp2X;$/;"	m	class:EMfields3D
EMfields3D::temp2Y	./include/EMfields3D.h	/^    array3_double temp2Y;$/;"	m	class:EMfields3D
EMfields3D::temp2Z	./include/EMfields3D.h	/^    array3_double temp2Z;$/;"	m	class:EMfields3D
EMfields3D::tempC	./include/EMfields3D.h	/^    array3_double tempC;$/;"	m	class:EMfields3D
EMfields3D::tempX	./include/EMfields3D.h	/^    array3_double tempX;$/;"	m	class:EMfields3D
EMfields3D::tempXC	./include/EMfields3D.h	/^    array3_double tempXC;$/;"	m	class:EMfields3D
EMfields3D::tempXN	./include/EMfields3D.h	/^    array3_double tempXN;$/;"	m	class:EMfields3D
EMfields3D::tempY	./include/EMfields3D.h	/^    array3_double tempY;$/;"	m	class:EMfields3D
EMfields3D::tempYC	./include/EMfields3D.h	/^    array3_double tempYC;$/;"	m	class:EMfields3D
EMfields3D::tempYN	./include/EMfields3D.h	/^    array3_double tempYN;$/;"	m	class:EMfields3D
EMfields3D::tempZ	./include/EMfields3D.h	/^    array3_double tempZ;$/;"	m	class:EMfields3D
EMfields3D::tempZC	./include/EMfields3D.h	/^    array3_double tempZC;$/;"	m	class:EMfields3D
EMfields3D::tempZN	./include/EMfields3D.h	/^    array3_double tempZN;$/;"	m	class:EMfields3D
EMfields3D::th	./include/EMfields3D.h	/^    double th;$/;"	m	class:EMfields3D
EMfields3D::ue0	./include/EMfields3D.h	/^    double ue0, ve0, we0;$/;"	m	class:EMfields3D
EMfields3D::updateInfoFields	./fields/EMfields3D.cpp	/^void EMfields3D::updateInfoFields(Grid *grid,VirtualTopology3D *vct,Collective *col){$/;"	f	class:EMfields3D
EMfields3D::ve0	./include/EMfields3D.h	/^    double ue0, ve0, we0;$/;"	m	class:EMfields3D
EMfields3D::vectX	./include/EMfields3D.h	/^    array3_double vectX;$/;"	m	class:EMfields3D
EMfields3D::vectY	./include/EMfields3D.h	/^    array3_double vectY;$/;"	m	class:EMfields3D
EMfields3D::vectZ	./include/EMfields3D.h	/^    array3_double vectZ;$/;"	m	class:EMfields3D
EMfields3D::we0	./include/EMfields3D.h	/^    double ue0, ve0, we0;$/;"	m	class:EMfields3D
EMfields3D::xEnd	./include/EMfields3D.h	/^    double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:EMfields3D
EMfields3D::xStart	./include/EMfields3D.h	/^    double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:EMfields3D
EMfields3D::x_center	./include/EMfields3D.h	/^    double x_center;$/;"	m	class:EMfields3D
EMfields3D::yEnd	./include/EMfields3D.h	/^    double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:EMfields3D
EMfields3D::yStart	./include/EMfields3D.h	/^    double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:EMfields3D
EMfields3D::y_center	./include/EMfields3D.h	/^    double y_center;$/;"	m	class:EMfields3D
EMfields3D::zEnd	./include/EMfields3D.h	/^    double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:EMfields3D
EMfields3D::zStart	./include/EMfields3D.h	/^    double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:EMfields3D
EMfields3D::z_center	./include/EMfields3D.h	/^    double z_center;$/;"	m	class:EMfields3D
EMfields3D::~EMfields3D	./fields/EMfields3D.cpp	/^EMfields3D::~EMfields3D() {$/;"	f	class:EMfields3D
EMfields3D_H	./include/EMfields3D.h	4;"	d
Eenergy	./include/iPic3D.h	/^    double Eenergy;$/;"	m	class:iPic3D::c_Solver
EllipticE	./include/EllipticF.h	20;"	d
EllipticF	./include/EllipticF.h	18;"	d
EllipticF.cpp	./mathlib/EllipticF.cpp	1;"	F
EllipticF.h	./include/EllipticF.h	1;"	F
Ex	./include/EMfields3D.h	/^    array3_double Ex;$/;"	m	class:EMfields3D
ExITemp	./include/BCStructure.h	/^  double ***ExITemp;$/;"	m	struct:injInfoFields
Exception	./include/PSKException.h	/^      Exception(const Exception & e):_can_recover(e._can_recover), _err_str(e._err_str), _fn_str(e._fn_str), _type_str(e._type_str), _err_msgs(e._err_msgs), _sys_errno(e._sys_errno), _sys_err_str(e._sys_err_str) {;$/;"	f	class:PSK::Exception
Exception	./include/PSKException.h	/^      Exception(void):_type_str("PSK::Exception") {;$/;"	f	class:PSK::Exception
Exception	./include/PSKException.h	/^      } Exception(const char *c_err_str, const char *c_fn_str = "", int sys_errno = 0)$/;"	f	class:PSK::Exception
Exception	./include/PSKException.h	/^      } Exception(const std::string & err_str, const std::string fn_str = "", int sys_errno = 0)$/;"	f	class:PSK::Exception
Exception	./include/PSKException.h	/^  class Exception {$/;"	c	namespace:PSK
Exth	./include/EMfields3D.h	/^    array3_double Exth;$/;"	m	class:EMfields3D
Ey	./include/EMfields3D.h	/^    array3_double Ey;$/;"	m	class:EMfields3D
EyITemp	./include/BCStructure.h	/^  double ***EyITemp;$/;"	m	struct:injInfoFields
Eyth	./include/EMfields3D.h	/^    array3_double Eyth;$/;"	m	class:EMfields3D
Ez	./include/EMfields3D.h	/^    array3_double Ez;$/;"	m	class:EMfields3D
EzITemp	./include/BCStructure.h	/^  double ***EzITemp;$/;"	m	struct:injInfoFields
Ezth	./include/EMfields3D.h	/^    array3_double Ezth;$/;"	m	class:EMfields3D
FIELDS	./include/TimeTasks.h	/^    FIELDS,$/;"	e	enum:TimeTasks::Tasks
FIELD_IMAGE	./include/CG.h	/^typedef void (Field::*FIELD_IMAGE) (double *, double *, Grid *, VirtualTopology3D *);$/;"	t
FIELD_IMAGE	./include/GMRES.h	/^typedef void (EMfields3D::*FIELD_IMAGE) (double *, double *, Grid *, VirtualTopology3D *);$/;"	t
FastE	./mathlib/EllipticF.cpp	155;"	d	file:
Field	./include/CG.h	/^typedef EMfields3D Field;$/;"	t
Field	./include/EMfields3D.h	/^typedef EMfields3D Field;$/;"	t
Field.h	./include/Field.h	1;"	F
FieldOutputCycle	./include/Collective.h	/^    int FieldOutputCycle;$/;"	m	class:Collective
Field_H	./include/Field.h	8;"	d
FilenameRoot	./include/InterfaceFluid.h	/^  string FilenameRoot;$/;"	m	class:InterfaceFluid
Finalize	./main/iPic3Dlib.cpp	/^void c_Solver::Finalize() {$/;"	f	class:c_Solver
FirstCycle	./include/iPic3D.h	/^  inline int c_Solver::FirstCycle() {$/;"	f	class:iPic3D::c_Solver
FixedArray1D	./include/arrays.h	/^class FixedArray1D$/;"	c
FixedArray1D::arr	./include/arrays.h	/^  type arr[s1];$/;"	m	class:FixedArray1D
FixedArray1D::fetch	./include/arrays.h	/^  type& fetch(size_t n1)$/;"	f	class:FixedArray1D
FixedArray1D::operator []	./include/arrays.h	/^  type& operator[](size_t n1)$/;"	f	class:FixedArray1D
FixedArray2D	./include/arrays.h	/^class FixedArray2D$/;"	c
FixedArray2D1	./include/arrays.h	/^class FixedArray2D1$/;"	c
FixedArray2D1::arr	./include/arrays.h	/^  type (&arr)[s1][s2];$/;"	m	class:FixedArray2D1
FixedArray2D1::n1	./include/arrays.h	/^    arr(_arr), n1(_n1) {};$/;"	f	class:FixedArray2D1
FixedArray2D1::n1	./include/arrays.h	/^  size_t n1;$/;"	m	class:FixedArray2D1
FixedArray2D1::operator []	./include/arrays.h	/^  type& operator[](size_t n2)$/;"	f	class:FixedArray2D1
FixedArray2D1::type	./include/arrays.h	/^  FixedArray2D1(type (&_arr)[s1][s2], size_t _n1) :$/;"	m	class:FixedArray2D1
FixedArray2D::arr	./include/arrays.h	/^  type arr [s1][s2];$/;"	m	class:FixedArray2D
FixedArray2D::fetch	./include/arrays.h	/^  type& fetch(size_t n1, size_t n2)$/;"	f	class:FixedArray2D
FixedArray2D::operator []	./include/arrays.h	/^  FixedArray2D1<type,s1,s2> operator[](size_t n1)$/;"	f	class:FixedArray2D
FixedArray3D	./include/arrays.h	/^struct FixedArray3D$/;"	s
FixedArray3D1	./include/arrays.h	/^class FixedArray3D1$/;"	c
FixedArray3D1::_n1	./include/arrays.h	/^  FixedArray3D1(type (&_arr)[s1][s2][s3], size_t _n1, size_t _n2) :$/;"	m	class:FixedArray3D1
FixedArray3D1::arr	./include/arrays.h	/^  type (&arr)[s1][s2][s3];$/;"	m	class:FixedArray3D1
FixedArray3D1::n1	./include/arrays.h	/^  size_t n1, n2;$/;"	m	class:FixedArray3D1
FixedArray3D1::n2	./include/arrays.h	/^    arr(_arr), n1(_n1), n2(_n2) {};$/;"	f	class:FixedArray3D1
FixedArray3D1::n2	./include/arrays.h	/^  size_t n1, n2;$/;"	m	class:FixedArray3D1
FixedArray3D1::operator []	./include/arrays.h	/^  type& operator[](size_t n3)$/;"	f	class:FixedArray3D1
FixedArray3D1::type	./include/arrays.h	/^  FixedArray3D1(type (&_arr)[s1][s2][s3], size_t _n1, size_t _n2) :$/;"	m	class:FixedArray3D1
FixedArray3D2	./include/arrays.h	/^class FixedArray3D2$/;"	c
FixedArray3D2::arr	./include/arrays.h	/^  type (&arr)[s1][s2][s3];$/;"	m	class:FixedArray3D2
FixedArray3D2::n1	./include/arrays.h	/^  FixedArray3D2(type (&_arr)[s1][s2][s3], size_t _n1) : arr(_arr), n1(_n1) {};$/;"	f	class:FixedArray3D2
FixedArray3D2::n1	./include/arrays.h	/^  size_t n1;$/;"	m	class:FixedArray3D2
FixedArray3D2::operator []	./include/arrays.h	/^  FixedArray3D1<type,s1,s2,s3> operator[](size_t n2)$/;"	f	class:FixedArray3D2
FixedArray3D2::type	./include/arrays.h	/^  FixedArray3D2(type (&_arr)[s1][s2][s3], size_t _n1) : arr(_arr), n1(_n1) {};$/;"	m	class:FixedArray3D2
FixedArray3D::arr	./include/arrays.h	/^  type arr [s1][s2][s3];$/;"	m	struct:FixedArray3D
FixedArray3D::fetch	./include/arrays.h	/^  type& fetch(size_t n1, size_t n2, size_t n3)$/;"	f	struct:FixedArray3D
FixedArray3D::operator []	./include/arrays.h	/^  FixedArray3D2<type,s1,s2,s3> operator[](size_t n1)$/;"	f	struct:FixedArray3D
FixedArray4D	./include/arrays.h	/^class FixedArray4D$/;"	c
FixedArray4D1	./include/arrays.h	/^class FixedArray4D1$/;"	c
FixedArray4D1::_n1	./include/arrays.h	/^  FixedArray4D1(type(&_arr)[s1][s2][s3][s4],size_t _n1,size_t _n2,size_t _n3):$/;"	m	class:FixedArray4D1
FixedArray4D1::_n2	./include/arrays.h	/^  FixedArray4D1(type(&_arr)[s1][s2][s3][s4],size_t _n1,size_t _n2,size_t _n3):$/;"	m	class:FixedArray4D1
FixedArray4D1::arr	./include/arrays.h	/^  type (&arr)[s1][s2][s3][s4];$/;"	m	class:FixedArray4D1
FixedArray4D1::n1	./include/arrays.h	/^  size_t n1,n2,n3;$/;"	m	class:FixedArray4D1
FixedArray4D1::n2	./include/arrays.h	/^  size_t n1,n2,n3;$/;"	m	class:FixedArray4D1
FixedArray4D1::n3	./include/arrays.h	/^    arr(_arr), n1(_n1), n2(_n2), n3(_n3){};$/;"	f	class:FixedArray4D1
FixedArray4D1::n3	./include/arrays.h	/^  size_t n1,n2,n3;$/;"	m	class:FixedArray4D1
FixedArray4D1::operator []	./include/arrays.h	/^  type& operator[](size_t n4) { return arr[n1][n2][n3][n4]; }$/;"	f	class:FixedArray4D1
FixedArray4D1::type	./include/arrays.h	/^  FixedArray4D1(type(&_arr)[s1][s2][s3][s4],size_t _n1,size_t _n2,size_t _n3):$/;"	m	class:FixedArray4D1
FixedArray4D2	./include/arrays.h	/^class FixedArray4D2$/;"	c
FixedArray4D2::_n1	./include/arrays.h	/^  FixedArray4D2(type (&_arr)[s1][s2][s3][s4], size_t _n1, size_t _n2) :$/;"	m	class:FixedArray4D2
FixedArray4D2::arr	./include/arrays.h	/^  type (&arr)[s1][s2][s3][s4];$/;"	m	class:FixedArray4D2
FixedArray4D2::n1	./include/arrays.h	/^  size_t n1,n2;$/;"	m	class:FixedArray4D2
FixedArray4D2::n2	./include/arrays.h	/^    arr(_arr), n1(_n1), n2(_n2){};$/;"	f	class:FixedArray4D2
FixedArray4D2::n2	./include/arrays.h	/^  size_t n1,n2;$/;"	m	class:FixedArray4D2
FixedArray4D2::operator []	./include/arrays.h	/^  FixedArray4D1<type,s1,s2,s3,s4> operator[](size_t n3)$/;"	f	class:FixedArray4D2
FixedArray4D2::type	./include/arrays.h	/^  FixedArray4D2(type (&_arr)[s1][s2][s3][s4], size_t _n1, size_t _n2) :$/;"	m	class:FixedArray4D2
FixedArray4D3	./include/arrays.h	/^class FixedArray4D3$/;"	c
FixedArray4D3::arr	./include/arrays.h	/^  type (&arr)[s1][s2][s3][s4];$/;"	m	class:FixedArray4D3
FixedArray4D3::n1	./include/arrays.h	/^    arr(_arr), n1(_n1) {};$/;"	f	class:FixedArray4D3
FixedArray4D3::n1	./include/arrays.h	/^  size_t n1;$/;"	m	class:FixedArray4D3
FixedArray4D3::operator []	./include/arrays.h	/^  FixedArray4D2<type,s1,s2,s3,s4> operator[](size_t n2)$/;"	f	class:FixedArray4D3
FixedArray4D3::type	./include/arrays.h	/^  FixedArray4D3(type (&_arr)[s1][s2][s3][s4], size_t _n1) :$/;"	m	class:FixedArray4D3
FixedArray4D::arr	./include/arrays.h	/^  type arr [s1][s2][s3][s4];$/;"	m	class:FixedArray4D
FixedArray4D::fetch	./include/arrays.h	/^  type& fetch(size_t n1, size_t n2, size_t n3, size_t n4)$/;"	f	class:FixedArray4D
FixedArray4D::operator []	./include/arrays.h	/^  FixedArray4D3<type,s1,s2,s3,s4> operator[](size_t n1)$/;"	f	class:FixedArray4D
FluidModel	./include/InterfaceFluid.h	/^  string FluidModel;  \/\/ Type of fluid model$/;"	m	class:InterfaceFluid
FourPI	./include/EMfields3D.h	/^    double FourPI;$/;"	m	class:EMfields3D
GENERIC_IMAGE	./include/CG.h	/^typedef void (*GENERIC_IMAGE) (double *, double *, Grid *, VirtualTopology3D *);$/;"	t
GENERIC_IMAGE	./include/GMRES.h	/^typedef void (*GENERIC_IMAGE) (double *, double *, Grid *, VirtualTopology3D *);$/;"	t
GMRES	./solvers/GMRES.cpp	/^void GMRES(FIELD_IMAGE FunctionImage, double *xkrylov, int xkrylovlen, double *b, int m, int max_iter, double tol, Grid * grid, VirtualTopology3D * vct, Field * field) {$/;"	f
GMRES.cpp	./solvers/GMRES.cpp	1;"	F
GMRES.h	./include/GMRES.h	1;"	F
GMRES_new2_H	./include/GMRES.h	2;"	d
GMREStol	./include/Collective.h	/^    double GMREStol;$/;"	m	class:Collective
GMREStol	./include/EMfields3D.h	/^    double GMREStol;$/;"	m	class:EMfields3D
GRID3DCU_H	./include/Grid3DCU.h	8;"	d
Grid	./include/Grid3DCU.h	/^typedef Grid3DCU Grid;$/;"	t
Grid.h	./include/Grid.h	1;"	F
Grid3DCU	./grids/Grid3DCU.cpp	/^Grid3DCU::Grid3DCU(CollectiveIO * col, VirtualTopology3D * vct) {$/;"	f	class:Grid3DCU
Grid3DCU	./include/Grid3DCU.h	/^class Grid3DCU                  \/\/ :public Grid$/;"	c
Grid3DCU.cpp	./grids/Grid3DCU.cpp	1;"	F
Grid3DCU.h	./include/Grid3DCU.h	1;"	F
Grid3DCU::Grid3DCU	./grids/Grid3DCU.cpp	/^Grid3DCU::Grid3DCU(CollectiveIO * col, VirtualTopology3D * vct) {$/;"	f	class:Grid3DCU
Grid3DCU::calcXN	./include/Grid3DCU.h	/^  double calcXN(int X)const{ return xStart+(X-1)*dx;}$/;"	f	class:Grid3DCU
Grid3DCU::calcYN	./include/Grid3DCU.h	/^  double calcYN(int Y)const{ return yStart+(Y-1)*dy;}$/;"	f	class:Grid3DCU
Grid3DCU::calcZN	./include/Grid3DCU.h	/^  double calcZN(int Z)const{ return zStart+(Z-1)*dz;}$/;"	f	class:Grid3DCU
Grid3DCU::center_xcoord	./include/Grid3DCU.h	/^  double *center_xcoord;$/;"	m	class:Grid3DCU
Grid3DCU::center_ycoord	./include/Grid3DCU.h	/^  double *center_ycoord;$/;"	m	class:Grid3DCU
Grid3DCU::center_zcoord	./include/Grid3DCU.h	/^  double *center_zcoord;$/;"	m	class:Grid3DCU
Grid3DCU::curlC2N	./grids/Grid3DCU.cpp	/^void Grid3DCU::curlC2N(arr3_double curlXN, arr3_double curlYN, arr3_double curlZN, const_arr3_double vecFieldXC, const_arr3_double vecFieldYC, const_arr3_double vecFieldZC) {$/;"	f	class:Grid3DCU
Grid3DCU::curlN2C	./grids/Grid3DCU.cpp	/^void Grid3DCU::curlN2C(arr3_double curlXC, arr3_double curlYC, arr3_double curlZC,$/;"	f	class:Grid3DCU
Grid3DCU::derBC	./grids/Grid3DCU.cpp	/^void Grid3DCU::derBC(arr3_double derBC, const_arr3_double vector, int leftActiveNode, int dirDER) {$/;"	f	class:Grid3DCU
Grid3DCU::divBCleft	./grids/Grid3DCU.cpp	/^void Grid3DCU::divBCleft(arr3_double divBC, const_arr3_double vectorX, const_arr3_double vectorY, const_arr3_double vectorZ, int leftActiveNode, int dirDER) {$/;"	f	class:Grid3DCU
Grid3DCU::divBCright	./grids/Grid3DCU.cpp	/^void Grid3DCU::divBCright(arr3_double divBC, const_arr3_double vectorX, const_arr3_double vectorY, const_arr3_double vectorZ, int rightActiveNode, int dirDER) {$/;"	f	class:Grid3DCU
Grid3DCU::divC2N	./grids/Grid3DCU.cpp	/^void Grid3DCU::divC2N(arr3_double divN, const_arr3_double vecFieldXC, const_arr3_double vecFieldYC, const_arr3_double vecFieldZC) {$/;"	f	class:Grid3DCU
Grid3DCU::divN2C	./grids/Grid3DCU.cpp	/^void Grid3DCU::divN2C(arr3_double divC, const_arr3_double vecFieldXN, const_arr3_double vecFieldYN, const_arr3_double vecFieldZN) {$/;"	f	class:Grid3DCU
Grid3DCU::divSymmTensorN2C	./grids/Grid3DCU.cpp	/^void Grid3DCU::divSymmTensorN2C(arr3_double divCX, arr3_double divCY, arr3_double divCZ, const_arr4_double pXX, const_arr4_double pXY, const_arr4_double pXZ, const_arr4_double pYY, const_arr4_double pYZ, const_arr4_double pZZ, int ns) {$/;"	f	class:Grid3DCU
Grid3DCU::dx	./include/Grid3DCU.h	/^  double dx;$/;"	m	class:Grid3DCU
Grid3DCU::dy	./include/Grid3DCU.h	/^  double dy;$/;"	m	class:Grid3DCU
Grid3DCU::dz	./include/Grid3DCU.h	/^  double dz;$/;"	m	class:Grid3DCU
Grid3DCU::getDX	./include/Grid3DCU.h	/^  double getDX() { return (dx); }$/;"	f	class:Grid3DCU
Grid3DCU::getDY	./include/Grid3DCU.h	/^  double getDY() { return (dy); }$/;"	f	class:Grid3DCU
Grid3DCU::getDZ	./include/Grid3DCU.h	/^  double getDZ() { return (dz); }$/;"	f	class:Grid3DCU
Grid3DCU::getInvVOL	./include/Grid3DCU.h	/^  double getInvVOL() { return (invVOL); }$/;"	f	class:Grid3DCU
Grid3DCU::getNXC	./include/Grid3DCU.h	/^  int getNXC() { return (nxc); }$/;"	f	class:Grid3DCU
Grid3DCU::getNXN	./include/Grid3DCU.h	/^  int getNXN() { return (nxn); }$/;"	f	class:Grid3DCU
Grid3DCU::getNYC	./include/Grid3DCU.h	/^  int getNYC() { return (nyc); }$/;"	f	class:Grid3DCU
Grid3DCU::getNYN	./include/Grid3DCU.h	/^  int getNYN() { return (nyn); }$/;"	f	class:Grid3DCU
Grid3DCU::getNZC	./include/Grid3DCU.h	/^  int getNZC() { return (nzc); }$/;"	f	class:Grid3DCU
Grid3DCU::getNZN	./include/Grid3DCU.h	/^  int getNZN() { return (nzn); }$/;"	f	class:Grid3DCU
Grid3DCU::getXC	./include/Grid3DCU.h	/^  const double &getXC(int X)const{ return center_xcoord[X];}$/;"	f	class:Grid3DCU
Grid3DCU::getXC	./include/Grid3DCU.h	/^  const double &getXC(int X, int Y, int Z) { return center_xcoord[X];}$/;"	f	class:Grid3DCU
Grid3DCU::getXN	./include/Grid3DCU.h	/^  const double &getXN(int X)const{ return node_xcoord[X];}$/;"	f	class:Grid3DCU
Grid3DCU::getXN	./include/Grid3DCU.h	/^  const double &getXN(int X, int Y, int Z) { return node_xcoord[X];}$/;"	f	class:Grid3DCU
Grid3DCU::getXend	./include/Grid3DCU.h	/^  double getXend() { return (xEnd); }$/;"	f	class:Grid3DCU
Grid3DCU::getXstart	./include/Grid3DCU.h	/^  double getXstart() { return (xStart); }$/;"	f	class:Grid3DCU
Grid3DCU::getYC	./include/Grid3DCU.h	/^  const double &getYC(int X, int Y, int Z) { return center_ycoord[Y];}$/;"	f	class:Grid3DCU
Grid3DCU::getYC	./include/Grid3DCU.h	/^  const double &getYC(int Y)const{ return center_ycoord[Y];}$/;"	f	class:Grid3DCU
Grid3DCU::getYN	./include/Grid3DCU.h	/^  const double &getYN(int X, int Y, int Z) { return node_ycoord[Y];}$/;"	f	class:Grid3DCU
Grid3DCU::getYN	./include/Grid3DCU.h	/^  const double &getYN(int Y)const{ return node_ycoord[Y];}$/;"	f	class:Grid3DCU
Grid3DCU::getYend	./include/Grid3DCU.h	/^  double getYend() { return (yEnd); } $/;"	f	class:Grid3DCU
Grid3DCU::getYstart	./include/Grid3DCU.h	/^  double getYstart() { return (yStart); }$/;"	f	class:Grid3DCU
Grid3DCU::getZC	./include/Grid3DCU.h	/^  const double &getZC(int X, int Y, int Z) { return center_zcoord[Z];}$/;"	f	class:Grid3DCU
Grid3DCU::getZC	./include/Grid3DCU.h	/^  const double &getZC(int Z)const{ return center_zcoord[Z];}$/;"	f	class:Grid3DCU
Grid3DCU::getZN	./include/Grid3DCU.h	/^  const double &getZN(int X, int Y, int Z) { return node_zcoord[Z];}$/;"	f	class:Grid3DCU
Grid3DCU::getZN	./include/Grid3DCU.h	/^  const double &getZN(int Z)const{ return node_zcoord[Z];}$/;"	f	class:Grid3DCU
Grid3DCU::getZend	./include/Grid3DCU.h	/^  double getZend() { return (zEnd); }$/;"	f	class:Grid3DCU
Grid3DCU::getZstart	./include/Grid3DCU.h	/^  double getZstart() { return (zStart); }$/;"	f	class:Grid3DCU
Grid3DCU::get_invdx	./include/Grid3DCU.h	/^  double get_invdx() { return (invdx); }$/;"	f	class:Grid3DCU
Grid3DCU::get_invdy	./include/Grid3DCU.h	/^  double get_invdy() { return (invdy); }$/;"	f	class:Grid3DCU
Grid3DCU::get_invdz	./include/Grid3DCU.h	/^  double get_invdz() { return (invdz); }$/;"	f	class:Grid3DCU
Grid3DCU::get_pfloat_XN	./include/Grid3DCU.h	/^  const pfloat &get_pfloat_XN(int X)const{ return pfloat_node_xcoord[X];}$/;"	f	class:Grid3DCU
Grid3DCU::get_pfloat_YN	./include/Grid3DCU.h	/^  const pfloat &get_pfloat_YN(int Y)const{ return pfloat_node_ycoord[Y];}$/;"	f	class:Grid3DCU
Grid3DCU::get_pfloat_ZN	./include/Grid3DCU.h	/^  const pfloat &get_pfloat_ZN(int Z)const{ return pfloat_node_zcoord[Z];}$/;"	f	class:Grid3DCU
Grid3DCU::gradC2N	./grids/Grid3DCU.cpp	/^void Grid3DCU::gradC2N(arr3_double gradXN, arr3_double gradYN, arr3_double gradZN, const_arr3_double scFieldC) {$/;"	f	class:Grid3DCU
Grid3DCU::gradN2C	./grids/Grid3DCU.cpp	/^void Grid3DCU::gradN2C(arr3_double gradXC, arr3_double gradYC, arr3_double gradZC, const_arr3_double scFieldN) {$/;"	f	class:Grid3DCU
Grid3DCU::interpC2N	./grids/Grid3DCU.cpp	/^void Grid3DCU::interpC2N(arr3_double vecFieldN, const_arr3_double vecFieldC) {$/;"	f	class:Grid3DCU
Grid3DCU::interpN2C	./grids/Grid3DCU.cpp	/^void Grid3DCU::interpN2C(arr3_double vecFieldC, const_arr3_double vecFieldN) {$/;"	f	class:Grid3DCU
Grid3DCU::interpN2C	./grids/Grid3DCU.cpp	/^void Grid3DCU::interpN2C(arr4_double vecFieldC, int ns, const_arr4_double vecFieldN) {$/;"	f	class:Grid3DCU
Grid3DCU::invVOL	./include/Grid3DCU.h	/^  double invVOL;$/;"	m	class:Grid3DCU
Grid3DCU::invdx	./include/Grid3DCU.h	/^  double invdx;$/;"	m	class:Grid3DCU
Grid3DCU::invdy	./include/Grid3DCU.h	/^  double invdy;$/;"	m	class:Grid3DCU
Grid3DCU::invdz	./include/Grid3DCU.h	/^  double invdz;$/;"	m	class:Grid3DCU
Grid3DCU::lapC2C	./grids/Grid3DCU.cpp	/^void Grid3DCU::lapC2C(arr3_double lapC, const_arr3_double scFieldC, VirtualTopology3D * vct) {$/;"	f	class:Grid3DCU
Grid3DCU::lapC2Cpoisson	./grids/Grid3DCU.cpp	/^void Grid3DCU::lapC2Cpoisson(arr3_double lapC, arr3_double scFieldC, VirtualTopology3D * vct) {$/;"	f	class:Grid3DCU
Grid3DCU::lapN2N	./grids/Grid3DCU.cpp	/^void Grid3DCU::lapN2N(arr3_double lapN, const_arr3_double scFieldN, VirtualTopology3D * vct) {$/;"	f	class:Grid3DCU
Grid3DCU::node_xcoord	./include/Grid3DCU.h	/^  double *node_xcoord;$/;"	m	class:Grid3DCU
Grid3DCU::node_ycoord	./include/Grid3DCU.h	/^  double *node_ycoord;$/;"	m	class:Grid3DCU
Grid3DCU::node_zcoord	./include/Grid3DCU.h	/^  double *node_zcoord;$/;"	m	class:Grid3DCU
Grid3DCU::nxc	./include/Grid3DCU.h	/^  int nxc;$/;"	m	class:Grid3DCU
Grid3DCU::nxn	./include/Grid3DCU.h	/^  int nxn;$/;"	m	class:Grid3DCU
Grid3DCU::nyc	./include/Grid3DCU.h	/^  int nyc;$/;"	m	class:Grid3DCU
Grid3DCU::nyn	./include/Grid3DCU.h	/^  int nyn;$/;"	m	class:Grid3DCU
Grid3DCU::nzc	./include/Grid3DCU.h	/^  int nzc;$/;"	m	class:Grid3DCU
Grid3DCU::nzn	./include/Grid3DCU.h	/^  int nzn;$/;"	m	class:Grid3DCU
Grid3DCU::pfloat_node_xcoord	./include/Grid3DCU.h	/^  pfloat *pfloat_node_xcoord;$/;"	m	class:Grid3DCU
Grid3DCU::pfloat_node_ycoord	./include/Grid3DCU.h	/^  pfloat *pfloat_node_ycoord;$/;"	m	class:Grid3DCU
Grid3DCU::pfloat_node_zcoord	./include/Grid3DCU.h	/^  pfloat *pfloat_node_zcoord;$/;"	m	class:Grid3DCU
Grid3DCU::print	./grids/Grid3DCU.cpp	/^void Grid3DCU::print(VirtualTopology3D * ptVCT) {$/;"	f	class:Grid3DCU
Grid3DCU::xEnd	./include/Grid3DCU.h	/^  double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:Grid3DCU
Grid3DCU::xStart	./include/Grid3DCU.h	/^  double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:Grid3DCU
Grid3DCU::yEnd	./include/Grid3DCU.h	/^  double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:Grid3DCU
Grid3DCU::yStart	./include/Grid3DCU.h	/^  double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:Grid3DCU
Grid3DCU::zEnd	./include/Grid3DCU.h	/^  double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:Grid3DCU
Grid3DCU::zStart	./include/Grid3DCU.h	/^  double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:Grid3DCU
Grid3DCU::~Grid3DCU	./grids/Grid3DCU.cpp	/^Grid3DCU::~Grid3DCU() {$/;"	f	class:Grid3DCU
Grid_H	./include/Grid.h	11;"	d
HDF5OutputAdaptor	./include/PSKhdf5adaptor.h	/^      HDF5OutputAdaptor(void) {;$/;"	f	class:PSK::HDF5OutputAdaptor
HDF5OutputAdaptor	./include/PSKhdf5adaptor.h	/^  class HDF5OutputAdaptor:public OutputAdaptor {$/;"	c	namespace:PSK
HDF5OutputAdaptor::close	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::close(void) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::get_dataset_context	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::get_dataset_context(const std::string & name, std::vector < hid_t > &hid_array, std::string & dataset_name) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::open	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::open(const std::string & name) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::open_append	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::open_append(const std::string & name) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::purify_object_name	./PSKOutput3D/PSKhdf5adaptor.cpp	/^std::string HDF5OutputAdaptor::purify_object_name(const std::string & objname) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::split_name	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::split_name(const std::string & name, std::vector < std::string > &elements) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & objname, const Dimens dimens, const float ***f_array) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & objname, const Dimens dimens, const int ***i_array) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & objname, const Dimens dimens, const int ns, const_arr3_double d_array) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & objname, const Dimens dimens, const int ns, const_arr4_double d_array) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & objname, const Dimens dimens, const_arr3_double d_array) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & objname, const Dimens dimens, double **d_array) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const double *d_array) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const float *f_array) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const int *i_array) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const long *i_array) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const std::vector < double >&d_array) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const std::vector < float >&f_array) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const std::vector < int >&i_array) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const std::vector < long >&i_array) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, double d_value) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, float f_value) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, int i_value) {$/;"	f	class:HDF5OutputAdaptor
HDF5OutputAdaptor::write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, long i_value) {$/;"	f	class:HDF5OutputAdaptor
HEX	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	292;"	d	file:
HEX	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	292;"	d	file:
HEX	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	292;"	d	file:
HEX	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	292;"	d	file:
HEX	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	292;"	d	file:
ID	./include/Particle.h	/^  long long ID; \/\/ 8 bytes$/;"	m	struct:CellParticle
ID	./include/Particle.h	/^  long long ID;$/;"	m	class:SpeciesParticle
INVarName_V	./include/InterfaceFluid.h	/^  string *INVarName_V;$/;"	m	class:InterfaceFluid
INgridDx_D	./include/InterfaceFluid.h	/^  double INtime,INxRange_I[6],INplotDx_D[3],INgridDx_D[3];$/;"	m	class:InterfaceFluid
INnEqpar	./include/InterfaceFluid.h	/^  int INnEqpar;     \/\/ number of equation parameters$/;"	m	class:InterfaceFluid
INnIJK_D	./include/InterfaceFluid.h	/^  int INnIJK_D[3];  \/\/ number of cells per block$/;"	m	class:InterfaceFluid
INnPlotvar	./include/InterfaceFluid.h	/^  int INnPlotvar;   \/\/ number of variables in the fluid file$/;"	m	class:InterfaceFluid
INnProc	./include/InterfaceFluid.h	/^  int INnProc;      \/\/ number of processors in the fluid code$/;"	m	class:InterfaceFluid
INnRoot_D	./include/InterfaceFluid.h	/^  int INnRoot_D[3]; \/\/ number of root blocks$/;"	m	class:InterfaceFluid
INnStep	./include/InterfaceFluid.h	/^  int INnStep;      \/\/ iteration number$/;"	m	class:InterfaceFluid
INplotDx_D	./include/InterfaceFluid.h	/^  double INtime,INxRange_I[6],INplotDx_D[3],INgridDx_D[3];$/;"	m	class:InterfaceFluid
INtime	./include/InterfaceFluid.h	/^  double INtime,INxRange_I[6],INplotDx_D[3],INgridDx_D[3];$/;"	m	class:InterfaceFluid
INxRange_I	./include/InterfaceFluid.h	/^  double INtime,INxRange_I[6],INplotDx_D[3],INgridDx_D[3];$/;"	m	class:InterfaceFluid
IPIC_ALLOC_H	./include/Alloc.h	2;"	d
IPIC_ARRAYS_H	./include/arrays.h	2;"	d
Init	./main/iPic3Dlib.cpp	/^int c_Solver::Init(int argc, char **argv) {$/;"	f	class:c_Solver
InitDataStorage	./include/InterfaceFluid.h	/^  void InitDataStorage()$/;"	f	class:InterfaceFluid
InitFluid	./include/InterfaceFluid.h	/^  void InitFluid()$/;"	f	class:InterfaceFluid
InterfaceFluid	./include/InterfaceFluid.h	/^  InterfaceFluid(){$/;"	f	class:InterfaceFluid
InterfaceFluid	./include/InterfaceFluid.h	/^class InterfaceFluid$/;"	c
InterfaceFluid.h	./include/InterfaceFluid.h	1;"	F
InterfaceFluid::FilenameRoot	./include/InterfaceFluid.h	/^  string FilenameRoot;$/;"	m	class:InterfaceFluid
InterfaceFluid::FluidModel	./include/InterfaceFluid.h	/^  string FluidModel;  \/\/ Type of fluid model$/;"	m	class:InterfaceFluid
InterfaceFluid::INVarName_V	./include/InterfaceFluid.h	/^  string *INVarName_V;$/;"	m	class:InterfaceFluid
InterfaceFluid::INgridDx_D	./include/InterfaceFluid.h	/^  double INtime,INxRange_I[6],INplotDx_D[3],INgridDx_D[3];$/;"	m	class:InterfaceFluid
InterfaceFluid::INnEqpar	./include/InterfaceFluid.h	/^  int INnEqpar;     \/\/ number of equation parameters$/;"	m	class:InterfaceFluid
InterfaceFluid::INnIJK_D	./include/InterfaceFluid.h	/^  int INnIJK_D[3];  \/\/ number of cells per block$/;"	m	class:InterfaceFluid
InterfaceFluid::INnPlotvar	./include/InterfaceFluid.h	/^  int INnPlotvar;   \/\/ number of variables in the fluid file$/;"	m	class:InterfaceFluid
InterfaceFluid::INnProc	./include/InterfaceFluid.h	/^  int INnProc;      \/\/ number of processors in the fluid code$/;"	m	class:InterfaceFluid
InterfaceFluid::INnRoot_D	./include/InterfaceFluid.h	/^  int INnRoot_D[3]; \/\/ number of root blocks$/;"	m	class:InterfaceFluid
InterfaceFluid::INnStep	./include/InterfaceFluid.h	/^  int INnStep;      \/\/ iteration number$/;"	m	class:InterfaceFluid
InterfaceFluid::INplotDx_D	./include/InterfaceFluid.h	/^  double INtime,INxRange_I[6],INplotDx_D[3],INgridDx_D[3];$/;"	m	class:InterfaceFluid
InterfaceFluid::INtime	./include/InterfaceFluid.h	/^  double INtime,INxRange_I[6],INplotDx_D[3],INgridDx_D[3];$/;"	m	class:InterfaceFluid
InterfaceFluid::INxRange_I	./include/InterfaceFluid.h	/^  double INtime,INxRange_I[6],INplotDx_D[3],INgridDx_D[3];$/;"	m	class:InterfaceFluid
InterfaceFluid::InitDataStorage	./include/InterfaceFluid.h	/^  void InitDataStorage()$/;"	f	class:InterfaceFluid
InterfaceFluid::InitFluid	./include/InterfaceFluid.h	/^  void InitFluid()$/;"	f	class:InterfaceFluid
InterfaceFluid::InterfaceFluid	./include/InterfaceFluid.h	/^  InterfaceFluid(){$/;"	f	class:InterfaceFluid
InterfaceFluid::NG	./include/InterfaceFluid.h	/^  static const int NG = 1;$/;"	m	class:InterfaceFluid
InterfaceFluid::PrintStateVar	./include/InterfaceFluid.h	/^  void PrintStateVar()$/;"	f	class:InterfaceFluid
InterfaceFluid::ReadIdlAscii	./include/InterfaceFluid.h	/^  void ReadIdlAscii()$/;"	f	class:InterfaceFluid
InterfaceFluid::ReadVariables	./include/InterfaceFluid.h	/^  void ReadVariables()$/;"	f	class:InterfaceFluid
InterfaceFluid::StartIdx_D	./include/InterfaceFluid.h	/^  int StartIdx_D[3];  \/\/ storage for starting grid indexes of this processor$/;"	m	class:InterfaceFluid
InterfaceFluid::State_GV	./include/InterfaceFluid.h	/^  double ****State_GV; \/\/ cell centered state variables$/;"	m	class:InterfaceFluid
InterfaceFluid::TempString	./include/InterfaceFluid.h	/^  string TempString;$/;"	m	class:InterfaceFluid
InterfaceFluid::XYZ_D	./include/InterfaceFluid.h	/^  double XYZ_D[3];  \/\/ physical size of the passed domain$/;"	m	class:InterfaceFluid
InterfaceFluid::getFluidLx	./include/InterfaceFluid.h	/^  inline double getFluidLx(){ return(XYZ_D[0]); };$/;"	f	class:InterfaceFluid
InterfaceFluid::getFluidLy	./include/InterfaceFluid.h	/^  inline double getFluidLy(){ return(XYZ_D[1]); };$/;"	f	class:InterfaceFluid
InterfaceFluid::getFluidLz	./include/InterfaceFluid.h	/^  inline double getFluidLz(){ return(XYZ_D[2]); };$/;"	f	class:InterfaceFluid
InterfaceFluid::getFluidNxc	./include/InterfaceFluid.h	/^  inline double getFluidNxc()$/;"	f	class:InterfaceFluid
InterfaceFluid::getFluidNyc	./include/InterfaceFluid.h	/^  inline double getFluidNyc()$/;"	f	class:InterfaceFluid
InterfaceFluid::getFluidNzc	./include/InterfaceFluid.h	/^  inline double getFluidNzc()$/;"	f	class:InterfaceFluid
InterfaceFluid::getFluidRhoCenter	./include/InterfaceFluid.h	/^  inline double getFluidRhoCenter(const int ii,const int jj, const int kk, const int is)$/;"	f	class:InterfaceFluid
InterfaceFluid::getFluidUthx	./include/InterfaceFluid.h	/^  inline double getFluidUthx(const int i, const int j,const int k, const int is)$/;"	f	class:InterfaceFluid
InterfaceFluid::getFluidUthy	./include/InterfaceFluid.h	/^  inline double getFluidUthy(const int i, const int j,const int k, const int is)$/;"	f	class:InterfaceFluid
InterfaceFluid::getFluidUthz	./include/InterfaceFluid.h	/^  inline double getFluidUthz(const int i, const int j,const int k, const int is)$/;"	f	class:InterfaceFluid
InterfaceFluid::getFluidUx	./include/InterfaceFluid.h	/^  inline double getFluidUx(const int i, const int j,const int k, const int is)$/;"	f	class:InterfaceFluid
InterfaceFluid::getFluidUy	./include/InterfaceFluid.h	/^  inline double getFluidUy(const int i, const int j,const int k, const int is)$/;"	f	class:InterfaceFluid
InterfaceFluid::getFluidUz	./include/InterfaceFluid.h	/^  inline double getFluidUz(const int i, const int j,const int k, const int is)$/;"	f	class:InterfaceFluid
InterfaceFluid::getGlobalIndex	./include/InterfaceFluid.h	/^  inline void getGlobalIndex(const int il, const int jl, const int kl,$/;"	f	class:InterfaceFluid
InterfaceFluid::iBx	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
InterfaceFluid::iBy	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
InterfaceFluid::iBz	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
InterfaceFluid::iP	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
InterfaceFluid::iRho	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
InterfaceFluid::iUx	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
InterfaceFluid::iUy	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
InterfaceFluid::iUz	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
InterfaceFluid::nIJK_D	./include/InterfaceFluid.h	/^  int nIJK_D[3];    \/\/ number of cells in the passed uniform grid$/;"	m	class:InterfaceFluid
InterfaceFluid::setFluidFieldsCenter	./include/InterfaceFluid.h	/^  inline void setFluidFieldsCenter($/;"	f	class:InterfaceFluid
InterfaceFluid::setGlobalStartIndex	./include/InterfaceFluid.h	/^  void setGlobalStartIndex(VCtopology3D *vct)$/;"	f	class:InterfaceFluid
InterfaceFluid::~InterfaceFluid	./include/InterfaceFluid.h	/^  ~InterfaceFluid(){$/;"	f	class:InterfaceFluid
InterfaceFluid_H	./include/InterfaceFluid.h	12;"	d
Jx	./include/EMfields3D.h	/^    array3_double Jx;$/;"	m	class:EMfields3D
Jx_ext	./include/EMfields3D.h	/^    array3_double   Jx_ext;$/;"	m	class:EMfields3D
Jxh	./include/EMfields3D.h	/^    array3_double Jxh;$/;"	m	class:EMfields3D
Jxs	./include/EMfields3D.h	/^    array4_double Jxs;$/;"	m	class:EMfields3D
Jy	./include/EMfields3D.h	/^    array3_double Jy;$/;"	m	class:EMfields3D
Jy_ext	./include/EMfields3D.h	/^    array3_double   Jy_ext;$/;"	m	class:EMfields3D
Jyh	./include/EMfields3D.h	/^    array3_double Jyh;$/;"	m	class:EMfields3D
Jys	./include/EMfields3D.h	/^    array4_double Jys;$/;"	m	class:EMfields3D
Jz	./include/EMfields3D.h	/^    array3_double Jz;$/;"	m	class:EMfields3D
Jz_ext	./include/EMfields3D.h	/^    array3_double   Jz_ext;$/;"	m	class:EMfields3D
Jzh	./include/EMfields3D.h	/^    array3_double Jzh;$/;"	m	class:EMfields3D
Jzs	./include/EMfields3D.h	/^    array4_double Jzs;$/;"	m	class:EMfields3D
Ke	./include/iPic3D.h	/^    double        *Ke;$/;"	m	class:iPic3D::c_Solver
LAP	./tests/stopwatch.h	/^typedef enum {START, STOP, LAP, RESET} sw_action_t;$/;"	e	enum:__anon1
LAST	./include/TimeTasks.h	/^    LAST, \/\/ no more exclusive tasks$/;"	e	enum:TimeTasks::Tasks
LEFT	./include/VCtopology3D.h	/^  int LEFT;$/;"	m	class:VCtopology3D
L_square	./include/Collective.h	/^    double L_square;$/;"	m	class:Collective
L_square	./include/EMfields3D.h	/^    double L_square;$/;"	m	class:EMfields3D
LastCycle	./include/iPic3D.h	/^  inline int c_Solver::LastCycle() {$/;"	f	class:iPic3D::c_Solver
Lx	./include/Collective.h	/^    double Lx;$/;"	m	class:Collective
Lx	./include/EMfields3D.h	/^    double Lx;$/;"	m	class:EMfields3D
Lx	./include/Particles3Dcomm.h	/^  double Lx;$/;"	m	class:Particles3Dcomm
LxLyLz	./include/phdf5.h	/^    double   LxLyLz  [3];  \/\/ Using dynamic allocation of these vectors caused segfault and mpi problems$/;"	m	class:PHDF5fileClass
Ly	./include/Collective.h	/^    double Ly;$/;"	m	class:Collective
Ly	./include/EMfields3D.h	/^    double Ly;$/;"	m	class:EMfields3D
Ly	./include/Particles3Dcomm.h	/^  double Ly;$/;"	m	class:Particles3Dcomm
Lz	./include/Collective.h	/^    double Lz;$/;"	m	class:Collective
Lz	./include/EMfields3D.h	/^    double Lz;$/;"	m	class:EMfields3D
Lz	./include/Particles3Dcomm.h	/^  double Lz;$/;"	m	class:Particles3Dcomm
MAX	./mathlib/EllipticF.cpp	8;"	d	file:
MAX3	./mathlib/EllipticF.cpp	9;"	d	file:
MAX_ASSERT_LEVEL	./include/asserts.h	13;"	d
MIN	./mathlib/EllipticF.cpp	10;"	d	file:
MIN3	./mathlib/EllipticF.cpp	11;"	d	file:
MIN_VAL	./particles/Particles3D.cpp	39;"	d	file:
MIN_VAL	./particles/Particles3Dcomm.cpp	44;"	d	file:
MODULO	./include/Basic.h	/^inline void MODULO(double *x, double L) {$/;"	f
MOMENTS	./include/TimeTasks.h	/^    MOMENTS,$/;"	e	enum:TimeTasks::Tasks
MOMENT_ACCUMULATION	./include/TimeTasks.h	/^    MOMENT_ACCUMULATION,$/;"	e	enum:TimeTasks::Tasks
MOMENT_PCL_SORTING	./include/TimeTasks.h	/^    MOMENT_PCL_SORTING,$/;"	e	enum:TimeTasks::Tasks
MOMENT_REDUCTION	./include/TimeTasks.h	/^    MOMENT_REDUCTION,$/;"	e	enum:TimeTasks::Tasks
MOVER_PCL_MOVING	./include/TimeTasks.h	/^    MOVER_PCL_MOVING,$/;"	e	enum:TimeTasks::Tasks
MOVER_PCL_SORTING	./include/TimeTasks.h	/^    MOVER_PCL_SORTING,$/;"	e	enum:TimeTasks::Tasks
MPIDATA_H	./include/MPIdata.h	11;"	d
MPI_Barrier	./include/ipicdefs.h	11;"	d
MPIdata	./include/MPIdata.h	/^  MPIdata(){}$/;"	f	class:MPIdata
MPIdata	./include/MPIdata.h	/^class MPIdata {$/;"	c
MPIdata.cpp	./utility/MPIdata.cpp	1;"	F
MPIdata.h	./include/MPIdata.h	1;"	F
MPIdata::MPIdata	./include/MPIdata.h	/^  MPIdata(){}$/;"	f	class:MPIdata
MPIdata::Print	./utility/MPIdata.cpp	/^void MPIdata::Print(void) {$/;"	f	class:MPIdata
MPIdata::buffer	./include/MPIdata.h	/^  char *buffer;$/;"	m	class:MPIdata
MPIdata::buffer_size	./include/MPIdata.h	/^  int buffer_size;$/;"	m	class:MPIdata
MPIdata::finalize_mpi	./utility/MPIdata.cpp	/^void MPIdata::finalize_mpi() {$/;"	f	class:MPIdata
MPIdata::get_nprocs	./include/MPIdata.h	/^  static int get_nprocs(){return instance().nprocs;}$/;"	f	class:MPIdata
MPIdata::get_rank	./include/MPIdata.h	/^  static int get_rank(){return instance().rank;}$/;"	f	class:MPIdata
MPIdata::init	./utility/MPIdata.cpp	/^void MPIdata::init(int *argc, char ***argv) {$/;"	f	class:MPIdata
MPIdata::instance	./utility/MPIdata.cpp	/^MPIdata& MPIdata::instance()$/;"	f	class:MPIdata
MPIdata::nprocs	./include/MPIdata.h	/^  static int nprocs;$/;"	m	class:MPIdata
MPIdata::nprocs	./utility/MPIdata.cpp	/^int MPIdata::nprocs=-1;$/;"	m	class:MPIdata	file:
MPIdata::rank	./include/MPIdata.h	/^  static int rank;$/;"	m	class:MPIdata
MPIdata::rank	./utility/MPIdata.cpp	/^int MPIdata::rank=-1;$/;"	m	class:MPIdata	file:
MPIdata::status	./include/MPIdata.h	/^  MPI_Status status;$/;"	m	class:MPIdata
MPIdata::~MPIdata	./include/MPIdata.h	/^  ~MPIdata(){}$/;"	f	class:MPIdata
MPIdata_assert_initialized	./utility/MPIdata.cpp	/^bool MPIdata_assert_initialized()$/;"	f
MPIdata_is_initialized	./utility/MPIdata.cpp	/^static bool MPIdata_is_initialized=false;$/;"	v	file:
MUdot	./fields/EMfields3D.cpp	/^void EMfields3D::MUdot(arr3_double MUdotX, arr3_double MUdotY, arr3_double MUdotZ,$/;"	f	class:EMfields3D
MaxwellImage	./fields/EMfields3D.cpp	/^void EMfields3D::MaxwellImage(double *im, double *vector, Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
MaxwellSource	./fields/EMfields3D.cpp	/^void EMfields3D::MaxwellSource(double *bkrylov, Grid * grid, VirtualTopology3D * vct, Collective *col) {$/;"	f	class:EMfields3D
MaxwellianFromFluid	./particles/Particles3D.cpp	/^void Particles3D::MaxwellianFromFluid(Grid* grid,Field* EMf,VirtualTopology3D* vct,Collective *col, int is){$/;"	f	class:Particles3D
MaxwellianFromFluidCell	./particles/Particles3D.cpp	/^void Particles3D::MaxwellianFromFluidCell(Grid* grid, Collective *col, int is, int i, int j, int k, int &ip, double *x, double *y, double *z, double *q, double *vx, double *vy, double *vz, long long* ParticleID)$/;"	f	class:Particles3D
Moments.cpp	./fields/Moments.cpp	1;"	F
Moments.h	./include/Moments.h	1;"	F
Moments10	./include/Moments.h	/^    Moments10(int nxn, int nyn, int nzn) :$/;"	f	class:Moments10
Moments10	./include/Moments.h	/^class Moments10$/;"	c
Moments10::Moments10	./include/Moments.h	/^    Moments10(int nxn, int nyn, int nzn) :$/;"	f	class:Moments10
Moments10::arr	./include/Moments.h	/^    arr4_double arr;$/;"	m	class:Moments10
Moments10::fetch_arr	./include/Moments.h	/^    arr4_double fetch_arr() { return arr; }$/;"	f	class:Moments10
Moments10::nx	./include/Moments.h	/^    int nx;$/;"	m	class:Moments10
Moments10::ny	./include/Moments.h	/^    int ny;$/;"	m	class:Moments10
Moments10::nz	./include/Moments.h	/^    int nz;$/;"	m	class:Moments10
Moments10::set_to_zero	./fields/Moments.cpp	/^void Moments10::set_to_zero()$/;"	f	class:Moments10
Moments10::~Moments10	./include/Moments.h	/^    ~Moments10(){};$/;"	f	class:Moments10
Moments_H	./include/Moments.h	2;"	d
NG	./include/InterfaceFluid.h	/^  static const int NG = 1;$/;"	m	class:InterfaceFluid
NONE	./include/TimeTasks.h	/^    NONE = 0,$/;"	e	enum:TimeTasks::Tasks
NUMBER_OF_TASKS	./include/TimeTasks.h	/^    NUMBER_OF_TASKS \/\/ this line should be last$/;"	e	enum:TimeTasks::Tasks
Ninj	./include/Particles3Dcomm.h	/^  double Ninj;$/;"	m	class:Particles3Dcomm
NiterMover	./include/Collective.h	/^    int NiterMover;$/;"	m	class:Collective
NiterMover	./include/Particles3Dcomm.h	/^  int NiterMover;$/;"	m	class:Particles3Dcomm
NpMaxNpRatio	./include/Collective.h	/^    double NpMaxNpRatio;$/;"	m	class:Collective
Npcelx_array	./include/BCStructure.h	/^  int ***Npcelx_array;$/;"	m	struct:injInfoParticles
Npcely_array	./include/BCStructure.h	/^  int ***Npcely_array;$/;"	m	struct:injInfoParticles
Npcelz_array	./include/BCStructure.h	/^  int ***Npcelz_array;$/;"	m	struct:injInfoParticles
Nxsize_store	./include/BCStructure.h	/^  int Nxsize_store;$/;"	m	struct:injInfoFields
Nxsize_store	./include/BCStructure.h	/^  int Nxsize_store;$/;"	m	struct:injInfoParticles
Nysize_store	./include/BCStructure.h	/^  int Nysize_store;$/;"	m	struct:injInfoFields
Nysize_store	./include/BCStructure.h	/^  int Nysize_store;$/;"	m	struct:injInfoParticles
OFF	./tests/stopwatch.h	/^typedef enum {OFF, STARTED, STOPPED} sw_state_t;$/;"	e	enum:__anon2
OpenPHDF5file	./inputoutput/phdf5.cpp	/^void PHDF5fileClass::OpenPHDF5file(){$/;"	f	class:PHDF5fileClass
OutputAdaptor	./include/PSKOutput.h	/^    OutputAdaptor(void) {;$/;"	f	class:PSK::OutputAdaptor
OutputAdaptor	./include/PSKOutput.h	/^  class OutputAdaptor {$/;"	c	namespace:PSK
OutputAgent	./include/PSKOutput.h	/^    OutputAgent(const OutputAgent & a) {;$/;"	f	class:PSK::OutputAgent
OutputAgent	./include/PSKOutput.h	/^    OutputAgent(void) {;$/;"	f	class:PSK::OutputAgent
OutputAgent	./include/PSKOutput.h	/^template < class Toa > class OutputAgent:public OutputAgentBase {$/;"	c	namespace:PSK
OutputAgentBase	./include/PSKOutput.h	/^    OutputAgentBase(void) {;$/;"	f	class:PSK::OutputAgentBase
OutputAgentBase	./include/PSKOutput.h	/^    } OutputAgentBase(const OutputAgentBase & a) {;$/;"	f	class:PSK::OutputAgentBase
OutputAgentBase	./include/PSKOutput.h	/^  class OutputAgentBase {$/;"	c	namespace:PSK
OutputException	./include/PSKOutput.h	/^  OutputException(const std::string & err_str, const std::string fn_str = "", int sys_errno = 0):Exception(err_str, fn_str, sys_errno) {$/;"	f	class:PSK::OutputException
OutputException	./include/PSKOutput.h	/^  class OutputException:public Exception {$/;"	c	namespace:PSK
OutputException	./include/PSKOutput.h	/^  } OutputException(const char *err_str, const char *fn_str = "", int sys_errno = 0):Exception(err_str, fn_str, sys_errno) {$/;"	f	class:PSK::OutputException
OutputManager	./include/PSKOutput.h	/^    OutputManager(void) {;$/;"	f	class:PSK::OutputManager
OutputManager	./include/PSKOutput.h	/^  template < class Toa > class OutputManager {$/;"	c	namespace:PSK
PARTICLES	./include/TimeTasks.h	/^    PARTICLES,$/;"	e	enum:TimeTasks::Tasks
PERIODICX	./include/Collective.h	/^    bool PERIODICX;$/;"	m	class:Collective
PERIODICX	./include/VCtopology3D.h	/^  bool PERIODICX;$/;"	m	class:VCtopology3D
PERIODICX_P	./include/VCtopology3D.h	/^  bool PERIODICX_P;$/;"	m	class:VCtopology3D
PERIODICY	./include/Collective.h	/^    bool PERIODICY;$/;"	m	class:Collective
PERIODICY	./include/VCtopology3D.h	/^  bool PERIODICY;$/;"	m	class:VCtopology3D
PERIODICY_P	./include/VCtopology3D.h	/^  bool PERIODICY_P;$/;"	m	class:VCtopology3D
PERIODICZ	./include/Collective.h	/^    bool PERIODICZ;$/;"	m	class:Collective
PERIODICZ	./include/VCtopology3D.h	/^  bool PERIODICZ;$/;"	m	class:VCtopology3D
PERIODICZ_P	./include/VCtopology3D.h	/^  bool PERIODICZ_P;$/;"	m	class:VCtopology3D
PHDF5fileClass	./include/phdf5.h	/^class PHDF5fileClass{$/;"	c
PHDF5fileClass	./inputoutput/phdf5.cpp	/^PHDF5fileClass::PHDF5fileClass(string filestr){$/;"	f	class:PHDF5fileClass
PHDF5fileClass	./inputoutput/phdf5.cpp	/^PHDF5fileClass::PHDF5fileClass(string filestr, int nd, int *coord, MPI_Comm mpicomm){$/;"	f	class:PHDF5fileClass
PHDF5fileClass::ClosePHDF5file	./inputoutput/phdf5.cpp	/^void PHDF5fileClass::ClosePHDF5file(){$/;"	f	class:PHDF5fileClass
PHDF5fileClass::CreatePHDF5file	./inputoutput/phdf5.cpp	/^void PHDF5fileClass::CreatePHDF5file(double *L, int *dglob, int *dlocl, bool bp){$/;"	f	class:PHDF5fileClass
PHDF5fileClass::LxLyLz	./include/phdf5.h	/^    double   LxLyLz  [3];  \/\/ Using dynamic allocation of these vectors caused segfault and mpi problems$/;"	m	class:PHDF5fileClass
PHDF5fileClass::OpenPHDF5file	./inputoutput/phdf5.cpp	/^void PHDF5fileClass::OpenPHDF5file(){$/;"	f	class:PHDF5fileClass
PHDF5fileClass::PHDF5fileClass	./inputoutput/phdf5.cpp	/^PHDF5fileClass::PHDF5fileClass(string filestr){$/;"	f	class:PHDF5fileClass
PHDF5fileClass::PHDF5fileClass	./inputoutput/phdf5.cpp	/^PHDF5fileClass::PHDF5fileClass(string filestr, int nd, int *coord, MPI_Comm mpicomm){$/;"	f	class:PHDF5fileClass
PHDF5fileClass::ReadPHDF5dataset_double	./inputoutput/phdf5.cpp	/^void PHDF5fileClass::ReadPHDF5dataset_double(string datasetname, arr3_double data){$/;"	f	class:PHDF5fileClass
PHDF5fileClass::ReadPHDF5param	./inputoutput/phdf5.cpp	/^void PHDF5fileClass::ReadPHDF5param(){$/;"	f	class:PHDF5fileClass
PHDF5fileClass::SetDefaultGroups	./inputoutput/phdf5.cpp	/^void PHDF5fileClass::SetDefaultGroups(void){$/;"	f	class:PHDF5fileClass
PHDF5fileClass::WritePHDF5dataset	./inputoutput/phdf5.cpp	/^int PHDF5fileClass::WritePHDF5dataset(string grpname, string datasetname, const_arr3_double data, int nx, int ny, int nz){$/;"	f	class:PHDF5fileClass
PHDF5fileClass::bparticles	./include/phdf5.h	/^    bool     bparticles;$/;"	m	class:PHDF5fileClass
PHDF5fileClass::chdim	./include/phdf5.h	/^    hsize_t  chdim   [3];  \/\/$/;"	m	class:PHDF5fileClass
PHDF5fileClass::comm	./include/phdf5.h	/^    MPI_Comm comm;$/;"	m	class:PHDF5fileClass
PHDF5fileClass::dim	./include/phdf5.h	/^    hsize_t  dim     [3];  \/\/ Is there a way to avoid this problem?$/;"	m	class:PHDF5fileClass
PHDF5fileClass::file_id	./include/phdf5.h	/^    hid_t    file_id;$/;"	m	class:PHDF5fileClass
PHDF5fileClass::filename	./include/phdf5.h	/^    string   filename;$/;"	m	class:PHDF5fileClass
PHDF5fileClass::getPHDF5ncx	./inputoutput/phdf5.cpp	/^int PHDF5fileClass::getPHDF5ncx(){$/;"	f	class:PHDF5fileClass
PHDF5fileClass::getPHDF5ncy	./inputoutput/phdf5.cpp	/^int PHDF5fileClass::getPHDF5ncy(){$/;"	f	class:PHDF5fileClass
PHDF5fileClass::getPHDF5ncz	./inputoutput/phdf5.cpp	/^int PHDF5fileClass::getPHDF5ncz(){$/;"	f	class:PHDF5fileClass
PHDF5fileClass::getPHDF5ndim	./inputoutput/phdf5.cpp	/^int PHDF5fileClass::getPHDF5ndim(){$/;"	f	class:PHDF5fileClass
PHDF5fileClass::grpnames	./include/phdf5.h	/^    string grpnames[3];$/;"	m	class:PHDF5fileClass
PHDF5fileClass::mpicoord	./include/phdf5.h	/^    int      mpicoord[3];  \/\/ as the vectors were corrupted at the second call of the Write function.$/;"	m	class:PHDF5fileClass
PHDF5fileClass::ndim	./include/phdf5.h	/^    int      ndim;$/;"	m	class:PHDF5fileClass
PHDF5fileClass::ngrp	./include/phdf5.h	/^    static const int ngrp = 3;$/;"	m	class:PHDF5fileClass
PHI	./include/EMfields3D.h	/^    array3_double PHI;$/;"	m	class:EMfields3D
PIdot	./fields/EMfields3D.cpp	/^void EMfields3D::PIdot(arr3_double PIdotX, arr3_double PIdotY, arr3_double PIdotZ, const_arr3_double vectX, const_arr3_double vectY, const_arr3_double vectZ, int ns, Grid * grid) {$/;"	f	class:EMfields3D
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	181;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	193;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	199;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	202;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	211;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	223;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	226;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	235;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	238;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	241;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	250;"	d	file:
PLATFORM_ID	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	181;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	193;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	199;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	202;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	211;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	223;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	226;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	235;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	238;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	241;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	250;"	d	file:
PLATFORM_ID	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	181;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	193;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	199;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	202;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	211;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	223;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	226;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	235;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	238;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	241;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	250;"	d	file:
PLATFORM_ID	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	181;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	193;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	199;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	202;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	211;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	223;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	226;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	235;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	238;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	241;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	250;"	d	file:
PLATFORM_ID	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	181;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	193;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	199;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	202;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	211;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	223;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	226;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	235;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	238;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	241;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	250;"	d	file:
PLATFORM_ID	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
PROCDIM	./include/VCtopology3D.h	/^  int PROCDIM;$/;"	m	class:VCtopology3D
PSK	./include/PSKException.h	/^namespace PSK {$/;"	n
PSK	./include/PSKOutput.h	/^namespace PSK {$/;"	n
PSK	./include/PSKhdf5adaptor.h	/^namespace PSK {$/;"	n
PSK::Dimens	./include/PSKOutput.h	/^  class Dimens {$/;"	c	namespace:PSK
PSK::Dimens::Dimens	./include/PSKOutput.h	/^    Dimens(const std::vector < int >&dimens):_dimens(dimens) {;$/;"	f	class:PSK::Dimens
PSK::Dimens::Dimens	./include/PSKOutput.h	/^    Dimens(int d1):_dimens(1) {$/;"	f	class:PSK::Dimens
PSK::Dimens::Dimens	./include/PSKOutput.h	/^    Dimens(int d1, int d2):_dimens(2) {$/;"	f	class:PSK::Dimens
PSK::Dimens::Dimens	./include/PSKOutput.h	/^    Dimens(int d1, int d2, int d3):_dimens(3) {$/;"	f	class:PSK::Dimens
PSK::Dimens::Dimens	./include/PSKOutput.h	/^    Dimens(int d1, int d2, int d3, int d4):_dimens(4) {$/;"	f	class:PSK::Dimens
PSK::Dimens::Dimens	./include/PSKOutput.h	/^    Dimens(void) {;$/;"	f	class:PSK::Dimens
PSK::Dimens::Dimens	./include/PSKOutput.h	/^    } Dimens(const Dimens & dimens):_dimens(dimens._dimens) {;$/;"	f	class:PSK::Dimens
PSK::Dimens::_dimens	./include/PSKOutput.h	/^    std::vector < int >_dimens;$/;"	m	class:PSK::Dimens
PSK::Dimens::nels	./include/PSKOutput.h	/^    } int nels(void) const {$/;"	f	class:PSK::Dimens
PSK::Dimens::operator []	./include/PSKOutput.h	/^    } int operator[] (const int i) const {$/;"	f	class:PSK::Dimens
PSK::Dimens::size	./include/PSKOutput.h	/^    int size(void) const {$/;"	f	class:PSK::Dimens
PSK::Exception	./include/PSKException.h	/^  class Exception {$/;"	c	namespace:PSK
PSK::Exception::Exception	./include/PSKException.h	/^      Exception(const Exception & e):_can_recover(e._can_recover), _err_str(e._err_str), _fn_str(e._fn_str), _type_str(e._type_str), _err_msgs(e._err_msgs), _sys_errno(e._sys_errno), _sys_err_str(e._sys_err_str) {;$/;"	f	class:PSK::Exception
PSK::Exception::Exception	./include/PSKException.h	/^      Exception(void):_type_str("PSK::Exception") {;$/;"	f	class:PSK::Exception
PSK::Exception::Exception	./include/PSKException.h	/^      } Exception(const char *c_err_str, const char *c_fn_str = "", int sys_errno = 0)$/;"	f	class:PSK::Exception
PSK::Exception::Exception	./include/PSKException.h	/^      } Exception(const std::string & err_str, const std::string fn_str = "", int sys_errno = 0)$/;"	f	class:PSK::Exception
PSK::Exception::_can_recover	./include/PSKException.h	/^      bool _can_recover;          \/\/ \/< Flag indicating recovery possible$/;"	m	class:PSK::Exception
PSK::Exception::_err_msgs	./include/PSKException.h	/^      std::vector < std::string > _err_msgs;  \/\/ \/< stack of associated messages$/;"	m	class:PSK::Exception
PSK::Exception::_err_str	./include/PSKException.h	/^      std::string _err_str;       \/\/ \/< Exception error message string$/;"	m	class:PSK::Exception
PSK::Exception::_fn_str	./include/PSKException.h	/^      std::string _fn_str;        \/\/ \/< Function name throwing exception$/;"	m	class:PSK::Exception
PSK::Exception::_sys_err_str	./include/PSKException.h	/^      std::string _sys_err_str; \/\/ \/< system error message from bad system call$/;"	m	class:PSK::Exception
PSK::Exception::_sys_errno	./include/PSKException.h	/^      int _sys_errno;             \/\/ \/< system error number from bad system call$/;"	m	class:PSK::Exception
PSK::Exception::_type_str	./include/PSKException.h	/^      std::string _type_str;      \/\/ \/< Exception type string, including inheritance$/;"	m	class:PSK::Exception
PSK::Exception::append_err_str	./include/PSKException.h	/^      void append_err_str(const std::string & str) {$/;"	f	class:PSK::Exception
PSK::Exception::diag_cout	./include/PSKException.h	/^      void diag_cout() {$/;"	f	class:PSK::Exception
PSK::Exception::prepend_err_str	./include/PSKException.h	/^      void prepend_err_str(const std::string & str) {$/;"	f	class:PSK::Exception
PSK::Exception::push	./include/PSKException.h	/^      void push(const std::string & err_msg) {$/;"	f	class:PSK::Exception
PSK::HDF5OutputAdaptor	./include/PSKhdf5adaptor.h	/^  class HDF5OutputAdaptor:public OutputAdaptor {$/;"	c	namespace:PSK
PSK::HDF5OutputAdaptor::HDF5OutputAdaptor	./include/PSKhdf5adaptor.h	/^      HDF5OutputAdaptor(void) {;$/;"	f	class:PSK::HDF5OutputAdaptor
PSK::HDF5OutputAdaptor::_hdf5_file_id	./include/PSKhdf5adaptor.h	/^    hid_t _hdf5_file_id;$/;"	m	class:PSK::HDF5OutputAdaptor
PSK::HDF5OutputAdaptor::_hdf5_file_name	./include/PSKhdf5adaptor.h	/^    std::string _hdf5_file_name;$/;"	m	class:PSK::HDF5OutputAdaptor
PSK::OutputAdaptor	./include/PSKOutput.h	/^  class OutputAdaptor {$/;"	c	namespace:PSK
PSK::OutputAdaptor::OutputAdaptor	./include/PSKOutput.h	/^    OutputAdaptor(void) {;$/;"	f	class:PSK::OutputAdaptor
PSK::OutputAdaptor::close	./include/PSKOutput.h	/^    virtual void close(void) {$/;"	f	class:PSK::OutputAdaptor
PSK::OutputAdaptor::open	./include/PSKOutput.h	/^    } virtual void open(const std::string & outf) {$/;"	f	class:PSK::OutputAdaptor
PSK::OutputAdaptor::write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const double *d_array) {$/;"	f	class:PSK::OutputAdaptor
PSK::OutputAdaptor::write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const float *f_array) {$/;"	f	class:PSK::OutputAdaptor
PSK::OutputAdaptor::write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const int *i_array) {$/;"	f	class:PSK::OutputAdaptor
PSK::OutputAdaptor::write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const long *i_array) {$/;"	f	class:PSK::OutputAdaptor
PSK::OutputAdaptor::write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const std::vector < double >&d_array) {$/;"	f	class:PSK::OutputAdaptor
PSK::OutputAdaptor::write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const std::vector < float >&f_array) {$/;"	f	class:PSK::OutputAdaptor
PSK::OutputAdaptor::write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const std::vector < int >&i_array) {$/;"	f	class:PSK::OutputAdaptor
PSK::OutputAdaptor::write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const std::vector < long >&i_array) {$/;"	f	class:PSK::OutputAdaptor
PSK::OutputAdaptor::write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, double d) {$/;"	f	class:PSK::OutputAdaptor
PSK::OutputAdaptor::write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, float f) {$/;"	f	class:PSK::OutputAdaptor
PSK::OutputAdaptor::write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, int i) {$/;"	f	class:PSK::OutputAdaptor
PSK::OutputAgent	./include/PSKOutput.h	/^template < class Toa > class OutputAgent:public OutputAgentBase {$/;"	c	namespace:PSK
PSK::OutputAgent::OutputAgent	./include/PSKOutput.h	/^    OutputAgent(const OutputAgent & a) {;$/;"	f	class:PSK::OutputAgent
PSK::OutputAgent::OutputAgent	./include/PSKOutput.h	/^    OutputAgent(void) {;$/;"	f	class:PSK::OutputAgent
PSK::OutputAgent::close	./include/PSKOutput.h	/^    void close(void) {$/;"	f	class:PSK::OutputAgent
PSK::OutputAgent::mygrid	./include/PSKOutput.h	/^    Grid *mygrid;$/;"	m	class:PSK::OutputAgent
PSK::OutputAgent::open	./include/PSKOutput.h	/^    void open(const std::string & outf) {$/;"	f	class:PSK::OutputAgent
PSK::OutputAgent::open_append	./include/PSKOutput.h	/^    void open_append(const std::string & outf) {$/;"	f	class:PSK::OutputAgent
PSK::OutputAgent::output_adaptor	./include/PSKOutput.h	/^    Toa output_adaptor;$/;"	m	class:PSK::OutputAgent
PSK::OutputAgentBase	./include/PSKOutput.h	/^  class OutputAgentBase {$/;"	c	namespace:PSK
PSK::OutputAgentBase::OutputAgentBase	./include/PSKOutput.h	/^    OutputAgentBase(void) {;$/;"	f	class:PSK::OutputAgentBase
PSK::OutputAgentBase::OutputAgentBase	./include/PSKOutput.h	/^    } OutputAgentBase(const OutputAgentBase & a) {;$/;"	f	class:PSK::OutputAgentBase
PSK::OutputException	./include/PSKOutput.h	/^  class OutputException:public Exception {$/;"	c	namespace:PSK
PSK::OutputException::OutputException	./include/PSKOutput.h	/^  OutputException(const std::string & err_str, const std::string fn_str = "", int sys_errno = 0):Exception(err_str, fn_str, sys_errno) {$/;"	f	class:PSK::OutputException
PSK::OutputException::OutputException	./include/PSKOutput.h	/^  } OutputException(const char *err_str, const char *fn_str = "", int sys_errno = 0):Exception(err_str, fn_str, sys_errno) {$/;"	f	class:PSK::OutputException
PSK::OutputManager	./include/PSKOutput.h	/^  template < class Toa > class OutputManager {$/;"	c	namespace:PSK
PSK::OutputManager::OutputManager	./include/PSKOutput.h	/^    OutputManager(void) {;$/;"	f	class:PSK::OutputManager
PSK::OutputManager::agents_list	./include/PSKOutput.h	/^    std::list < OutputAgentBase * >agents_list;$/;"	m	class:PSK::OutputManager
PSK::OutputManager::output	./include/PSKOutput.h	/^    void output(const std::string & tag, int cycle) {$/;"	f	class:PSK::OutputManager
PSK::OutputManager::output	./include/PSKOutput.h	/^    void output(const std::string & tag, int cycle, int sample) {$/;"	f	class:PSK::OutputManager
PSK::OutputManager::push_back	./include/PSKOutput.h	/^    void push_back(OutputAgentBase * a_p) {$/;"	f	class:PSK::OutputManager
PSK::coutOutputAdaptor	./include/PSKOutput.h	/^  class coutOutputAdaptor:public OutputAdaptor {$/;"	c	namespace:PSK
PSK::coutOutputAdaptor::close	./include/PSKOutput.h	/^    void close(void) {$/;"	f	class:PSK::coutOutputAdaptor
PSK::coutOutputAdaptor::coutOutputAdaptor	./include/PSKOutput.h	/^    coutOutputAdaptor(void) {;$/;"	f	class:PSK::coutOutputAdaptor
PSK::coutOutputAdaptor::open	./include/PSKOutput.h	/^    } void open(const std::string & outf) {$/;"	f	class:PSK::coutOutputAdaptor
PSK::coutOutputAdaptor::write	./include/PSKOutput.h	/^    void write(const std::string & objname, const Dimens dimens, const double *d_array) {$/;"	f	class:PSK::coutOutputAdaptor
PSK::coutOutputAdaptor::write	./include/PSKOutput.h	/^    void write(const std::string & objname, const Dimens dimens, const float *f_array) {$/;"	f	class:PSK::coutOutputAdaptor
PSK::coutOutputAdaptor::write	./include/PSKOutput.h	/^    void write(const std::string & objname, const Dimens dimens, const int *i_array) {$/;"	f	class:PSK::coutOutputAdaptor
PSK::coutOutputAdaptor::write	./include/PSKOutput.h	/^    void write(const std::string & objname, const Dimens dimens, const std::vector < double >&d_array) {$/;"	f	class:PSK::coutOutputAdaptor
PSK::coutOutputAdaptor::write	./include/PSKOutput.h	/^    void write(const std::string & objname, const Dimens dimens, const std::vector < float >&f_array) {$/;"	f	class:PSK::coutOutputAdaptor
PSK::coutOutputAdaptor::write	./include/PSKOutput.h	/^    void write(const std::string & objname, const Dimens dimens, const std::vector < int >&i_array) {$/;"	f	class:PSK::coutOutputAdaptor
PSK::coutOutputAdaptor::write	./include/PSKOutput.h	/^    void write(const std::string & objname, double d) {$/;"	f	class:PSK::coutOutputAdaptor
PSK::coutOutputAdaptor::write	./include/PSKOutput.h	/^    void write(const std::string & objname, float f) {$/;"	f	class:PSK::coutOutputAdaptor
PSK::coutOutputAdaptor::write	./include/PSKOutput.h	/^    void write(const std::string & objname, int i) {$/;"	f	class:PSK::coutOutputAdaptor
PSKException.h	./include/PSKException.h	1;"	F
PSKOutput.h	./include/PSKOutput.h	1;"	F
PSKhdf5adaptor.cpp	./PSKOutput3D/PSKhdf5adaptor.cpp	1;"	F
PSKhdf5adaptor.h	./include/PSKhdf5adaptor.h	1;"	F
P_SAME_TIME	./particles/Particles3D.cpp	41;"	d	file:
Parameters	./include/Parameters.h	/^namespace Parameters$/;"	n
Parameters.cpp	./main/Parameters.cpp	1;"	F
Parameters.h	./include/Parameters.h	1;"	F
Parameters::get_SORTING_PARTICLES	./main/Parameters.cpp	/^bool Parameters::get_SORTING_PARTICLES() { return true; }$/;"	f	class:Parameters
Parameters::get_USING_XAVG	./main/Parameters.cpp	/^bool Parameters::get_USING_XAVG() { return get_SORTING_PARTICLES(); }$/;"	f	class:Parameters
Parameters::get_VECTORIZE_MOMENTS	./main/Parameters.cpp	/^bool Parameters::get_VECTORIZE_MOMENTS() { return false; }$/;"	f	class:Parameters
Parameters::get_VECTORIZE_MOVER	./main/Parameters.cpp	/^bool Parameters::get_VECTORIZE_MOVER() { return false; }$/;"	f	class:Parameters
Parameters::init_parameters	./main/Parameters.cpp	/^void Parameters::init_parameters()$/;"	f	class:Parameters
Part2D_H	./include/Particles3D.h	8;"	d
Part3DCOMM_H	./include/Particles3Dcomm.h	8;"	d
Particle.h	./include/Particle.h	1;"	F
ParticleID	./include/Particles3Dcomm.h	/^  long long *ParticleID;$/;"	m	class:Particles3Dcomm
ParticleIDtmp	./include/Particles3Dcomm.h	/^  long long *ParticleIDtmp;$/;"	m	class:Particles3Dcomm
ParticleType	./include/Particle.h	/^namespace ParticleType$/;"	n
ParticleType::AoS	./include/Particle.h	/^    AoS = 0,$/;"	e	enum:ParticleType::Type
ParticleType::SoA	./include/Particle.h	/^    SoA$/;"	e	enum:ParticleType::Type
ParticleType::Type	./include/Particle.h	/^  enum Type$/;"	g	namespace:ParticleType
Particles	./include/Particles3Dcomm.h	/^typedef Particles3Dcomm Particles;$/;"	t
Particles.h	./include/Particles.h	1;"	F
Particles3D	./include/Particles3D.h	/^class Particles3D:public Particles3Dcomm {$/;"	c
Particles3D	./particles/Particles3D.cpp	/^Particles3D::Particles3D() {$/;"	f	class:Particles3D
Particles3D.cpp	./particles/Particles3D.cpp	1;"	F
Particles3D.h	./include/Particles3D.h	1;"	F
Particles3D::AddPerturbationJ	./particles/Particles3D.cpp	/^void Particles3D::AddPerturbationJ(double deltaBoB, double kx, double ky, double Bx_mod, double By_mod, double Bz_mod, double jx_mod, double jx_phase, double jy_mod, double jy_phase, double jz_mod, double jz_phase, double B0, Grid * grid) {$/;"	f	class:Particles3D
Particles3D::MaxwellianFromFluid	./particles/Particles3D.cpp	/^void Particles3D::MaxwellianFromFluid(Grid* grid,Field* EMf,VirtualTopology3D* vct,Collective *col, int is){$/;"	f	class:Particles3D
Particles3D::MaxwellianFromFluidCell	./particles/Particles3D.cpp	/^void Particles3D::MaxwellianFromFluidCell(Grid* grid, Collective *col, int is, int i, int j, int k, int &ip, double *x, double *y, double *z, double *q, double *vx, double *vy, double *vz, long long* ParticleID)$/;"	f	class:Particles3D
Particles3D::Particles3D	./particles/Particles3D.cpp	/^Particles3D::Particles3D() {$/;"	f	class:Particles3D
Particles3D::RotatePlaneXY	./particles/Particles3D.cpp	/^void Particles3D::RotatePlaneXY(double theta) {$/;"	f	class:Particles3D
Particles3D::alt_maxwellian	./particles/Particles3D.cpp	/^void Particles3D::alt_maxwellian(Grid * grid, Field * EMf, VirtualTopology3D * vct) {$/;"	f	class:Particles3D
Particles3D::communicate_particles	./particles/Particles3D.cpp	/^int Particles3D::communicate_particles(VirtualTopology3D * vct)$/;"	f	class:Particles3D
Particles3D::constantVelocity	./particles/Particles3D.cpp	/^void Particles3D::constantVelocity(double vel, int dim, Grid * grid, Field * EMf) {$/;"	f	class:Particles3D
Particles3D::deleteParticlesInsideSphere	./particles/Particles3D.cpp	/^double Particles3D::deleteParticlesInsideSphere(double R, double x_center, double y_center, double z_center){$/;"	f	class:Particles3D
Particles3D::delta_f	./particles/Particles3D.cpp	/^double Particles3D::delta_f(double u, double v, double w, double x, double y, double kx, double ky, double omega_re, double omega_i, double Ex_mod, double Ex_phase, double Ey_mod, double Ey_phase, double Ez_mod, double Ez_phase, double theta, Field * EMf) {$/;"	f	class:Particles3D
Particles3D::df0_dvpar	./particles/Particles3D.cpp	/^double Particles3D::df0_dvpar(double vpar, double vperp) {$/;"	f	class:Particles3D
Particles3D::df0_dvperp	./particles/Particles3D.cpp	/^double Particles3D::df0_dvperp(double vpar, double vperp) {$/;"	f	class:Particles3D
Particles3D::f0	./particles/Particles3D.cpp	/^double Particles3D::f0(double vpar, double vperp) {$/;"	f	class:Particles3D
Particles3D::force_free	./particles/Particles3D.cpp	/^void Particles3D::force_free(Grid * grid, Field * EMf, VirtualTopology3D * vct) {$/;"	f	class:Particles3D
Particles3D::linear_perturbation	./particles/Particles3D.cpp	/^void Particles3D::linear_perturbation(double deltaBoB, double kx, double ky, double angle, double omega_r, double omega_i, double Ex_mod, double Ex_phase, double Ey_mod, double Ey_phase, double Ez_mod, double Ez_phase, double Bx_mod, double Bx_phase, double By_mod, double By_phase, double Bz_mod, double Bz_phase, Grid * grid, Field * EMf, VirtualTopology3D * vct) {$/;"	f	class:Particles3D
Particles3D::maxwellian	./particles/Particles3D.cpp	/^void Particles3D::maxwellian(Grid * grid, Field * EMf, VirtualTopology3D * vct) {$/;"	f	class:Particles3D
Particles3D::mover_PC	./particles/Particles3D.cpp	/^void Particles3D::mover_PC(Grid * grid, VirtualTopology3D * vct, Field * EMf) {$/;"	f	class:Particles3D
Particles3D::mover_PC_AoS	./particles/Particles3D.cpp	/^void Particles3D::mover_PC_AoS(Grid * grid, VirtualTopology3D * vct, Field * EMf)$/;"	f	class:Particles3D
Particles3D::mover_PC_AoS2	./particles/Particles3D.cpp	/^void Particles3D::mover_PC_AoS2(Grid * grid, VirtualTopology3D * vct, Field * EMf)$/;"	f	class:Particles3D
Particles3D::mover_PC_vectorized	./particles/Particles3D.cpp	/^void Particles3D::mover_PC_vectorized($/;"	f	class:Particles3D
Particles3D::mover_explicit	./particles/Particles3D.cpp	/^void Particles3D::mover_explicit(Grid * grid, VirtualTopology3D * vct, Field * EMf) {$/;"	f	class:Particles3D
Particles3D::mover_relativistic	./particles/Particles3D.cpp	/^int Particles3D::mover_relativistic(Grid * grid, VirtualTopology3D * vct, Field * EMf) {$/;"	f	class:Particles3D
Particles3D::particle_repopulator	./particles/Particles3D.cpp	/^int Particles3D::particle_repopulator(Grid* grid,VirtualTopology3D* vct, Field* EMf){$/;"	f	class:Particles3D
Particles3D::uniform_background	./particles/Particles3D.cpp	/^void Particles3D::uniform_background(Grid * grid, Field * EMf) {$/;"	f	class:Particles3D
Particles3D::~Particles3D	./particles/Particles3D.cpp	/^Particles3D::~Particles3D() {$/;"	f	class:Particles3D
Particles3Dcomm	./include/Particles3Dcomm.h	/^class Particles3Dcomm \/\/ :public Particles$/;"	c
Particles3Dcomm	./particles/Particles3Dcomm.cpp	/^Particles3Dcomm::Particles3Dcomm(){$/;"	f	class:Particles3Dcomm
Particles3Dcomm.cpp	./particles/Particles3Dcomm.cpp	1;"	F
Particles3Dcomm.h	./include/Particles3Dcomm.h	1;"	F
Particles3Dcomm::BirthRank	./include/Particles3Dcomm.h	/^  int BirthRank[2];$/;"	m	class:Particles3Dcomm
Particles3Dcomm::Lx	./include/Particles3Dcomm.h	/^  double Lx;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::Ly	./include/Particles3Dcomm.h	/^  double Ly;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::Lz	./include/Particles3Dcomm.h	/^  double Lz;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::Ninj	./include/Particles3Dcomm.h	/^  double Ninj;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::NiterMover	./include/Particles3Dcomm.h	/^  int NiterMover;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::ParticleID	./include/Particles3Dcomm.h	/^  long long *ParticleID;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::ParticleIDtmp	./include/Particles3Dcomm.h	/^  long long *ParticleIDtmp;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::Particles3Dcomm	./particles/Particles3Dcomm.cpp	/^Particles3Dcomm::Particles3Dcomm(){$/;"	f	class:Particles3Dcomm
Particles3Dcomm::Print	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::Print(VirtualTopology3D * ptVCT) const {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::PrintNp	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::PrintNp(VirtualTopology3D * ptVCT)  const {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::Q_removed	./include/Particles3Dcomm.h	/^  double Q_removed;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::TrackParticleID	./include/Particles3Dcomm.h	/^  bool TrackParticleID;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::Vinj	./include/Particles3Dcomm.h	/^  double Vinj;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::allocate	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::allocate(int species, CollectiveIO * col, VirtualTopology3D * vct, Grid * grid) {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::b_X_LEFT	./include/Particles3Dcomm.h	/^  double *b_X_LEFT;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::b_X_LEFT_ptr	./include/Particles3Dcomm.h	/^  double *b_X_LEFT_ptr;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::b_X_RIGHT	./include/Particles3Dcomm.h	/^  double *b_X_RIGHT;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::b_X_RIGHT_ptr	./include/Particles3Dcomm.h	/^  double *b_X_RIGHT_ptr;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::b_Y_LEFT	./include/Particles3Dcomm.h	/^  double *b_Y_LEFT;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::b_Y_LEFT_ptr	./include/Particles3Dcomm.h	/^  double *b_Y_LEFT_ptr;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::b_Y_RIGHT	./include/Particles3Dcomm.h	/^  double *b_Y_RIGHT;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::b_Y_RIGHT_ptr	./include/Particles3Dcomm.h	/^  double *b_Y_RIGHT_ptr;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::b_Z_LEFT	./include/Particles3Dcomm.h	/^  double *b_Z_LEFT;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::b_Z_LEFT_ptr	./include/Particles3Dcomm.h	/^  double *b_Z_LEFT_ptr;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::b_Z_RIGHT	./include/Particles3Dcomm.h	/^  double *b_Z_RIGHT;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::b_Z_RIGHT_ptr	./include/Particles3Dcomm.h	/^  double *b_Z_RIGHT_ptr;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::bcPfaceXleft	./include/Particles3Dcomm.h	/^  int bcPfaceXleft;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::bcPfaceXright	./include/Particles3Dcomm.h	/^  int bcPfaceXright;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::bcPfaceYleft	./include/Particles3Dcomm.h	/^  int bcPfaceYleft;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::bcPfaceYright	./include/Particles3Dcomm.h	/^  int bcPfaceYright;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::bcPfaceZleft	./include/Particles3Dcomm.h	/^  int bcPfaceZleft;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::bcPfaceZright	./include/Particles3Dcomm.h	/^  int bcPfaceZright;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::bucket_offset	./include/Particles3Dcomm.h	/^  array3_int* bucket_offset;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::bufferXleft	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::bufferXleft(double *b_, int np_current, VirtualTopology3D * vct) {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::bufferXright	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::bufferXright(double *b_, int np_current, VirtualTopology3D * vct) {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::bufferYleft	./particles/Particles3Dcomm.cpp	/^inline void Particles3Dcomm::bufferYleft(double *b_, int np_current, VirtualTopology3D * vct) {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::bufferYright	./particles/Particles3Dcomm.cpp	/^inline void Particles3Dcomm::bufferYright(double *b_, int np_current, VirtualTopology3D * vct) {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::bufferZleft	./particles/Particles3Dcomm.cpp	/^inline void Particles3Dcomm::bufferZleft(double *b_, int np_current, VirtualTopology3D * vct) {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::bufferZright	./particles/Particles3Dcomm.cpp	/^inline void Particles3Dcomm::bufferZright(double *b_, int np_current, VirtualTopology3D * vct) {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::buffer_size	./include/Particles3Dcomm.h	/^  int buffer_size;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::buffer_size_small	./include/Particles3Dcomm.h	/^  int buffer_size_small;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::c	./include/Particles3Dcomm.h	/^  double c;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::cVERBOSE	./include/Particles3Dcomm.h	/^  bool cVERBOSE;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::communicate	./particles/Particles3Dcomm.cpp	/^int Particles3Dcomm::communicate(VirtualTopology3D * ptVCT) {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::convertParticlesToAoS	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::convertParticlesToAoS()$/;"	f	class:Particles3Dcomm
Particles3Dcomm::convertParticlesToSoA	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::convertParticlesToSoA()$/;"	f	class:Particles3Dcomm
Particles3Dcomm::copyParticlesToAoS	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::copyParticlesToAoS()$/;"	f	class:Particles3Dcomm
Particles3Dcomm::copyParticlesToSoA	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::copyParticlesToSoA()$/;"	f	class:Particles3Dcomm
Particles3Dcomm::del_pack	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::del_pack(int np_current, int *nplast) {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::delta	./include/Particles3Dcomm.h	/^  double delta;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::dt	./include/Particles3Dcomm.h	/^  double dt;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::dx	./include/Particles3Dcomm.h	/^  double dx, dy, dz;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::dy	./include/Particles3Dcomm.h	/^  double dx, dy, dz;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::dz	./include/Particles3Dcomm.h	/^  double dx, dy, dz;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::getKe	./particles/Particles3Dcomm.cpp	/^double Particles3Dcomm::getKe() {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getMaxVelocity	./particles/Particles3Dcomm.cpp	/^double Particles3Dcomm::getMaxVelocity() {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getNOP	./include/Particles3Dcomm.h	/^  int getNOP()  const { return (nop); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getP	./particles/Particles3Dcomm.cpp	/^double Particles3Dcomm::getP() {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getParticleID	./include/Particles3Dcomm.h	/^  long long getParticleID(int indexPart)  const$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getParticleIDall	./include/Particles3Dcomm.h	/^  long long *getParticleIDall()  const { return (ParticleID); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getQ	./include/Particles3Dcomm.h	/^  double getQ(int indexPart)  const { return (q[indexPart]); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getQall	./include/Particles3Dcomm.h	/^  double *getQall()  const { return (q); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getU	./include/Particles3Dcomm.h	/^  double getU(int indexPart)  const { return (u[indexPart]); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getUall	./include/Particles3Dcomm.h	/^  double *getUall()  const { return (u); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getV	./include/Particles3Dcomm.h	/^  double getV(int indexPart)  const { return (v[indexPart]); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getVall	./include/Particles3Dcomm.h	/^  double *getVall()  const { return (v); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getVelocityDistribution	./particles/Particles3Dcomm.cpp	/^long long *Particles3Dcomm::getVelocityDistribution(int nBins, double maxVel) {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getW	./include/Particles3Dcomm.h	/^  double getW(int indexPart)  const { return (w[indexPart]); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getWall	./include/Particles3Dcomm.h	/^  double *getWall()  const { return (w); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getX	./include/Particles3Dcomm.h	/^  double getX(int indexPart)  const { return (x[indexPart]); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getXall	./include/Particles3Dcomm.h	/^  double *getXall()  const { return (x); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getY	./include/Particles3Dcomm.h	/^  double getY(int indexPart)  const { return (y[indexPart]); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getYall	./include/Particles3Dcomm.h	/^  double *getYall()  const { return (y); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getZ	./include/Particles3Dcomm.h	/^  double getZ(int indexPart)  const { return (z[indexPart]); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::getZall	./include/Particles3Dcomm.h	/^  double *getZall()  const { return (z); }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::get_bucket_offset	./include/Particles3Dcomm.h	/^  int get_bucket_offset(int cx, int cy, int cz)const$/;"	f	class:Particles3Dcomm
Particles3Dcomm::get_cell_for_pos_in_domain	./include/Particles3Dcomm.h	/^  void get_cell_for_pos_in_domain($/;"	f	class:Particles3Dcomm
Particles3Dcomm::get_ns	./include/Particles3Dcomm.h	/^  int get_ns()const{return ns;}$/;"	f	class:Particles3Dcomm
Particles3Dcomm::get_numpcls_in_bucket	./include/Particles3Dcomm.h	/^  int get_numpcls_in_bucket(int cx, int cy, int cz)const$/;"	f	class:Particles3Dcomm
Particles3Dcomm::get_particleType	./include/Particles3Dcomm.h	/^  ParticleType::Type get_particleType()const { return particleType; }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::get_pcl	./include/Particles3Dcomm.h	/^  const SpeciesParticle& get_pcl(int pidx)const{ return pcls[pidx]; }$/;"	f	class:Particles3Dcomm
Particles3Dcomm::get_safe_cell_for_pos	./include/Particles3Dcomm.h	/^  void get_safe_cell_for_pos($/;"	f	class:Particles3Dcomm
Particles3Dcomm::interpP2G	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::interpP2G(Field * EMf, Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::invVOL	./include/Particles3Dcomm.h	/^  double xstart, xend, ystart, yend, zstart, zend, invVOL;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::inv_dx	./include/Particles3Dcomm.h	/^  double inv_dx;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::inv_dy	./include/Particles3Dcomm.h	/^  double inv_dy;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::inv_dz	./include/Particles3Dcomm.h	/^  double inv_dz;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::isMessagingDone	./particles/Particles3Dcomm.cpp	/^int Particles3Dcomm::isMessagingDone(VirtualTopology3D * ptVCT) {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::maxNpExiting	./particles/Particles3Dcomm.cpp	/^int Particles3Dcomm::maxNpExiting() {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::nVar	./include/Particles3Dcomm.h	/^  int nVar;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::nop	./include/Particles3Dcomm.h	/^  int nop;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::npExit	./include/Particles3Dcomm.h	/^  int npExit;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::npExitXleft	./include/Particles3Dcomm.h	/^  int npExitXleft;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::npExitXright	./include/Particles3Dcomm.h	/^  int npExitXright;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::npExitYleft	./include/Particles3Dcomm.h	/^  int npExitYleft;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::npExitYright	./include/Particles3Dcomm.h	/^  int npExitYright;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::npExitZleft	./include/Particles3Dcomm.h	/^  int npExitZleft;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::npExitZright	./include/Particles3Dcomm.h	/^  int npExitZright;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::np_tot	./include/Particles3Dcomm.h	/^  long long np_tot;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::npcel	./include/Particles3Dcomm.h	/^  int npcel;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::npcelx	./include/Particles3Dcomm.h	/^  int npcelx;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::npcely	./include/Particles3Dcomm.h	/^  int npcely;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::npcelz	./include/Particles3Dcomm.h	/^  int npcelz;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::npmax	./include/Particles3Dcomm.h	/^  int npmax;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::ns	./include/Particles3Dcomm.h	/^  int ns;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::numpcls_in_bucket	./include/Particles3Dcomm.h	/^  array3_int* numpcls_in_bucket;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::numpcls_in_bucket_now	./include/Particles3Dcomm.h	/^  array3_int* numpcls_in_bucket_now; \/\/ accumulator used during sorting$/;"	m	class:Particles3Dcomm
Particles3Dcomm::nxc	./include/Particles3Dcomm.h	/^  int nxc, nyc, nzc;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::nxn	./include/Particles3Dcomm.h	/^  int nxn, nyn, nzn;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::nyc	./include/Particles3Dcomm.h	/^  int nxc, nyc, nzc;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::nyn	./include/Particles3Dcomm.h	/^  int nxn, nyn, nzn;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::nzc	./include/Particles3Dcomm.h	/^  int nxc, nyc, nzc;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::nzn	./include/Particles3Dcomm.h	/^  int nxn, nyn, nzn;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::particleType	./include/Particles3Dcomm.h	/^  ParticleType::Type particleType;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::pcls	./include/Particles3Dcomm.h	/^  SpeciesParticle *pcls;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::q	./include/Particles3Dcomm.h	/^  double *q;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::qom	./include/Particles3Dcomm.h	/^  double qom;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::qtmp	./include/Particles3Dcomm.h	/^  double *qtmp;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::resize_buffers	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::resize_buffers(int new_buffer_size) {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::restart	./include/Particles3Dcomm.h	/^  int restart;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::rightDomain	./include/Particles3Dcomm.h	/^  int rightDomain;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::sort_particles_serial	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::sort_particles_serial($/;"	f	class:Particles3Dcomm
Particles3Dcomm::sort_particles_serial	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::sort_particles_serial(Grid * grid, VirtualTopology3D * vct)$/;"	f	class:Particles3Dcomm
Particles3Dcomm::u	./include/Particles3Dcomm.h	/^  double *u;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::u0	./include/Particles3Dcomm.h	/^  double u0;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::unbuffer	./particles/Particles3Dcomm.cpp	/^int Particles3Dcomm::unbuffer(double *b_) {$/;"	f	class:Particles3Dcomm
Particles3Dcomm::uth	./include/Particles3Dcomm.h	/^  double uth;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::utmp	./include/Particles3Dcomm.h	/^  double *utmp;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::v	./include/Particles3Dcomm.h	/^  double *v;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::v0	./include/Particles3Dcomm.h	/^  double v0;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::vth	./include/Particles3Dcomm.h	/^  double vth;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::vtmp	./include/Particles3Dcomm.h	/^  double *vtmp;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::w	./include/Particles3Dcomm.h	/^  double *w;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::w0	./include/Particles3Dcomm.h	/^  double w0;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::wth	./include/Particles3Dcomm.h	/^  double wth;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::wtmp	./include/Particles3Dcomm.h	/^  double *wtmp;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::x	./include/Particles3Dcomm.h	/^  double *x;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::xavg	./include/Particles3Dcomm.h	/^  double *xavg;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::xavgtmp	./include/Particles3Dcomm.h	/^  double *xavgtmp;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::xend	./include/Particles3Dcomm.h	/^  double xstart, xend, ystart, yend, zstart, zend, invVOL;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::xstart	./include/Particles3Dcomm.h	/^  double xstart, xend, ystart, yend, zstart, zend, invVOL;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::xtmp	./include/Particles3Dcomm.h	/^  double *xtmp;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::y	./include/Particles3Dcomm.h	/^  double *y;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::yavg	./include/Particles3Dcomm.h	/^  double *yavg;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::yavgtmp	./include/Particles3Dcomm.h	/^  double *yavgtmp;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::yend	./include/Particles3Dcomm.h	/^  double xstart, xend, ystart, yend, zstart, zend, invVOL;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::ystart	./include/Particles3Dcomm.h	/^  double xstart, xend, ystart, yend, zstart, zend, invVOL;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::ytmp	./include/Particles3Dcomm.h	/^  double *ytmp;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::z	./include/Particles3Dcomm.h	/^  double *z;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::zavg	./include/Particles3Dcomm.h	/^  double *zavg;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::zavgtmp	./include/Particles3Dcomm.h	/^  double *zavgtmp;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::zend	./include/Particles3Dcomm.h	/^  double xstart, xend, ystart, yend, zstart, zend, invVOL;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::zstart	./include/Particles3Dcomm.h	/^  double xstart, xend, ystart, yend, zstart, zend, invVOL;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::ztmp	./include/Particles3Dcomm.h	/^  double *ztmp;$/;"	m	class:Particles3Dcomm
Particles3Dcomm::~Particles3Dcomm	./particles/Particles3Dcomm.cpp	/^Particles3Dcomm::~Particles3Dcomm() {$/;"	f	class:Particles3Dcomm
ParticlesMover	./main/iPic3Dlib.cpp	/^bool c_Solver::ParticlesMover() {$/;"	f	class:c_Solver
ParticlesOutputCycle	./include/Collective.h	/^    int ParticlesOutputCycle;$/;"	m	class:Collective
Particles_H	./include/Particles.h	8;"	d
PoissonCorrection	./include/Collective.h	/^    string PoissonCorrection;$/;"	m	class:Collective
PoissonCorrection	./include/EMfields3D.h	/^    bool PoissonCorrection;$/;"	m	class:EMfields3D
PoissonImage	./fields/EMfields3D.cpp	/^void EMfields3D::PoissonImage(double *image, double *vector, Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
Print	./communication/VCtopology3D.cpp	/^void VCtopology3D::Print() {$/;"	f	class:VCtopology3D
Print	./inputoutput/Collective.cpp	/^void Collective::Print() {$/;"	f	class:Collective
Print	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::Print(VirtualTopology3D * ptVCT) const {$/;"	f	class:Particles3Dcomm
Print	./performances/Timing.cpp	/^void Timing::Print() {$/;"	f	class:Timing
Print	./utility/MPIdata.cpp	/^void MPIdata::Print(void) {$/;"	f	class:MPIdata
PrintMapping	./communication/VCtopology3D.cpp	/^void VCtopology3D::PrintMapping() {$/;"	f	class:VCtopology3D
PrintNp	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::PrintNp(VirtualTopology3D * ptVCT)  const {$/;"	f	class:Particles3Dcomm
PrintStateVar	./include/InterfaceFluid.h	/^  void PrintStateVar()$/;"	f	class:InterfaceFluid
Print_OnAir	./performances/Timing.cpp	/^void Timing::Print_OnAir() {$/;"	f	class:Timing
QITemp	./include/BCStructure.h	/^  double ***QITemp;             \/\/ weight of injected particles: make it variable, keeping the amount of injected particles.$/;"	m	struct:injInfoParticles
Q_removed	./include/Particles3Dcomm.h	/^  double Q_removed;$/;"	m	class:Particles3Dcomm
Qremoved	./include/iPic3D.h	/^    double        *Qremoved;$/;"	m	class:iPic3D::c_Solver
RESET	./tests/stopwatch.h	/^typedef enum {START, STOP, LAP, RESET} sw_action_t;$/;"	e	enum:__anon1
RESTART1	./include/Collective.h	/^    bool RESTART1;$/;"	m	class:Collective
RIGHT	./include/VCtopology3D.h	/^  int RIGHT;$/;"	m	class:VCtopology3D
Rank1	./tests/test_arrays.cpp	/^    Rank1(size_t s1) : S1(s1), arr(AlignedAlloc(type, s1)) {}$/;"	f	class:Rank1
Rank1	./tests/test_arrays.cpp	/^class Rank1$/;"	c	file:
Rank1::Rank1	./tests/test_arrays.cpp	/^    Rank1(size_t s1) : S1(s1), arr(AlignedAlloc(type, s1)) {}$/;"	f	class:Rank1
Rank1::S1	./tests/test_arrays.cpp	/^    const size_t S1;$/;"	m	class:Rank1	file:
Rank1::arr	./tests/test_arrays.cpp	/^    type  * __restrict__ const  arr;$/;"	m	class:Rank1	file:
Rank1::dim1	./tests/test_arrays.cpp	/^    size_t dim1() const { return S1; }$/;"	f	class:Rank1
Rank1::operator ()	./tests/test_arrays.cpp	/^    type& operator()(size_t n1) const$/;"	f	class:Rank1
Rank1::~Rank1	./tests/test_arrays.cpp	/^    ~Rank1() { };$/;"	f	class:Rank1
Rank2	./tests/test_arrays.cpp	/^    Rank2(size_t s1, size_t s2) : S1(s1), S2(s2), arr(AlignedAlloc(type, s1*s2)) {}$/;"	f	class:Rank2
Rank2	./tests/test_arrays.cpp	/^class Rank2$/;"	c	file:
Rank2::Rank2	./tests/test_arrays.cpp	/^    Rank2(size_t s1, size_t s2) : S1(s1), S2(s2), arr(AlignedAlloc(type, s1*s2)) {}$/;"	f	class:Rank2
Rank2::S1	./tests/test_arrays.cpp	/^    const size_t  S1, S2;$/;"	m	class:Rank2	file:
Rank2::S2	./tests/test_arrays.cpp	/^    const size_t  S1, S2;$/;"	m	class:Rank2	file:
Rank2::arr	./tests/test_arrays.cpp	/^    type * __restrict__ const arr;$/;"	m	class:Rank2	file:
Rank2::dim1	./tests/test_arrays.cpp	/^    size_t dim1() const { return S1; }$/;"	f	class:Rank2
Rank2::dim2	./tests/test_arrays.cpp	/^    size_t dim2() const { return S2; }$/;"	f	class:Rank2
Rank2::fetch	./tests/test_arrays.cpp	/^    type& fetch(size_t n1,size_t n2) const$/;"	f	class:Rank2
Rank2::free	./tests/test_arrays.cpp	/^    void free() {$/;"	f	class:Rank2
Rank2::operator ()	./tests/test_arrays.cpp	/^    type& operator()(size_t n1, size_t n2) const$/;"	f	class:Rank2
Rank2::~Rank2	./tests/test_arrays.cpp	/^    ~Rank2() { };$/;"	f	class:Rank2
Rank3	./tests/test_arrays.cpp	/^    Rank3(size_t s1, size_t s2, size_t s3) : S1(s1), S2(s2), S3(s3),$/;"	f	class:Rank3
Rank3	./tests/test_arrays.cpp	/^class Rank3$/;"	c	file:
Rank3::Rank3	./tests/test_arrays.cpp	/^    Rank3(size_t s1, size_t s2, size_t s3) : S1(s1), S2(s2), S3(s3),$/;"	f	class:Rank3
Rank3::S1	./tests/test_arrays.cpp	/^    const size_t S1, S2, S3;$/;"	m	class:Rank3	file:
Rank3::S2	./tests/test_arrays.cpp	/^    const size_t S1, S2, S3;$/;"	m	class:Rank3	file:
Rank3::S3	./tests/test_arrays.cpp	/^    const size_t S1, S2, S3;$/;"	m	class:Rank3	file:
Rank3::arr	./tests/test_arrays.cpp	/^    type *    const __restrict__ arr;$/;"	m	class:Rank3	file:
Rank3::dim1	./tests/test_arrays.cpp	/^    size_t dim1() const { return S1; }$/;"	f	class:Rank3
Rank3::dim2	./tests/test_arrays.cpp	/^    size_t dim2() const { return S2; }$/;"	f	class:Rank3
Rank3::dim3	./tests/test_arrays.cpp	/^    size_t dim3() const { return S3; }$/;"	f	class:Rank3
Rank3::fetch	./tests/test_arrays.cpp	/^    type& fetch(size_t n1, size_t n2, size_t n3) const$/;"	f	class:Rank3
Rank3::free	./tests/test_arrays.cpp	/^    void free() {$/;"	f	class:Rank3
Rank3::get	./tests/test_arrays.cpp	/^    const type& get(size_t n1, size_t n2, size_t n3) const$/;"	f	class:Rank3
Rank3::operator ()	./tests/test_arrays.cpp	/^    type& operator()(size_t n1, size_t n2, size_t n3) const$/;"	f	class:Rank3
Rank3::~Rank3	./tests/test_arrays.cpp	/^    ~Rank3() { }$/;"	f	class:Rank3
Rank4	./tests/test_arrays.cpp	/^    Rank4(size_t s1, size_t s2, size_t s3, size_t s4) : S1(s1), S2(s2), S3(s3), S4(s4),$/;"	f	class:Rank4
Rank4	./tests/test_arrays.cpp	/^class Rank4$/;"	c	file:
Rank4::Rank4	./tests/test_arrays.cpp	/^    Rank4(size_t s1, size_t s2, size_t s3, size_t s4) : S1(s1), S2(s2), S3(s3), S4(s4),$/;"	f	class:Rank4
Rank4::S1	./tests/test_arrays.cpp	/^    const size_t S1, S2, S3, S4;$/;"	m	class:Rank4	file:
Rank4::S2	./tests/test_arrays.cpp	/^    const size_t S1, S2, S3, S4;$/;"	m	class:Rank4	file:
Rank4::S3	./tests/test_arrays.cpp	/^    const size_t S1, S2, S3, S4;$/;"	m	class:Rank4	file:
Rank4::S4	./tests/test_arrays.cpp	/^    const size_t S1, S2, S3, S4;$/;"	m	class:Rank4	file:
Rank4::arr	./tests/test_arrays.cpp	/^    type* __restrict__ const arr;$/;"	m	class:Rank4	file:
Rank4::dim1	./tests/test_arrays.cpp	/^    size_t dim1() const { return S1; } $/;"	f	class:Rank4
Rank4::dim2	./tests/test_arrays.cpp	/^    size_t dim2() const { return S2; }$/;"	f	class:Rank4
Rank4::dim3	./tests/test_arrays.cpp	/^    size_t dim3() const { return S3; }$/;"	f	class:Rank4
Rank4::dim4	./tests/test_arrays.cpp	/^    size_t dim4() const { return S4; }$/;"	f	class:Rank4
Rank4::free	./tests/test_arrays.cpp	/^    void free() { AlignedFree(arr); }$/;"	f	class:Rank4
Rank4::operator ()	./tests/test_arrays.cpp	/^    type& operator()(size_t n1, size_t n2, size_t n3, size_t n4) const$/;"	f	class:Rank4
Rank4::~Rank4	./tests/test_arrays.cpp	/^    ~Rank4() { }$/;"	f	class:Rank4
ReadIdlAscii	./include/InterfaceFluid.h	/^  void ReadIdlAscii()$/;"	f	class:InterfaceFluid
ReadInput	./inputoutput/Collective.cpp	/^void Collective::ReadInput(string inputfile) {$/;"	f	class:Collective
ReadPHDF5dataset_double	./inputoutput/phdf5.cpp	/^void PHDF5fileClass::ReadPHDF5dataset_double(string datasetname, arr3_double data){$/;"	f	class:PHDF5fileClass
ReadPHDF5param	./inputoutput/phdf5.cpp	/^void PHDF5fileClass::ReadPHDF5param(){$/;"	f	class:PHDF5fileClass
ReadRestart	./inputoutput/Collective.cpp	/^int Collective::ReadRestart(string inputfile) {$/;"	f	class:Collective
ReadVariables	./include/InterfaceFluid.h	/^  void ReadVariables()$/;"	f	class:InterfaceFluid
Restart3D.cpp	./inputoutput/Restart3D.cpp	1;"	F
Restart3D.h	./include/Restart3D.h	1;"	F
RestartDirName	./include/Collective.h	/^    string RestartDirName;$/;"	m	class:Collective
RestartDirName	./include/EMfields3D.h	/^    string RestartDirName;$/;"	m	class:EMfields3D
RestartDirName	./include/iPic3D.h	/^    string RestartDirName;$/;"	m	class:iPic3D::c_Solver
RestartOutputCycle	./include/Collective.h	/^    int RestartOutputCycle;$/;"	m	class:Collective
RoITemp	./include/BCStructure.h	/^  double ***RoITemp;$/;"	m	struct:injInfoParticles
RotatePlaneXY	./particles/Particles3D.cpp	/^void Particles3D::RotatePlaneXY(double theta) {$/;"	f	class:Particles3D
S1	./include/Alloc.h	/^      const size_t S1;$/;"	m	class:iPic3D::array_ref1
S1	./include/Alloc.h	/^      const size_t S2,S1;$/;"	m	class:iPic3D::array_ref2
S1	./include/Alloc.h	/^      const size_t S3,S2,S1;$/;"	m	class:iPic3D::const_array_ref3
S1	./include/Alloc.h	/^      const size_t S4,S3,S2,S1;$/;"	m	class:iPic3D::const_array_ref4
S1	./include/Alloc.h	/^    const size_t S1;$/;"	m	class:iPic3D::array_fetch1
S1	./include/Alloc.h	/^    const size_t S1;$/;"	m	class:iPic3D::const_array_get1
S1	./include/Alloc.h	/^    const size_t S2, S1;$/;"	m	class:iPic3D::array_fetch2
S1	./include/Alloc.h	/^    const size_t S2, S1;$/;"	m	class:iPic3D::const_array_get2
S1	./include/Alloc.h	/^    const size_t S3, S2, S1;$/;"	m	class:iPic3D::array_fetch3
S1	./include/Alloc.h	/^    const size_t S3, S2, S1;$/;"	m	class:iPic3D::const_array_get3
S1	./tests/test_arrays.cpp	/^    const size_t  S1, S2;$/;"	m	class:Rank2	file:
S1	./tests/test_arrays.cpp	/^    const size_t S1, S2, S3, S4;$/;"	m	class:Rank4	file:
S1	./tests/test_arrays.cpp	/^    const size_t S1, S2, S3;$/;"	m	class:Rank3	file:
S1	./tests/test_arrays.cpp	/^    const size_t S1, S2;$/;"	m	class:BracketRank2	file:
S1	./tests/test_arrays.cpp	/^    const size_t S1;$/;"	m	class:BracketRank1	file:
S1	./tests/test_arrays.cpp	/^    const size_t S1;$/;"	m	class:Rank1	file:
S2	./include/Alloc.h	/^      const size_t S2,S1;$/;"	m	class:iPic3D::array_ref2
S2	./include/Alloc.h	/^      const size_t S3,S2,S1;$/;"	m	class:iPic3D::const_array_ref3
S2	./include/Alloc.h	/^      const size_t S4,S3,S2,S1;$/;"	m	class:iPic3D::const_array_ref4
S2	./include/Alloc.h	/^    const size_t S2, S1;$/;"	m	class:iPic3D::array_fetch2
S2	./include/Alloc.h	/^    const size_t S2, S1;$/;"	m	class:iPic3D::const_array_get2
S2	./include/Alloc.h	/^    const size_t S3, S2, S1;$/;"	m	class:iPic3D::array_fetch3
S2	./include/Alloc.h	/^    const size_t S3, S2, S1;$/;"	m	class:iPic3D::const_array_get3
S2	./tests/test_arrays.cpp	/^    const size_t  S1, S2;$/;"	m	class:Rank2	file:
S2	./tests/test_arrays.cpp	/^    const size_t S1, S2, S3, S4;$/;"	m	class:Rank4	file:
S2	./tests/test_arrays.cpp	/^    const size_t S1, S2, S3;$/;"	m	class:Rank3	file:
S2	./tests/test_arrays.cpp	/^    const size_t S1, S2;$/;"	m	class:BracketRank2	file:
S3	./include/Alloc.h	/^      const size_t S3,S2,S1;$/;"	m	class:iPic3D::const_array_ref3
S3	./include/Alloc.h	/^      const size_t S4,S3,S2,S1;$/;"	m	class:iPic3D::const_array_ref4
S3	./include/Alloc.h	/^    const size_t S3, S2, S1;$/;"	m	class:iPic3D::array_fetch3
S3	./include/Alloc.h	/^    const size_t S3, S2, S1;$/;"	m	class:iPic3D::const_array_get3
S3	./tests/test_arrays.cpp	/^    const size_t S1, S2, S3, S4;$/;"	m	class:Rank4	file:
S3	./tests/test_arrays.cpp	/^    const size_t S1, S2, S3;$/;"	m	class:Rank3	file:
S4	./include/Alloc.h	/^      const size_t S4,S3,S2,S1;$/;"	m	class:iPic3D::const_array_ref4
S4	./tests/test_arrays.cpp	/^    const size_t S1, S2, S3, S4;$/;"	m	class:Rank4	file:
SORTING_PARTICLES	./main/Parameters.cpp	/^static bool SORTING_PARTICLES;$/;"	v	file:
START	./tests/stopwatch.h	/^typedef enum {START, STOP, LAP, RESET} sw_action_t;$/;"	e	enum:__anon1
STARTED	./tests/stopwatch.h	/^typedef enum {OFF, STARTED, STOPPED} sw_state_t;$/;"	e	enum:__anon2
STOP	./tests/stopwatch.h	/^typedef enum {START, STOP, LAP, RESET} sw_action_t;$/;"	e	enum:__anon1
STOPPED	./tests/stopwatch.h	/^typedef enum {OFF, STARTED, STOPPED} sw_state_t;$/;"	e	enum:__anon2
SaveDirName	./include/Collective.h	/^    string SaveDirName;$/;"	m	class:Collective
SaveDirName	./include/iPic3D.h	/^    string SaveDirName;$/;"	m	class:iPic3D::c_Solver
SetDefaultGroups	./inputoutput/phdf5.cpp	/^void PHDF5fileClass::SetDefaultGroups(void){$/;"	f	class:PHDF5fileClass
SimName	./include/Collective.h	/^    string SimName;$/;"	m	class:Collective
Smooth	./include/Collective.h	/^    double Smooth;$/;"	m	class:Collective
Smooth	./include/EMfields3D.h	/^    double Smooth;$/;"	m	class:EMfields3D
SoA	./include/Particle.h	/^    SoA$/;"	e	enum:ParticleType::Type
SpeciesParticle	./include/Particle.h	/^class SpeciesParticle$/;"	c
SpeciesParticle::ID	./include/Particle.h	/^  long long ID;$/;"	m	class:SpeciesParticle
SpeciesParticle::get_ID	./include/Particle.h	/^  long long get_ID()const{ return ID; }$/;"	f	class:SpeciesParticle
SpeciesParticle::get_q	./include/Particle.h	/^  double get_q()const{ return q; }$/;"	f	class:SpeciesParticle
SpeciesParticle::get_u	./include/Particle.h	/^  double get_u()const{ return u[0]; }$/;"	f	class:SpeciesParticle
SpeciesParticle::get_u	./include/Particle.h	/^  double get_u(int i)const{ return u[i]; }$/;"	f	class:SpeciesParticle
SpeciesParticle::get_v	./include/Particle.h	/^  double get_v()const{ return u[1]; }$/;"	f	class:SpeciesParticle
SpeciesParticle::get_w	./include/Particle.h	/^  double get_w()const{ return u[2]; }$/;"	f	class:SpeciesParticle
SpeciesParticle::get_x	./include/Particle.h	/^  double get_x()const{ return x[0]; }$/;"	f	class:SpeciesParticle
SpeciesParticle::get_x	./include/Particle.h	/^  double get_x(int i)const{ return x[i]; }$/;"	f	class:SpeciesParticle
SpeciesParticle::get_y	./include/Particle.h	/^  double get_y()const{ return x[1]; }$/;"	f	class:SpeciesParticle
SpeciesParticle::get_z	./include/Particle.h	/^  double get_z()const{ return x[2]; }$/;"	f	class:SpeciesParticle
SpeciesParticle::q	./include/Particle.h	/^  double q;$/;"	m	class:SpeciesParticle
SpeciesParticle::set	./include/Particle.h	/^  void set(long long _ID,$/;"	f	class:SpeciesParticle
SpeciesParticle::set_ID	./include/Particle.h	/^  void set_ID(long long in){ ID=in; }$/;"	f	class:SpeciesParticle
SpeciesParticle::set_q	./include/Particle.h	/^  void set_q(double in) { q = in; }$/;"	f	class:SpeciesParticle
SpeciesParticle::set_u	./include/Particle.h	/^  void set_u(double in){ u[0]=in; }$/;"	f	class:SpeciesParticle
SpeciesParticle::set_u	./include/Particle.h	/^  void set_u(int i, double in) { u[i] = in; }$/;"	f	class:SpeciesParticle
SpeciesParticle::set_v	./include/Particle.h	/^  void set_v(double in){ u[1]=in; }$/;"	f	class:SpeciesParticle
SpeciesParticle::set_w	./include/Particle.h	/^  void set_w(double in){ u[2]=in; }$/;"	f	class:SpeciesParticle
SpeciesParticle::set_x	./include/Particle.h	/^  void set_x(double in){ x[0]=in; }$/;"	f	class:SpeciesParticle
SpeciesParticle::set_x	./include/Particle.h	/^  void set_x(int i, double in) { x[i] = in; }$/;"	f	class:SpeciesParticle
SpeciesParticle::set_y	./include/Particle.h	/^  void set_y(double in){ x[1]=in; }$/;"	f	class:SpeciesParticle
SpeciesParticle::set_z	./include/Particle.h	/^  void set_z(double in){ x[2]=in; }$/;"	f	class:SpeciesParticle
SpeciesParticle::u	./include/Particle.h	/^  double u[3];$/;"	m	class:SpeciesParticle
SpeciesParticle::x	./include/Particle.h	/^  double x[3];$/;"	m	class:SpeciesParticle
StartIdx_D	./include/InterfaceFluid.h	/^  int StartIdx_D[3];  \/\/ storage for starting grid indexes of this processor$/;"	m	class:InterfaceFluid
State_GV	./include/InterfaceFluid.h	/^  double ****State_GV; \/\/ cell centered state variables$/;"	m	class:InterfaceFluid
TIMING_H	./include/Timing.h	8;"	d
TIMING_PREFIX	./utility/TimeTasks.cpp	113;"	d	file:
TIMING_PREFIX	./utility/new/diagnostics.cpp	116;"	d	file:
TOTenergy	./include/iPic3D.h	/^    double TOTenergy;$/;"	m	class:iPic3D::c_Solver
TOTmomentum	./include/iPic3D.h	/^    double TOTmomentum;$/;"	m	class:iPic3D::c_Solver
TRANSPOSE_PCLS_TO_AOS	./include/TimeTasks.h	/^    TRANSPOSE_PCLS_TO_AOS,$/;"	e	enum:TimeTasks::Tasks
TRANSPOSE_PCLS_TO_SOA	./include/TimeTasks.h	/^    TRANSPOSE_PCLS_TO_SOA,$/;"	e	enum:TimeTasks::Tasks
T_as_string	./ConfigFile/src/ConfigFile.h	/^template < class T > string ConfigFile::T_as_string(const T & t) {$/;"	f	class:ConfigFile
T_as_string	./include/ConfigFile.h	/^template < class T > string ConfigFile::T_as_string(const T & t) {$/;"	f	class:ConfigFile
Tasks	./include/TimeTasks.h	/^  enum Tasks \/\/ order must agree with taskNames in TimeTasks.cpp$/;"	g	class:TimeTasks
TempString	./include/InterfaceFluid.h	/^  string TempString;$/;"	m	class:InterfaceFluid
TimeTasks	./include/TimeTasks.h	/^  TimeTasks() {$/;"	f	class:TimeTasks
TimeTasks	./include/TimeTasks.h	/^class TimeTasks$/;"	c
TimeTasks.cpp	./utility/TimeTasks.cpp	1;"	F
TimeTasks.h	./include/TimeTasks.h	1;"	F
TimeTasks::BFIELD	./include/TimeTasks.h	/^    BFIELD,$/;"	e	enum:TimeTasks::Tasks
TimeTasks::FIELDS	./include/TimeTasks.h	/^    FIELDS,$/;"	e	enum:TimeTasks::Tasks
TimeTasks::LAST	./include/TimeTasks.h	/^    LAST, \/\/ no more exclusive tasks$/;"	e	enum:TimeTasks::Tasks
TimeTasks::MOMENTS	./include/TimeTasks.h	/^    MOMENTS,$/;"	e	enum:TimeTasks::Tasks
TimeTasks::MOMENT_ACCUMULATION	./include/TimeTasks.h	/^    MOMENT_ACCUMULATION,$/;"	e	enum:TimeTasks::Tasks
TimeTasks::MOMENT_PCL_SORTING	./include/TimeTasks.h	/^    MOMENT_PCL_SORTING,$/;"	e	enum:TimeTasks::Tasks
TimeTasks::MOMENT_REDUCTION	./include/TimeTasks.h	/^    MOMENT_REDUCTION,$/;"	e	enum:TimeTasks::Tasks
TimeTasks::MOVER_PCL_MOVING	./include/TimeTasks.h	/^    MOVER_PCL_MOVING,$/;"	e	enum:TimeTasks::Tasks
TimeTasks::MOVER_PCL_SORTING	./include/TimeTasks.h	/^    MOVER_PCL_SORTING,$/;"	e	enum:TimeTasks::Tasks
TimeTasks::NONE	./include/TimeTasks.h	/^    NONE = 0,$/;"	e	enum:TimeTasks::Tasks
TimeTasks::NUMBER_OF_TASKS	./include/TimeTasks.h	/^    NUMBER_OF_TASKS \/\/ this line should be last$/;"	e	enum:TimeTasks::Tasks
TimeTasks::PARTICLES	./include/TimeTasks.h	/^    PARTICLES,$/;"	e	enum:TimeTasks::Tasks
TimeTasks::TRANSPOSE_PCLS_TO_AOS	./include/TimeTasks.h	/^    TRANSPOSE_PCLS_TO_AOS,$/;"	e	enum:TimeTasks::Tasks
TimeTasks::TRANSPOSE_PCLS_TO_SOA	./include/TimeTasks.h	/^    TRANSPOSE_PCLS_TO_SOA,$/;"	e	enum:TimeTasks::Tasks
TimeTasks::Tasks	./include/TimeTasks.h	/^  enum Tasks \/\/ order must agree with taskNames in TimeTasks.cpp$/;"	g	class:TimeTasks
TimeTasks::TimeTasks	./include/TimeTasks.h	/^  TimeTasks() {$/;"	f	class:TimeTasks
TimeTasks::active	./include/TimeTasks.h	/^  bool active[NUMBER_OF_TASKS];$/;"	m	class:TimeTasks
TimeTasks::active_task	./include/TimeTasks.h	/^  int active_task;$/;"	m	class:TimeTasks
TimeTasks::addto_communicate	./utility/new/diagnostics.cpp	/^void TimeTasks::addto_communicate()$/;"	f	class:TimeTasks
TimeTasks::communicate	./include/TimeTasks.h	/^  double communicate[NUMBER_OF_TASKS];$/;"	m	class:TimeTasks
TimeTasks::communicating	./include/TimeTasks.h	/^  bool communicating;$/;"	m	class:TimeTasks
TimeTasks::end	./utility/new/diagnostics.cpp	/^void TimeTasks::end(int taskid)$/;"	f	class:TimeTasks
TimeTasks::end_communicating	./utility/TimeTasks.cpp	/^void TimeTasks::end_communicating(double start_time)$/;"	f	class:TimeTasks
TimeTasks::end_main_task	./utility/TimeTasks.cpp	/^void TimeTasks::end_main_task(TimeTasks::Tasks taskid, double start_time)$/;"	f	class:TimeTasks
TimeTasks::end_task	./utility/TimeTasks.cpp	/^void TimeTasks::end_task(TimeTasks::Tasks taskid)$/;"	f	class:TimeTasks
TimeTasks::end_task	./utility/TimeTasks.cpp	/^void TimeTasks::end_task(TimeTasks::Tasks taskid, double start_time)$/;"	f	class:TimeTasks
TimeTasks::get_communicate	./include/TimeTasks.h	/^  double get_communicate(int arg) {$/;"	f	class:TimeTasks
TimeTasks::get_communicating	./include/TimeTasks.h	/^  bool get_communicating() { return communicating; }$/;"	f	class:TimeTasks
TimeTasks::get_compute	./include/TimeTasks.h	/^  double get_compute(int arg) {$/;"	f	class:TimeTasks
TimeTasks::get_stack_depth	./include/TimeTasks.h	/^  int get_stack_depth(TimeTasks::Tasks taskid) { return stack_depth[taskid]; }$/;"	f	class:TimeTasks
TimeTasks::get_taskname	./utility/TimeTasks.cpp	/^const char* TimeTasks::get_taskname(int arg)$/;"	f	class:TimeTasks
TimeTasks::get_time	./include/TimeTasks.h	/^  double get_time(int arg) {$/;"	f	class:TimeTasks
TimeTasks::is_active	./include/TimeTasks.h	/^  bool is_active(Tasks taskid){ return active[taskid]; }$/;"	f	class:TimeTasks
TimeTasks::is_exclusive	./include/TimeTasks.h	/^  bool is_exclusive(Tasks taskid) { return (taskid < LAST); }$/;"	f	class:TimeTasks
TimeTasks::operator +=	./utility/TimeTasks.cpp	/^void TimeTasks::operator+=(const TimeTasks& arg)$/;"	f	class:TimeTasks
TimeTasks::operator /=	./utility/TimeTasks.cpp	/^void TimeTasks::operator\/=(int num)$/;"	f	class:TimeTasks
TimeTasks::operator =	./utility/TimeTasks.cpp	/^void TimeTasks::operator=(const TimeTasks& arg)$/;"	f	class:TimeTasks
TimeTasks::print_cycle_times	./utility/TimeTasks.cpp	/^void TimeTasks::print_cycle_times(int cycle)$/;"	f	class:TimeTasks
TimeTasks::print_cycle_times	./utility/new/diagnostics.cpp	/^void TimeTasks::print_cycle_times()$/;"	f	class:TimeTasks
TimeTasks::resetCycle	./utility/TimeTasks.cpp	/^void TimeTasks::resetCycle()$/;"	f	class:TimeTasks
TimeTasks::resetCycle	./utility/new/diagnostics.cpp	/^void TimeTasks::resetCycle()$/;"	f	class:TimeTasks
TimeTasks::set_communicating	./include/TimeTasks.h	/^  void set_communicating(bool val) { communicating = val; }$/;"	f	class:TimeTasks
TimeTasks::stack_depth	./include/TimeTasks.h	/^  int stack_depth[NUMBER_OF_TASKS];$/;"	m	class:TimeTasks
TimeTasks::start	./utility/new/diagnostics.cpp	/^void TimeTasks::start(int taskid)$/;"	f	class:TimeTasks
TimeTasks::start_communicate	./utility/new/diagnostics.cpp	/^void TimeTasks::start_communicate()$/;"	f	class:TimeTasks
TimeTasks::start_main_task	./utility/TimeTasks.cpp	/^void TimeTasks::start_main_task(TimeTasks::Tasks taskid)$/;"	f	class:TimeTasks
TimeTasks::start_task	./utility/TimeTasks.cpp	/^void TimeTasks::start_task(TimeTasks::Tasks taskid)$/;"	f	class:TimeTasks
TimeTasks::start_task	./utility/TimeTasks.cpp	/^void TimeTasks::start_task(TimeTasks::Tasks taskid, double start_time)$/;"	f	class:TimeTasks
TimeTasks::start_times	./include/TimeTasks.h	/^  double start_times[NUMBER_OF_TASKS];$/;"	m	class:TimeTasks
TimeTasks::task_duration	./include/TimeTasks.h	/^  double task_duration[NUMBER_OF_TASKS];$/;"	m	class:TimeTasks
TimeTasks_caller_to_set_communication_mode_for_scope	./include/TimeTasks.h	/^class TimeTasks_caller_to_set_communication_mode_for_scope$/;"	c
TimeTasks_caller_to_set_communication_mode_for_scope	./utility/TimeTasks.cpp	/^TimeTasks_caller_to_set_communication_mode_for_scope()$/;"	f	class:TimeTasks_caller_to_set_communication_mode_for_scope
TimeTasks_caller_to_set_communication_mode_for_scope::TimeTasks_caller_to_set_communication_mode_for_scope	./utility/TimeTasks.cpp	/^TimeTasks_caller_to_set_communication_mode_for_scope()$/;"	f	class:TimeTasks_caller_to_set_communication_mode_for_scope
TimeTasks_caller_to_set_communication_mode_for_scope::already_communicating	./include/TimeTasks.h	/^  bool already_communicating;$/;"	m	class:TimeTasks_caller_to_set_communication_mode_for_scope
TimeTasks_caller_to_set_communication_mode_for_scope::start_time	./include/TimeTasks.h	/^  double start_time;$/;"	m	class:TimeTasks_caller_to_set_communication_mode_for_scope
TimeTasks_caller_to_set_communication_mode_for_scope::~TimeTasks_caller_to_set_communication_mode_for_scope	./utility/TimeTasks.cpp	/^~TimeTasks_caller_to_set_communication_mode_for_scope()$/;"	f	class:TimeTasks_caller_to_set_communication_mode_for_scope
TimeTasks_caller_to_set_main_task_for_scope	./include/TimeTasks.h	/^class TimeTasks_caller_to_set_main_task_for_scope$/;"	c
TimeTasks_caller_to_set_main_task_for_scope	./utility/TimeTasks.cpp	/^TimeTasks_caller_to_set_main_task_for_scope(TimeTasks::Tasks _task) :$/;"	f	class:TimeTasks_caller_to_set_main_task_for_scope
TimeTasks_caller_to_set_main_task_for_scope::TimeTasks_caller_to_set_main_task_for_scope	./utility/TimeTasks.cpp	/^TimeTasks_caller_to_set_main_task_for_scope(TimeTasks::Tasks _task) :$/;"	f	class:TimeTasks_caller_to_set_main_task_for_scope
TimeTasks_caller_to_set_main_task_for_scope::start_time	./include/TimeTasks.h	/^  double start_time;$/;"	m	class:TimeTasks_caller_to_set_main_task_for_scope
TimeTasks_caller_to_set_main_task_for_scope::task	./include/TimeTasks.h	/^  TimeTasks::Tasks task;$/;"	m	class:TimeTasks_caller_to_set_main_task_for_scope
TimeTasks_caller_to_set_main_task_for_scope::~TimeTasks_caller_to_set_main_task_for_scope	./utility/TimeTasks.cpp	/^~TimeTasks_caller_to_set_main_task_for_scope()$/;"	f	class:TimeTasks_caller_to_set_main_task_for_scope
TimeTasks_caller_to_set_task_for_scope	./include/TimeTasks.h	/^class TimeTasks_caller_to_set_task_for_scope$/;"	c
TimeTasks_caller_to_set_task_for_scope	./utility/TimeTasks.cpp	/^TimeTasks_caller_to_set_task_for_scope(TimeTasks::Tasks _task)$/;"	f	class:TimeTasks_caller_to_set_task_for_scope
TimeTasks_caller_to_set_task_for_scope::TimeTasks_caller_to_set_task_for_scope	./utility/TimeTasks.cpp	/^TimeTasks_caller_to_set_task_for_scope(TimeTasks::Tasks _task)$/;"	f	class:TimeTasks_caller_to_set_task_for_scope
TimeTasks_caller_to_set_task_for_scope::already_active	./include/TimeTasks.h	/^  bool already_active;$/;"	m	class:TimeTasks_caller_to_set_task_for_scope
TimeTasks_caller_to_set_task_for_scope::start_time	./include/TimeTasks.h	/^  double start_time;$/;"	m	class:TimeTasks_caller_to_set_task_for_scope
TimeTasks_caller_to_set_task_for_scope::task	./include/TimeTasks.h	/^  TimeTasks::Tasks task;$/;"	m	class:TimeTasks_caller_to_set_task_for_scope
TimeTasks_caller_to_set_task_for_scope::~TimeTasks_caller_to_set_task_for_scope	./utility/TimeTasks.cpp	/^~TimeTasks_caller_to_set_task_for_scope()$/;"	f	class:TimeTasks_caller_to_set_task_for_scope
Timing	./include/Timing.h	/^class Timing {$/;"	c
Timing	./performances/Timing.cpp	/^Timing::Timing() {$/;"	f	class:Timing
Timing	./performances/Timing.cpp	/^Timing::Timing(int my_rank) {$/;"	f	class:Timing
Timing.cpp	./performances/Timing.cpp	1;"	F
Timing.h	./include/Timing.h	1;"	F
Timing::Print	./performances/Timing.cpp	/^void Timing::Print() {$/;"	f	class:Timing
Timing::Print_OnAir	./performances/Timing.cpp	/^void Timing::Print_OnAir() {$/;"	f	class:Timing
Timing::Timing	./performances/Timing.cpp	/^Timing::Timing() {$/;"	f	class:Timing
Timing::Timing	./performances/Timing.cpp	/^Timing::Timing(int my_rank) {$/;"	f	class:Timing
Timing::event1a	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
Timing::event1b	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
Timing::event2a	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
Timing::event2b	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
Timing::event3a	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
Timing::event3b	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
Timing::event4a	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
Timing::event4b	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
Timing::getExecutionTime	./performances/Timing.cpp	/^double Timing::getExecutionTime() {$/;"	f	class:Timing
Timing::rank_id	./include/Timing.h	/^  int rank_id;$/;"	m	class:Timing
Timing::startTiming	./performances/Timing.cpp	/^void Timing::startTiming() {$/;"	f	class:Timing
Timing::start_field	./performances/Timing.cpp	/^void Timing::start_field() {$/;"	f	class:Timing
Timing::start_interpP2G	./performances/Timing.cpp	/^void Timing::start_interpP2G() {$/;"	f	class:Timing
Timing::start_mover	./performances/Timing.cpp	/^void Timing::start_mover() {$/;"	f	class:Timing
Timing::stopTiming	./performances/Timing.cpp	/^void Timing::stopTiming() {$/;"	f	class:Timing
Timing::stop_field	./performances/Timing.cpp	/^void Timing::stop_field() {$/;"	f	class:Timing
Timing::stop_interpP2G	./performances/Timing.cpp	/^void Timing::stop_interpP2G() {$/;"	f	class:Timing
Timing::stop_mover	./performances/Timing.cpp	/^void Timing::stop_mover() {$/;"	f	class:Timing
Timing::tend	./include/Timing.h	/^  double tend;$/;"	m	class:Timing
Timing::texecution	./include/Timing.h	/^  double texecution;$/;"	m	class:Timing
Timing::tstart	./include/Timing.h	/^  double tstart;$/;"	m	class:Timing
Timing::ttick	./include/Timing.h	/^  double ttick;$/;"	m	class:Timing
TrackParticleID	./include/Collective.h	/^    bool *TrackParticleID;$/;"	m	class:Collective
TrackParticleID	./include/Particles3Dcomm.h	/^  bool TrackParticleID;$/;"	m	class:Particles3Dcomm
TransArraySpace3D.h	./include/TransArraySpace3D.h	1;"	F
TransArraySpace3D_H	./include/TransArraySpace3D.h	11;"	d
Type	./include/Particle.h	/^  enum Type$/;"	g	namespace:ParticleType
USE_GCC_OPTIMIZATION	./include/asserts.h	51;"	d
USING_OMP	./include/ipicdefs.h	5;"	d
VCtopology3D	./communication/VCtopology3D.cpp	/^VCtopology3D::VCtopology3D(const Collective& col) {$/;"	f	class:VCtopology3D
VCtopology3D	./include/VCtopology3D.h	/^class VCtopology3D:public VirtualTopology3D {$/;"	c
VCtopology3D.cpp	./communication/VCtopology3D.cpp	1;"	F
VCtopology3D.h	./include/VCtopology3D.h	1;"	F
VCtopology3D::CART_COMM	./include/VCtopology3D.h	/^  MPI_Comm CART_COMM;$/;"	m	class:VCtopology3D
VCtopology3D::CART_COMM_P	./include/VCtopology3D.h	/^  MPI_Comm CART_COMM_P;$/;"	m	class:VCtopology3D
VCtopology3D::LEFT	./include/VCtopology3D.h	/^  int LEFT;$/;"	m	class:VCtopology3D
VCtopology3D::PERIODICX	./include/VCtopology3D.h	/^  bool PERIODICX;$/;"	m	class:VCtopology3D
VCtopology3D::PERIODICX_P	./include/VCtopology3D.h	/^  bool PERIODICX_P;$/;"	m	class:VCtopology3D
VCtopology3D::PERIODICY	./include/VCtopology3D.h	/^  bool PERIODICY;$/;"	m	class:VCtopology3D
VCtopology3D::PERIODICY_P	./include/VCtopology3D.h	/^  bool PERIODICY_P;$/;"	m	class:VCtopology3D
VCtopology3D::PERIODICZ	./include/VCtopology3D.h	/^  bool PERIODICZ;$/;"	m	class:VCtopology3D
VCtopology3D::PERIODICZ_P	./include/VCtopology3D.h	/^  bool PERIODICZ_P;$/;"	m	class:VCtopology3D
VCtopology3D::PROCDIM	./include/VCtopology3D.h	/^  int PROCDIM;$/;"	m	class:VCtopology3D
VCtopology3D::Print	./communication/VCtopology3D.cpp	/^void VCtopology3D::Print() {$/;"	f	class:VCtopology3D
VCtopology3D::PrintMapping	./communication/VCtopology3D.cpp	/^void VCtopology3D::PrintMapping() {$/;"	f	class:VCtopology3D
VCtopology3D::RIGHT	./include/VCtopology3D.h	/^  int RIGHT;$/;"	m	class:VCtopology3D
VCtopology3D::VCtopology3D	./communication/VCtopology3D.cpp	/^VCtopology3D::VCtopology3D(const Collective& col) {$/;"	f	class:VCtopology3D
VCtopology3D::XDIR	./include/VCtopology3D.h	/^  int XDIR;$/;"	m	class:VCtopology3D
VCtopology3D::XLEN	./include/VCtopology3D.h	/^  int XLEN;$/;"	m	class:VCtopology3D
VCtopology3D::YDIR	./include/VCtopology3D.h	/^  int YDIR;$/;"	m	class:VCtopology3D
VCtopology3D::YLEN	./include/VCtopology3D.h	/^  int YLEN;$/;"	m	class:VCtopology3D
VCtopology3D::ZDIR	./include/VCtopology3D.h	/^  int ZDIR;$/;"	m	class:VCtopology3D
VCtopology3D::ZLEN	./include/VCtopology3D.h	/^  int ZLEN;$/;"	m	class:VCtopology3D
VCtopology3D::cVERBOSE	./include/VCtopology3D.h	/^  bool cVERBOSE;$/;"	m	class:VCtopology3D
VCtopology3D::cartesian_rank	./include/VCtopology3D.h	/^  int cartesian_rank;$/;"	m	class:VCtopology3D
VCtopology3D::coordinates	./include/VCtopology3D.h	/^  int coordinates[3];$/;"	m	class:VCtopology3D
VCtopology3D::divisions	./include/VCtopology3D.h	/^  int divisions[3];$/;"	m	class:VCtopology3D
VCtopology3D::getCartesian_rank	./include/VCtopology3D.h	/^  int getCartesian_rank() { return (cartesian_rank); }$/;"	f	class:VCtopology3D
VCtopology3D::getComm	./include/VCtopology3D.h	/^  MPI_Comm getComm(){ return (CART_COMM); }$/;"	f	class:VCtopology3D
VCtopology3D::getCoordinates	./include/VCtopology3D.h	/^  int *getCoordinates() { return (coordinates); }$/;"	f	class:VCtopology3D
VCtopology3D::getCoordinates	./include/VCtopology3D.h	/^  int getCoordinates(int dir) { return (coordinates[dir]); }$/;"	f	class:VCtopology3D
VCtopology3D::getNprocs	./include/VCtopology3D.h	/^  int getNprocs() { return (nprocs); }$/;"	f	class:VCtopology3D
VCtopology3D::getPERIODICX	./include/VCtopology3D.h	/^  bool getPERIODICX() { return (PERIODICX); }$/;"	f	class:VCtopology3D
VCtopology3D::getPERIODICY	./include/VCtopology3D.h	/^  bool getPERIODICY() { return (PERIODICY); }$/;"	f	class:VCtopology3D
VCtopology3D::getPERIODICZ	./include/VCtopology3D.h	/^  bool getPERIODICZ() { return (PERIODICZ); }$/;"	f	class:VCtopology3D
VCtopology3D::getPeriods	./include/VCtopology3D.h	/^  int getPeriods(int dir) { return (periods[dir]); }$/;"	f	class:VCtopology3D
VCtopology3D::getXLEN	./include/VCtopology3D.h	/^  int getXLEN() { return (XLEN); }$/;"	f	class:VCtopology3D
VCtopology3D::getXleft_neighbor	./include/VCtopology3D.h	/^  int getXleft_neighbor() { return (xleft_neighbor); }$/;"	f	class:VCtopology3D
VCtopology3D::getXleft_neighbor_P	./include/VCtopology3D.h	/^  int getXleft_neighbor_P() { return (xleft_neighbor_P); }$/;"	f	class:VCtopology3D
VCtopology3D::getXright_neighbor	./include/VCtopology3D.h	/^  int getXright_neighbor() { return (xright_neighbor); }$/;"	f	class:VCtopology3D
VCtopology3D::getXright_neighbor_P	./include/VCtopology3D.h	/^  int getXright_neighbor_P() { return (xright_neighbor_P); }$/;"	f	class:VCtopology3D
VCtopology3D::getYLEN	./include/VCtopology3D.h	/^  int getYLEN() { return (YLEN); }$/;"	f	class:VCtopology3D
VCtopology3D::getYleft_neighbor	./include/VCtopology3D.h	/^  int getYleft_neighbor() { return (yleft_neighbor); }$/;"	f	class:VCtopology3D
VCtopology3D::getYleft_neighbor_P	./include/VCtopology3D.h	/^  int getYleft_neighbor_P() { return (yleft_neighbor_P); }$/;"	f	class:VCtopology3D
VCtopology3D::getYright_neighbor	./include/VCtopology3D.h	/^  int getYright_neighbor() { return (yright_neighbor); }$/;"	f	class:VCtopology3D
VCtopology3D::getYright_neighbor_P	./include/VCtopology3D.h	/^  int getYright_neighbor_P() { return (yright_neighbor_P); }$/;"	f	class:VCtopology3D
VCtopology3D::getZLEN	./include/VCtopology3D.h	/^  int getZLEN() { return (ZLEN); }$/;"	f	class:VCtopology3D
VCtopology3D::getZleft_neighbor	./include/VCtopology3D.h	/^  int getZleft_neighbor() { return (zleft_neighbor); }$/;"	f	class:VCtopology3D
VCtopology3D::getZleft_neighbor_P	./include/VCtopology3D.h	/^  int getZleft_neighbor_P() { return (zleft_neighbor_P); }$/;"	f	class:VCtopology3D
VCtopology3D::getZright_neighbor	./include/VCtopology3D.h	/^  int getZright_neighbor() { return (zright_neighbor); }$/;"	f	class:VCtopology3D
VCtopology3D::getZright_neighbor_P	./include/VCtopology3D.h	/^  int getZright_neighbor_P() { return (zright_neighbor_P); }$/;"	f	class:VCtopology3D
VCtopology3D::getcVERBOSE	./include/VCtopology3D.h	/^  bool getcVERBOSE() { return (cVERBOSE); }$/;"	f	class:VCtopology3D
VCtopology3D::nprocs	./include/VCtopology3D.h	/^  int nprocs;$/;"	m	class:VCtopology3D
VCtopology3D::periods	./include/VCtopology3D.h	/^  int periods[3];$/;"	m	class:VCtopology3D
VCtopology3D::periods_P	./include/VCtopology3D.h	/^  int periods_P[3];$/;"	m	class:VCtopology3D
VCtopology3D::reorder	./include/VCtopology3D.h	/^  int reorder;$/;"	m	class:VCtopology3D
VCtopology3D::setup_vctopology	./communication/VCtopology3D.cpp	/^void VCtopology3D::setup_vctopology(MPI_Comm old_comm) {$/;"	f	class:VCtopology3D
VCtopology3D::status	./include/VCtopology3D.h	/^  MPI_Status status;$/;"	m	class:VCtopology3D
VCtopology3D::xleft_neighbor	./include/VCtopology3D.h	/^  int xleft_neighbor;$/;"	m	class:VCtopology3D
VCtopology3D::xleft_neighbor_P	./include/VCtopology3D.h	/^  int xleft_neighbor_P;$/;"	m	class:VCtopology3D
VCtopology3D::xright_neighbor	./include/VCtopology3D.h	/^  int xright_neighbor;$/;"	m	class:VCtopology3D
VCtopology3D::xright_neighbor_P	./include/VCtopology3D.h	/^  int xright_neighbor_P;$/;"	m	class:VCtopology3D
VCtopology3D::yleft_neighbor	./include/VCtopology3D.h	/^  int yleft_neighbor;$/;"	m	class:VCtopology3D
VCtopology3D::yleft_neighbor_P	./include/VCtopology3D.h	/^  int yleft_neighbor_P;$/;"	m	class:VCtopology3D
VCtopology3D::yright_neighbor	./include/VCtopology3D.h	/^  int yright_neighbor;$/;"	m	class:VCtopology3D
VCtopology3D::yright_neighbor_P	./include/VCtopology3D.h	/^  int yright_neighbor_P;$/;"	m	class:VCtopology3D
VCtopology3D::zleft_neighbor	./include/VCtopology3D.h	/^  int zleft_neighbor;$/;"	m	class:VCtopology3D
VCtopology3D::zleft_neighbor_P	./include/VCtopology3D.h	/^  int zleft_neighbor_P;$/;"	m	class:VCtopology3D
VCtopology3D::zright_neighbor	./include/VCtopology3D.h	/^  int zright_neighbor;$/;"	m	class:VCtopology3D
VCtopology3D::zright_neighbor_P	./include/VCtopology3D.h	/^  int zright_neighbor_P;$/;"	m	class:VCtopology3D
VCtopology3D::~VCtopology3D	./communication/VCtopology3D.cpp	/^VCtopology3D::~VCtopology3D() {$/;"	f	class:VCtopology3D
VCtopology3D_H	./include/VCtopology3D.h	15;"	d
VECTOR_WIDTH	./include/ipicdefs.h	19;"	d
VECTOR_WIDTH	./include/ipicdefs.h	21;"	d
VECTOR_WIDTH	./include/ipicdefs.h	25;"	d
VECTOR_WIDTH	./include/ipicdefs.h	27;"	d
Vinj	./include/Collective.h	/^    double Vinj;$/;"	m	class:Collective
Vinj	./include/Particles3Dcomm.h	/^  double Vinj;$/;"	m	class:Particles3Dcomm
VirtualTopology3D	./include/VirtualTopology3D.h	/^class VirtualTopology3D {$/;"	c
VirtualTopology3D.h	./include/VirtualTopology3D.h	1;"	F
VirtualTopology3D_H	./include/VirtualTopology3D.h	10;"	d
VthxITemp	./include/BCStructure.h	/^  double ***VthxITemp;$/;"	m	struct:injInfoParticles
VthyITemp	./include/BCStructure.h	/^  double ***VthyITemp;$/;"	m	struct:injInfoParticles
VthzITemp	./include/BCStructure.h	/^  double ***VthzITemp;$/;"	m	struct:injInfoParticles
VxITemp	./include/BCStructure.h	/^  double ***VxITemp;$/;"	m	struct:injInfoParticles
VyITemp	./include/BCStructure.h	/^  double ***VyITemp;$/;"	m	struct:injInfoParticles
VzITemp	./include/BCStructure.h	/^  double ***VzITemp;$/;"	m	struct:injInfoParticles
WriteConserved	./main/iPic3Dlib.cpp	/^void c_Solver::WriteConserved(int cycle) {$/;"	f	class:c_Solver
WriteOutput	./main/iPic3Dlib.cpp	/^void c_Solver::WriteOutput(int cycle) {$/;"	f	class:c_Solver
WriteOutputParallel	./inputoutput/WriteOutputParallel.cpp	/^void WriteOutputParallel(Grid3DCU *grid, EMfields3D *EMf, CollectiveIO *col, VCtopology3D *vct, int cycle){$/;"	f
WriteOutputParallel.cpp	./inputoutput/WriteOutputParallel.cpp	1;"	F
WriteOutputParallel.h	./include/WriteOutputParallel.h	1;"	F
WritePHDF5dataset	./inputoutput/phdf5.cpp	/^int PHDF5fileClass::WritePHDF5dataset(string grpname, string datasetname, const_arr3_double data, int nx, int ny, int nz){$/;"	f	class:PHDF5fileClass
WriteRestart	./main/iPic3Dlib.cpp	/^void c_Solver::WriteRestart(int cycle) {$/;"	f	class:c_Solver
XDIR	./include/VCtopology3D.h	/^  int XDIR;$/;"	m	class:VCtopology3D
XLEN	./include/Collective.h	/^    int XLEN;$/;"	m	class:Collective
XLEN	./include/VCtopology3D.h	/^  int XLEN;$/;"	m	class:VCtopology3D
XYZ_D	./include/InterfaceFluid.h	/^  double XYZ_D[3];  \/\/ physical size of the passed domain$/;"	m	class:InterfaceFluid
XYZ_block	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var-2D/user_inputs_block_single_var_2D.h	/^    string XYZ_block = "XY";                \/\/ dimension to scan for satellites$/;"	v
XYZ_block	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var/user_inputs_block_single_var.h	/^    string XYZ_block = "XY";                \/\/ dimension to scan for satellites$/;"	v
XYZ_block	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block/user_inputs_block.h	/^    string XYZ_block = "XY";                \/\/ dimension to scan for satellites$/;"	v
YDIR	./include/VCtopology3D.h	/^  int YDIR;$/;"	m	class:VCtopology3D
YLEN	./include/Collective.h	/^    int YLEN;$/;"	m	class:Collective
YLEN	./include/VCtopology3D.h	/^  int YLEN;$/;"	m	class:VCtopology3D
ZDIR	./include/VCtopology3D.h	/^  int ZDIR;$/;"	m	class:VCtopology3D
ZLEN	./include/Collective.h	/^    int ZLEN;$/;"	m	class:Collective
ZLEN	./include/VCtopology3D.h	/^  int ZLEN;$/;"	m	class:VCtopology3D
_IPIC3D_H_	./include/iPic3D.h	7;"	d
_PSK_EXCEPTION_H_	./include/PSKException.h	5;"	d
_PSK_HDF5_ADAPTOR_H_	./include/PSKhdf5adaptor.h	4;"	d
_PSK_OUTPUT_H_	./include/PSKOutput.h	7;"	d
_Parameters_h_	./include/Parameters.h	2;"	d
_Particle_	./include/Particle.h	2;"	d
_RESTART3D_H_	./include/Restart3D.h	3;"	d
__ASSERTS_H__	./include/asserts.h	2;"	d
__DEBUG_H__	./include/debug.h	5;"	d
__IPIC_DEFS_H__	./include/ipicdefs.h	2;"	d
__PHDF5_H__	./include/phdf5.h	3;"	d
__TimeTasks_H__	./include/TimeTasks.h	2;"	d
__WOPARALLEL_H__	./include/WriteOutputParallel.h	3;"	d
__anon3::last	./tests/stopwatch.h	/^   struct timeval total, now, last;$/;"	m	struct:__anon3	typeref:struct:__anon3::
__anon3::now	./tests/stopwatch.h	/^   struct timeval total, now, last;$/;"	m	struct:__anon3	typeref:struct:__anon3::
__anon3::state	./tests/stopwatch.h	/^   sw_state_t state;$/;"	m	struct:__anon3
__anon3::total	./tests/stopwatch.h	/^   struct timeval total, now, last;$/;"	m	struct:__anon3	typeref:struct:__anon3::timeval
__ipic3d_sys_h__	./include/ipicsys.h	2;"	d
_can_recover	./include/PSKException.h	/^      bool _can_recover;          \/\/ \/< Flag indicating recovery possible$/;"	m	class:PSK::Exception
_col	./include/PSKOutput.h	/^  Collective *_col;$/;"	m	class:myOutputAgent
_dimens	./include/PSKOutput.h	/^    std::vector < int >_dimens;$/;"	m	class:PSK::Dimens
_err_msgs	./include/PSKException.h	/^      std::vector < std::string > _err_msgs;  \/\/ \/< stack of associated messages$/;"	m	class:PSK::Exception
_err_str	./include/PSKException.h	/^      std::string _err_str;       \/\/ \/< Exception error message string$/;"	m	class:PSK::Exception
_field	./include/PSKOutput.h	/^  Field *_field;$/;"	m	class:myOutputAgent
_fn_str	./include/PSKException.h	/^      std::string _fn_str;        \/\/ \/< Function name throwing exception$/;"	m	class:PSK::Exception
_grid	./include/PSKOutput.h	/^  Grid *_grid;$/;"	m	class:myOutputAgent
_hdf5_file_id	./include/PSKhdf5adaptor.h	/^    hid_t _hdf5_file_id;$/;"	m	class:PSK::HDF5OutputAdaptor
_hdf5_file_name	./include/PSKhdf5adaptor.h	/^    std::string _hdf5_file_name;$/;"	m	class:PSK::HDF5OutputAdaptor
_ipicmath_h_	./include/ipicmath.h	2;"	d
_mpi	./include/PSKOutput.h	/^  MPIdata *_mpi;$/;"	m	class:myOutputAgent
_n1	./include/arrays.h	/^  FixedArray3D1(type (&_arr)[s1][s2][s3], size_t _n1, size_t _n2) :$/;"	m	class:FixedArray3D1
_n1	./include/arrays.h	/^  FixedArray4D1(type(&_arr)[s1][s2][s3][s4],size_t _n1,size_t _n2,size_t _n3):$/;"	m	class:FixedArray4D1
_n1	./include/arrays.h	/^  FixedArray4D2(type (&_arr)[s1][s2][s3][s4], size_t _n1, size_t _n2) :$/;"	m	class:FixedArray4D2
_n2	./include/arrays.h	/^  FixedArray4D1(type(&_arr)[s1][s2][s3][s4],size_t _n1,size_t _n2,size_t _n3):$/;"	m	class:FixedArray4D1
_parallel_h_	./include/parallel.h	2;"	d
_part	./include/PSKOutput.h	/^  std::vector < Particles * >_part;$/;"	m	class:myOutputAgent
_sys_err_str	./include/PSKException.h	/^      std::string _sys_err_str; \/\/ \/< system error message from bad system call$/;"	m	class:PSK::Exception
_sys_errno	./include/PSKException.h	/^      int _sys_errno;             \/\/ \/< system error number from bad system call$/;"	m	class:PSK::Exception
_type_str	./include/PSKException.h	/^      std::string _type_str;      \/\/ \/< Exception type string, including inheritance$/;"	m	class:PSK::Exception
_vct	./include/PSKOutput.h	/^  VCtopology3D *_vct;$/;"	m	class:myOutputAgent
a	./include/input_array.h	/^  bool a, b, c, d, e, f;$/;"	m	struct:array_bool
a	./include/input_array.h	/^  double a, b, c, d, e, f;$/;"	m	struct:array_double
a	./include/input_array.h	/^  int a, b, c, d, e, f;$/;"	m	struct:array_int
active	./include/TimeTasks.h	/^  bool active[NUMBER_OF_TASKS];$/;"	m	class:TimeTasks
active_task	./include/TimeTasks.h	/^  int active_task;$/;"	m	class:TimeTasks
add	./ConfigFile/src/ConfigFile.h	/^template < class T > void ConfigFile::add(string key, const T & value) {$/;"	f	class:ConfigFile
add	./include/ConfigFile.h	/^template < class T > void ConfigFile::add(string key, const T & value) {$/;"	f	class:ConfigFile
addCorner	./communication/ComParser3D.cpp	/^void addCorner(int nx, int ny, int nz, double ****vector, int ns, double *ghostXrightYrightZrightCorner, double *ghostXleftYrightZrightCorner, double *ghostXrightYleftZrightCorner, double *ghostXleftYleftZrightCorner, double *ghostXrightYrightZleftCorner, double *ghostXleftYrightZleftCorner, double *ghostXrightYleftZleftCorner, double *ghostXleftYleftZleftCorner, VirtualTopology3D * vct) {$/;"	f
addCorner	./communication/ComParser3D.cpp	/^void addCorner(int nx, int ny, int nz, double ***vector, double *ghostXrightYrightZrightCorner, double *ghostXleftYrightZrightCorner, double *ghostXrightYleftZrightCorner, double *ghostXleftYleftZrightCorner, double *ghostXrightYrightZleftCorner, double *ghostXleftYrightZleftCorner, double *ghostXrightYleftZleftCorner, double *ghostXleftYleftZleftCorner, VirtualTopology3D * vct) {$/;"	f
addEdgeX	./communication/ComParser3D.cpp	/^void addEdgeX(int nx, int ny, int nz, double ****vector, int ns, double *ghostXsameYrightZrightEdge, double *ghostXsameYleftZleftEdge, double *ghostXsameYleftZrightEdge, double *ghostXsameYrightZleftEdge, VirtualTopology3D * vct) {$/;"	f
addEdgeX	./communication/ComParser3D.cpp	/^void addEdgeX(int nx, int ny, int nz, double ***vector, double *ghostXsameYrightZrightEdge, double *ghostXsameYleftZleftEdge, double *ghostXsameYleftZrightEdge, double *ghostXsameYrightZleftEdge, VirtualTopology3D * vct) {$/;"	f
addEdgeY	./communication/ComParser3D.cpp	/^void addEdgeY(int nx, int ny, int nz, double ****vector, int ns, double *ghostXrightYsameZrightEdge, double *ghostXleftYsameZleftEdge, double *ghostXleftYsameZrightEdge, double *ghostXrightYsameZleftEdge, VirtualTopology3D * vct) {$/;"	f
addEdgeY	./communication/ComParser3D.cpp	/^void addEdgeY(int nx, int ny, int nz, double ***vector, double *ghostXrightYsameZrightEdge, double *ghostXleftYsameZleftEdge, double *ghostXleftYsameZrightEdge, double *ghostXrightYsameZleftEdge, VirtualTopology3D * vct) {$/;"	f
addEdgeZ	./communication/ComParser3D.cpp	/^void addEdgeZ(int nx, int ny, int nz, double ****vector, int ns, double *ghostXrightYrightZsameEdge, double *ghostXleftYleftZsameEdge, double *ghostXrightYleftZsameEdge, double *ghostXleftYrightZsameEdge, VirtualTopology3D * vct) {$/;"	f
addEdgeZ	./communication/ComParser3D.cpp	/^void addEdgeZ(int nx, int ny, int nz, double ***vector, double *ghostXrightYrightZsameEdge, double *ghostXleftYleftZsameEdge, double *ghostXrightYleftZsameEdge, double *ghostXleftYrightZsameEdge, VirtualTopology3D * vct) {$/;"	f
addFace	./communication/ComParser3D.cpp	/^void addFace(int nx, int ny, int nz, double ****vector, int ns, double *ghostXrightFace, double *ghostXleftFace, double *ghostYrightFace, double *ghostYleftFace, double *ghostZrightFace, double *ghostZleftFace, VirtualTopology3D * vct) {$/;"	f
addFace	./communication/ComParser3D.cpp	/^void addFace(int nx, int ny, int nz, double ***vector, double *ghostXrightFace, double *ghostXleftFace, double *ghostYrightFace, double *ghostYleftFace, double *ghostZrightFace, double *ghostZleftFace, VirtualTopology3D * vct) {$/;"	f
addJx	./include/EMfields3D.h	/^inline void EMfields3D::addJx(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
addJy	./include/EMfields3D.h	/^inline void EMfields3D::addJy(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
addJz	./include/EMfields3D.h	/^inline void EMfields3D::addJz(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
addPxx	./include/EMfields3D.h	/^inline void EMfields3D::addPxx(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
addPxy	./include/EMfields3D.h	/^inline void EMfields3D::addPxy(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
addPxz	./include/EMfields3D.h	/^inline void EMfields3D::addPxz(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
addPyy	./include/EMfields3D.h	/^inline void EMfields3D::addPyy(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
addPyz	./include/EMfields3D.h	/^inline void EMfields3D::addPyz(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
addPzz	./include/EMfields3D.h	/^inline void EMfields3D::addPzz(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
addRho	./include/EMfields3D.h	/^inline void EMfields3D::addRho(double weight[][2][2], int X, int Y, int Z, int is) {$/;"	f	class:EMfields3D
add_moments_for_pcl	./fields/EMfields3D.cpp	/^inline void add_moments_for_pcl(double momentsAcc[8][10],$/;"	f
add_moments_for_pcl_vec	./fields/EMfields3D.cpp	/^inline void add_moments_for_pcl_vec(double momentsAccVec[8][10][8],$/;"	f
add_tv	./tests/stopwatch.h	/^static inline struct timeval add_tv(const struct timeval a, const struct timeval b){$/;"	f
addscale	./include/Basic.h	/^inline void addscale(double alfa, arr3_double vect1, const arr3_double vect2, int nx, int ny) {$/;"	f
addscale	./include/Basic.h	/^inline void addscale(double alfa, arr3_double vect1, const arr3_double vect2, int nx, int ny, int nz) {$/;"	f
addscale	./include/Basic.h	/^inline void addscale(double alfa, double *vect1, double *vect2, int n) {$/;"	f
addscale	./include/Basic.h	/^inline void addscale(double alfa, double beta, arr3_double vect1, const arr3_double vect2, int nx, int ny) {$/;"	f
addscale	./include/Basic.h	/^inline void addscale(double alfa, double beta, arr3_double vect1, const arr3_double vect2, int nx, int ny, int nz) {$/;"	f
addscale	./include/Basic.h	/^inline void addscale(double alfa, double beta, double *vect1, double *vect2, int n) {$/;"	f
addscale	./include/Basic.h	/^inline void addscale(double alfa, double vect1[][2][2], double vect2[][2][2], int nx, int ny, int nz) {$/;"	f
addto_communicate	./utility/new/diagnostics.cpp	/^void TimeTasks::addto_communicate()$/;"	f	class:TimeTasks
adjustNonPeriodicDensities	./fields/EMfields3D.cpp	/^void EMfields3D::adjustNonPeriodicDensities(int is, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
agents_list	./include/PSKOutput.h	/^    std::list < OutputAgentBase * >agents_list;$/;"	m	class:PSK::OutputManager
allocate	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::allocate(int species, CollectiveIO * col, VirtualTopology3D * vct, Grid * grid) {$/;"	f	class:Particles3Dcomm
already_active	./include/TimeTasks.h	/^  bool already_active;$/;"	m	class:TimeTasks_caller_to_set_task_for_scope
already_communicating	./include/TimeTasks.h	/^  bool already_communicating;$/;"	m	class:TimeTasks_caller_to_set_communication_mode_for_scope
alt_maxwellian	./particles/Particles3D.cpp	/^void Particles3D::alt_maxwellian(Grid * grid, Field * EMf, VirtualTopology3D * vct) {$/;"	f	class:Particles3D
append_err_str	./include/PSKException.h	/^      void append_err_str(const std::string & str) {$/;"	f	class:PSK::Exception
arr	./include/Alloc.h	/^      type* const __restrict__ arr;$/;"	m	class:iPic3D::array_ref1
arr	./include/Alloc.h	/^      type* const __restrict__ arr;$/;"	m	class:iPic3D::array_ref2
arr	./include/Alloc.h	/^      type* const __restrict__ arr;$/;"	m	class:iPic3D::base_arr
arr	./include/Alloc.h	/^      type* const __restrict__ arr;$/;"	m	class:iPic3D::const_array_ref3
arr	./include/Alloc.h	/^      type* const __restrict__ arr;$/;"	m	class:iPic3D::const_array_ref4
arr	./include/Alloc.h	/^    type* const __restrict__ arr;$/;"	m	class:iPic3D::array_fetch1
arr	./include/Alloc.h	/^    type* const __restrict__ arr;$/;"	m	class:iPic3D::array_fetch2
arr	./include/Alloc.h	/^    type* const __restrict__ arr;$/;"	m	class:iPic3D::array_fetch3
arr	./include/Alloc.h	/^    type* const __restrict__ arr;$/;"	m	class:iPic3D::const_array_get1
arr	./include/Alloc.h	/^    type* const __restrict__ arr;$/;"	m	class:iPic3D::const_array_get2
arr	./include/Alloc.h	/^    type* const __restrict__ arr;$/;"	m	class:iPic3D::const_array_get3
arr	./include/Moments.h	/^    arr4_double arr;$/;"	m	class:Moments10
arr	./include/arrays.h	/^  type (&arr)[s1][s2];$/;"	m	class:FixedArray2D1
arr	./include/arrays.h	/^  type (&arr)[s1][s2][s3];$/;"	m	class:FixedArray3D1
arr	./include/arrays.h	/^  type (&arr)[s1][s2][s3];$/;"	m	class:FixedArray3D2
arr	./include/arrays.h	/^  type (&arr)[s1][s2][s3][s4];$/;"	m	class:FixedArray4D1
arr	./include/arrays.h	/^  type (&arr)[s1][s2][s3][s4];$/;"	m	class:FixedArray4D2
arr	./include/arrays.h	/^  type (&arr)[s1][s2][s3][s4];$/;"	m	class:FixedArray4D3
arr	./include/arrays.h	/^  type arr [s1][s2];$/;"	m	class:FixedArray2D
arr	./include/arrays.h	/^  type arr [s1][s2][s3];$/;"	m	struct:FixedArray3D
arr	./include/arrays.h	/^  type arr [s1][s2][s3][s4];$/;"	m	class:FixedArray4D
arr	./include/arrays.h	/^  type arr[s1];$/;"	m	class:FixedArray1D
arr	./tests/test_arrays.cpp	/^    type  * __restrict__ const  arr;$/;"	m	class:BracketRank1	file:
arr	./tests/test_arrays.cpp	/^    type  * __restrict__ const  arr;$/;"	m	class:Rank1	file:
arr	./tests/test_arrays.cpp	/^    type *    const __restrict__ arr;$/;"	m	class:Rank3	file:
arr	./tests/test_arrays.cpp	/^    type * __restrict__ const arr;$/;"	m	class:BracketRank2	file:
arr	./tests/test_arrays.cpp	/^    type * __restrict__ const arr;$/;"	m	class:Rank2	file:
arr	./tests/test_arrays.cpp	/^    type* __restrict__ const arr;$/;"	m	class:Rank4	file:
arr1_double	./include/arraysfwd.h	/^typedef iPic3D::array_ref1<double> arr1_double;$/;"	t
arr1_double_fetch	./include/arraysfwd.h	/^typedef double* arr1_double_fetch;$/;"	t
arr1_double_fetch	./include/arraysfwd.h	/^typedef iPic3D::array_fetch1<double> arr1_double_fetch;$/;"	t
arr1_double_get	./include/arraysfwd.h	/^typedef double* arr1_double_get;$/;"	t
arr1_double_get	./include/arraysfwd.h	/^typedef iPic3D::array_get1<double> arr1_double_get;$/;"	t
arr1_int	./include/arraysfwd.h	/^typedef iPic3D::array_ref1<int> arr1_int;$/;"	t
arr1_pfloat_get	./include/arraysfwd.h	/^typedef iPic3D::array_get1<pfloat> arr1_pfloat_get;$/;"	t
arr1_pfloat_get	./include/arraysfwd.h	/^typedef pfloat* arr1_pfloat_get;$/;"	t
arr2_double	./include/arraysfwd.h	/^typedef iPic3D::array_ref2<double> arr2_double;$/;"	t
arr2_double_fetch	./include/arraysfwd.h	/^typedef double** arr2_double_fetch;$/;"	t
arr2_double_fetch	./include/arraysfwd.h	/^typedef iPic3D::array_fetch2<double> arr2_double_fetch;$/;"	t
arr2_int	./include/arraysfwd.h	/^typedef iPic3D::array_ref2<int> arr2_int;$/;"	t
arr3	./include/Alloc.h	/^      type*const*const*const arr3;$/;"	m	class:iPic3D::const_array_ref3
arr3_double	./include/arraysfwd.h	/^typedef iPic3D::array_ref3<double> arr3_double;$/;"	t
arr3_int	./include/arraysfwd.h	/^typedef iPic3D::array_ref3<int> arr3_int;$/;"	t
arr3_ptr	./include/arraysfwd.h	/^typedef iPic3D::array_ref3<void*> arr3_ptr;$/;"	t
arr4	./include/Alloc.h	/^      type*const*const*const*const arr4;$/;"	m	class:iPic3D::const_array_ref4
arr4_double	./include/arraysfwd.h	/^typedef iPic3D::array_ref4<double> arr4_double;$/;"	t
arr4_int	./include/arraysfwd.h	/^typedef iPic3D::array_ref4<int> arr4_int;$/;"	t
array1	./include/Alloc.h	/^      array1(size_t s1) : array_ref1<type>(s1) { }$/;"	f	struct:iPic3D::array1
array1	./include/Alloc.h	/^  struct array1 : public array_ref1<type>$/;"	s	namespace:iPic3D
array1_double	./include/arraysfwd.h	/^typedef iPic3D::array1<double> array1_double;$/;"	t
array1_int	./include/arraysfwd.h	/^typedef iPic3D::array1<int> array1_int;$/;"	t
array2	./include/Alloc.h	/^      array2(size_t s2, size_t s1) : array_ref2<type>(s2,s1) { }$/;"	f	struct:iPic3D::array2
array2	./include/Alloc.h	/^  struct array2 : public array_ref2<type>$/;"	s	namespace:iPic3D
array2_double	./include/arraysfwd.h	/^typedef iPic3D::array2<double> array2_double;$/;"	t
array2_int	./include/arraysfwd.h	/^typedef iPic3D::array2<int> array2_int;$/;"	t
array3	./include/Alloc.h	/^      array3(size_t s3, size_t s2, size_t s1) : array_ref3<type>(s3,s2,s1) { }$/;"	f	struct:iPic3D::array3
array3	./include/Alloc.h	/^  struct array3 : public array_ref3<type>$/;"	s	namespace:iPic3D
array3_double	./include/arraysfwd.h	/^typedef iPic3D::array3<double> array3_double;$/;"	t
array3_int	./include/arraysfwd.h	/^typedef iPic3D::array3<int> array3_int;$/;"	t
array4	./include/Alloc.h	/^      array4(size_t s4, size_t s3, size_t s2, size_t s1)$/;"	f	struct:iPic3D::array4
array4	./include/Alloc.h	/^  struct array4 : public array_ref4<type>$/;"	s	namespace:iPic3D
array4_double	./include/arraysfwd.h	/^typedef iPic3D::array4<double> array4_double;$/;"	t
array4_int	./include/arraysfwd.h	/^typedef iPic3D::array4<int> array4_int;$/;"	t
array4_pfloat	./include/arraysfwd.h	/^typedef iPic3D::array4<pfloat> array4_pfloat;$/;"	t
array_bool	./include/input_array.h	/^  array_bool() {$/;"	f	struct:array_bool
array_bool	./include/input_array.h	/^  array_bool(const array_bool & orig):a(orig.a), b(orig.b), c(orig.c), d(orig.d), e(orig.e), f(orig.f) {$/;"	f	struct:array_bool
array_bool	./include/input_array.h	/^  } array_bool(int u1, int u2, int u3, int u4, int u5, int u6):a(u1), b(u2), c(u3), d(u4), e(u5), f(u6) {$/;"	f	struct:array_bool
array_bool	./include/input_array.h	/^struct array_bool {$/;"	s
array_bool::a	./include/input_array.h	/^  bool a, b, c, d, e, f;$/;"	m	struct:array_bool
array_bool::array_bool	./include/input_array.h	/^  array_bool() {$/;"	f	struct:array_bool
array_bool::array_bool	./include/input_array.h	/^  array_bool(const array_bool & orig):a(orig.a), b(orig.b), c(orig.c), d(orig.d), e(orig.e), f(orig.f) {$/;"	f	struct:array_bool
array_bool::array_bool	./include/input_array.h	/^  } array_bool(int u1, int u2, int u3, int u4, int u5, int u6):a(u1), b(u2), c(u3), d(u4), e(u5), f(u6) {$/;"	f	struct:array_bool
array_bool::b	./include/input_array.h	/^  bool a, b, c, d, e, f;$/;"	m	struct:array_bool
array_bool::c	./include/input_array.h	/^  bool a, b, c, d, e, f;$/;"	m	struct:array_bool
array_bool::d	./include/input_array.h	/^  bool a, b, c, d, e, f;$/;"	m	struct:array_bool
array_bool::e	./include/input_array.h	/^  bool a, b, c, d, e, f;$/;"	m	struct:array_bool
array_bool::f	./include/input_array.h	/^  bool a, b, c, d, e, f;$/;"	m	struct:array_bool
array_bool::operator =	./include/input_array.h	/^  array_bool & operator=(const array_bool & orig) {$/;"	f	struct:array_bool
array_double	./include/input_array.h	/^  array_double() {$/;"	f	struct:array_double
array_double	./include/input_array.h	/^  array_double(const array_double & orig):a(orig.a), b(orig.b), c(orig.c), d(orig.d), e(orig.e), f(orig.f) {$/;"	f	struct:array_double
array_double	./include/input_array.h	/^  } array_double(int u1, int u2, int u3, int u4, int u5, int u6):a(u1), b(u2), c(u3), d(u4), e(u5), f(u6) {$/;"	f	struct:array_double
array_double	./include/input_array.h	/^struct array_double {$/;"	s
array_double::a	./include/input_array.h	/^  double a, b, c, d, e, f;$/;"	m	struct:array_double
array_double::array_double	./include/input_array.h	/^  array_double() {$/;"	f	struct:array_double
array_double::array_double	./include/input_array.h	/^  array_double(const array_double & orig):a(orig.a), b(orig.b), c(orig.c), d(orig.d), e(orig.e), f(orig.f) {$/;"	f	struct:array_double
array_double::array_double	./include/input_array.h	/^  } array_double(int u1, int u2, int u3, int u4, int u5, int u6):a(u1), b(u2), c(u3), d(u4), e(u5), f(u6) {$/;"	f	struct:array_double
array_double::b	./include/input_array.h	/^  double a, b, c, d, e, f;$/;"	m	struct:array_double
array_double::c	./include/input_array.h	/^  double a, b, c, d, e, f;$/;"	m	struct:array_double
array_double::d	./include/input_array.h	/^  double a, b, c, d, e, f;$/;"	m	struct:array_double
array_double::e	./include/input_array.h	/^  double a, b, c, d, e, f;$/;"	m	struct:array_double
array_double::f	./include/input_array.h	/^  double a, b, c, d, e, f;$/;"	m	struct:array_double
array_double::operator =	./include/input_array.h	/^  array_double & operator=(const array_double & orig) {$/;"	f	struct:array_double
array_fetch1	./include/Alloc.h	/^    inline array_fetch1(type*const arr_, size_t k, size_t s1) :$/;"	f	class:iPic3D::array_fetch1
array_fetch1	./include/Alloc.h	/^  class array_fetch1$/;"	c	namespace:iPic3D
array_fetch2	./include/Alloc.h	/^    inline array_fetch2(type*const arr_, size_t k, size_t s2, size_t s1) :$/;"	f	class:iPic3D::array_fetch2
array_fetch2	./include/Alloc.h	/^  class array_fetch2$/;"	c	namespace:iPic3D
array_fetch3	./include/Alloc.h	/^    inline array_fetch3(type*const arr_, size_t k, size_t s3, size_t s2, size_t s1) :$/;"	f	class:iPic3D::array_fetch3
array_fetch3	./include/Alloc.h	/^  class array_fetch3$/;"	c	namespace:iPic3D
array_int	./include/input_array.h	/^    array_int() {$/;"	f	struct:array_int
array_int	./include/input_array.h	/^  array_int(const array_int & orig):a(orig.a), b(orig.b), c(orig.c), d(orig.d), e(orig.e), f(orig.f) {$/;"	f	struct:array_int
array_int	./include/input_array.h	/^  } array_int(int u1, int u2, int u3, int u4, int u5, int u6):a(u1), b(u2), c(u3), d(u4), e(u5), f(u6) {$/;"	f	struct:array_int
array_int	./include/input_array.h	/^struct array_int {$/;"	s
array_int::a	./include/input_array.h	/^  int a, b, c, d, e, f;$/;"	m	struct:array_int
array_int::array_int	./include/input_array.h	/^    array_int() {$/;"	f	struct:array_int
array_int::array_int	./include/input_array.h	/^  array_int(const array_int & orig):a(orig.a), b(orig.b), c(orig.c), d(orig.d), e(orig.e), f(orig.f) {$/;"	f	struct:array_int
array_int::array_int	./include/input_array.h	/^  } array_int(int u1, int u2, int u3, int u4, int u5, int u6):a(u1), b(u2), c(u3), d(u4), e(u5), f(u6) {$/;"	f	struct:array_int
array_int::b	./include/input_array.h	/^  int a, b, c, d, e, f;$/;"	m	struct:array_int
array_int::c	./include/input_array.h	/^  int a, b, c, d, e, f;$/;"	m	struct:array_int
array_int::d	./include/input_array.h	/^  int a, b, c, d, e, f;$/;"	m	struct:array_int
array_int::e	./include/input_array.h	/^  int a, b, c, d, e, f;$/;"	m	struct:array_int
array_int::f	./include/input_array.h	/^  int a, b, c, d, e, f;$/;"	m	struct:array_int
array_int::operator =	./include/input_array.h	/^  array_int & operator=(const array_int & orig) {$/;"	f	struct:array_int
array_ref1	./include/Alloc.h	/^      array_ref1(size_t s1) :$/;"	f	class:iPic3D::array_ref1
array_ref1	./include/Alloc.h	/^      array_ref1(type* in,$/;"	f	class:iPic3D::array_ref1
array_ref1	./include/Alloc.h	/^  class array_ref1$/;"	c	namespace:iPic3D
array_ref2	./include/Alloc.h	/^      array_ref2(size_t s2, size_t s1) :$/;"	f	class:iPic3D::array_ref2
array_ref2	./include/Alloc.h	/^      array_ref2(type*const* in,$/;"	f	class:iPic3D::array_ref2
array_ref2	./include/Alloc.h	/^  class array_ref2$/;"	c	namespace:iPic3D
array_ref3	./include/Alloc.h	/^      array_ref3(size_t s3, size_t s2, size_t s1) :$/;"	f	class:iPic3D::array_ref3
array_ref3	./include/Alloc.h	/^      array_ref3(type*const*const* in,$/;"	f	class:iPic3D::array_ref3
array_ref3	./include/Alloc.h	/^  class array_ref3 : public const_array_ref3<type>$/;"	c	namespace:iPic3D
array_ref4	./include/Alloc.h	/^      array_ref4(size_t s4, size_t s3, size_t s2, size_t s1) :$/;"	f	class:iPic3D::array_ref4
array_ref4	./include/Alloc.h	/^      array_ref4(type*const*const*const* in,$/;"	f	class:iPic3D::array_ref4
array_ref4	./include/Alloc.h	/^  class array_ref4 : public const_array_ref4<type>$/;"	c	namespace:iPic3D
arrays.h	./include/arrays.h	1;"	F
arraysfwd.h	./include/arraysfwd.h	1;"	F
arraysfwd_h	./include/arraysfwd.h	3;"	d
assert1	./include/asserts.h	23;"	d
assert1	./include/asserts.h	73;"	d
assert1	./include/asserts.h	76;"	d
assert2	./include/asserts.h	24;"	d
assert2	./include/asserts.h	80;"	d
assert2	./include/asserts.h	85;"	d
assert3	./include/asserts.h	25;"	d
assert3	./include/asserts.h	91;"	d
assert3	./include/asserts.h	94;"	d
assert_aligned	./include/Alloc.h	81;"	d
assert_almost_eq	./include/asserts.h	132;"	d
assert_almost_eq	./include/asserts.h	30;"	d
assert_divides	./include/asserts.h	140;"	d
assert_eq	./include/asserts.h	166;"	d
assert_eq	./include/asserts.h	31;"	d
assert_error	./utility/asserts.cpp	/^void assert_error(const char *file, int line, const char *func, const char *op, const char *lhs_str, const char *rhs_str, double lhs, double rhs) {$/;"	f
assert_error	./utility/new/diagnostics.cpp	/^void assert_error(const char* file, int line, const char* func,$/;"	f
assert_ge	./include/asserts.h	170;"	d
assert_ge	./include/asserts.h	35;"	d
assert_gt	./include/asserts.h	168;"	d
assert_gt	./include/asserts.h	33;"	d
assert_isfinite	./include/asserts.h	153;"	d
assert_isnum	./include/asserts.h	162;"	d
assert_isnum	./include/asserts.h	37;"	d
assert_le	./include/asserts.h	171;"	d
assert_le	./include/asserts.h	36;"	d
assert_lt	./include/asserts.h	169;"	d
assert_lt	./include/asserts.h	34;"	d
assert_ne	./include/asserts.h	167;"	d
assert_ne	./include/asserts.h	32;"	d
assert_not_almost_eq	./include/asserts.h	128;"	d
assert_op	./include/asserts.h	148;"	d
assert_printf	./include/asserts.h	26;"	d
assert_printf	./include/asserts.h	83;"	d
assert_printf	./include/asserts.h	88;"	d
assert_printf1	./include/asserts.h	27;"	d
assert_printf1	./include/asserts.h	74;"	d
assert_printf1	./include/asserts.h	77;"	d
assert_printf2	./include/asserts.h	28;"	d
assert_printf2	./include/asserts.h	82;"	d
assert_printf2	./include/asserts.h	87;"	d
assert_printf3	./include/asserts.h	29;"	d
assert_printf3	./include/asserts.h	92;"	d
assert_printf3	./include/asserts.h	95;"	d
assert_streq	./include/asserts.h	144;"	d
asserts.cpp	./utility/asserts.cpp	1;"	F
asserts.h	./include/asserts.h	1;"	F
b	./include/input_array.h	/^  bool a, b, c, d, e, f;$/;"	m	struct:array_bool
b	./include/input_array.h	/^  double a, b, c, d, e, f;$/;"	m	struct:array_double
b	./include/input_array.h	/^  int a, b, c, d, e, f;$/;"	m	struct:array_int
b_X_LEFT	./include/Particles3Dcomm.h	/^  double *b_X_LEFT;$/;"	m	class:Particles3Dcomm
b_X_LEFT_ptr	./include/Particles3Dcomm.h	/^  double *b_X_LEFT_ptr;$/;"	m	class:Particles3Dcomm
b_X_RIGHT	./include/Particles3Dcomm.h	/^  double *b_X_RIGHT;$/;"	m	class:Particles3Dcomm
b_X_RIGHT_ptr	./include/Particles3Dcomm.h	/^  double *b_X_RIGHT_ptr;$/;"	m	class:Particles3Dcomm
b_Y_LEFT	./include/Particles3Dcomm.h	/^  double *b_Y_LEFT;$/;"	m	class:Particles3Dcomm
b_Y_LEFT_ptr	./include/Particles3Dcomm.h	/^  double *b_Y_LEFT_ptr;$/;"	m	class:Particles3Dcomm
b_Y_RIGHT	./include/Particles3Dcomm.h	/^  double *b_Y_RIGHT;$/;"	m	class:Particles3Dcomm
b_Y_RIGHT_ptr	./include/Particles3Dcomm.h	/^  double *b_Y_RIGHT_ptr;$/;"	m	class:Particles3Dcomm
b_Z_LEFT	./include/Particles3Dcomm.h	/^  double *b_Z_LEFT;$/;"	m	class:Particles3Dcomm
b_Z_LEFT_ptr	./include/Particles3Dcomm.h	/^  double *b_Z_LEFT_ptr;$/;"	m	class:Particles3Dcomm
b_Z_RIGHT	./include/Particles3Dcomm.h	/^  double *b_Z_RIGHT;$/;"	m	class:Particles3Dcomm
b_Z_RIGHT_ptr	./include/Particles3Dcomm.h	/^  double *b_Z_RIGHT_ptr;$/;"	m	class:Particles3Dcomm
base_arr	./include/Alloc.h	/^      base_arr(size_t s) : size(s), arr(AlignedAlloc(type, s)) {}$/;"	f	class:iPic3D::base_arr
base_arr	./include/Alloc.h	/^      base_arr(type* in, size_t s) : size(s), arr(in) {}$/;"	f	class:iPic3D::base_arr
base_arr	./include/Alloc.h	/^  class base_arr$/;"	c	namespace:iPic3D
bcBx	./include/Collective.h	/^    int bcBx[6], bcBy[6], bcBz[6];$/;"	m	class:Collective
bcBy	./include/Collective.h	/^    int bcBx[6], bcBy[6], bcBz[6];$/;"	m	class:Collective
bcBz	./include/Collective.h	/^    int bcBx[6], bcBy[6], bcBz[6];$/;"	m	class:Collective
bcEMfaceXleft	./include/Collective.h	/^    int bcEMfaceXleft;$/;"	m	class:Collective
bcEMfaceXleft	./include/EMfields3D.h	/^    int bcEMfaceXleft;$/;"	m	class:EMfields3D
bcEMfaceXright	./include/Collective.h	/^    int bcEMfaceXright;$/;"	m	class:Collective
bcEMfaceXright	./include/EMfields3D.h	/^    int bcEMfaceXright;$/;"	m	class:EMfields3D
bcEMfaceYleft	./include/Collective.h	/^    int bcEMfaceYleft;$/;"	m	class:Collective
bcEMfaceYleft	./include/EMfields3D.h	/^    int bcEMfaceYleft;$/;"	m	class:EMfields3D
bcEMfaceYright	./include/Collective.h	/^    int bcEMfaceYright;$/;"	m	class:Collective
bcEMfaceYright	./include/EMfields3D.h	/^    int bcEMfaceYright;$/;"	m	class:EMfields3D
bcEMfaceZleft	./include/Collective.h	/^    int bcEMfaceZleft;$/;"	m	class:Collective
bcEMfaceZleft	./include/EMfields3D.h	/^    int bcEMfaceZleft;$/;"	m	class:EMfields3D
bcEMfaceZright	./include/Collective.h	/^    int bcEMfaceZright;$/;"	m	class:Collective
bcEMfaceZright	./include/EMfields3D.h	/^    int bcEMfaceZright;$/;"	m	class:EMfields3D
bcEx	./include/Collective.h	/^    int bcEx[6], bcEy[6], bcEz[6];$/;"	m	class:Collective
bcEy	./include/Collective.h	/^    int bcEx[6], bcEy[6], bcEz[6];$/;"	m	class:Collective
bcEz	./include/Collective.h	/^    int bcEx[6], bcEy[6], bcEz[6];$/;"	m	class:Collective
bcPHIfaceXleft	./include/Collective.h	/^    int bcPHIfaceXleft;$/;"	m	class:Collective
bcPHIfaceXleft	./include/EMfields3D.h	/^    int bcPHIfaceXleft;$/;"	m	class:EMfields3D
bcPHIfaceXright	./include/Collective.h	/^    int bcPHIfaceXright;$/;"	m	class:Collective
bcPHIfaceXright	./include/EMfields3D.h	/^    int bcPHIfaceXright;$/;"	m	class:EMfields3D
bcPHIfaceYleft	./include/Collective.h	/^    int bcPHIfaceYleft;$/;"	m	class:Collective
bcPHIfaceYleft	./include/EMfields3D.h	/^    int bcPHIfaceYleft;$/;"	m	class:EMfields3D
bcPHIfaceYright	./include/Collective.h	/^    int bcPHIfaceYright;$/;"	m	class:Collective
bcPHIfaceYright	./include/EMfields3D.h	/^    int bcPHIfaceYright;$/;"	m	class:EMfields3D
bcPHIfaceZleft	./include/Collective.h	/^    int bcPHIfaceZleft;$/;"	m	class:Collective
bcPHIfaceZleft	./include/EMfields3D.h	/^    int bcPHIfaceZleft;$/;"	m	class:EMfields3D
bcPHIfaceZright	./include/Collective.h	/^    int bcPHIfaceZright;$/;"	m	class:Collective
bcPHIfaceZright	./include/EMfields3D.h	/^    int bcPHIfaceZright;$/;"	m	class:EMfields3D
bcPfaceXleft	./include/Collective.h	/^    int bcPfaceXleft;$/;"	m	class:Collective
bcPfaceXleft	./include/Particles3Dcomm.h	/^  int bcPfaceXleft;$/;"	m	class:Particles3Dcomm
bcPfaceXright	./include/Collective.h	/^    int bcPfaceXright;$/;"	m	class:Collective
bcPfaceXright	./include/Particles3Dcomm.h	/^  int bcPfaceXright;$/;"	m	class:Particles3Dcomm
bcPfaceYleft	./include/Collective.h	/^    int bcPfaceYleft;$/;"	m	class:Collective
bcPfaceYleft	./include/Particles3Dcomm.h	/^  int bcPfaceYleft;$/;"	m	class:Particles3Dcomm
bcPfaceYright	./include/Collective.h	/^    int bcPfaceYright;$/;"	m	class:Collective
bcPfaceYright	./include/Particles3Dcomm.h	/^  int bcPfaceYright;$/;"	m	class:Particles3Dcomm
bcPfaceZleft	./include/Collective.h	/^    int bcPfaceZleft;$/;"	m	class:Collective
bcPfaceZleft	./include/Particles3Dcomm.h	/^  int bcPfaceZleft;$/;"	m	class:Particles3Dcomm
bcPfaceZright	./include/Collective.h	/^    int bcPfaceZright;$/;"	m	class:Collective
bcPfaceZright	./include/Particles3Dcomm.h	/^  int bcPfaceZright;$/;"	m	class:Particles3Dcomm
bparticles	./include/phdf5.h	/^    bool     bparticles;$/;"	m	class:PHDF5fileClass
bucket_offset	./include/Particles3Dcomm.h	/^  array3_int* bucket_offset;$/;"	m	class:Particles3Dcomm
buffer	./include/MPIdata.h	/^  char *buffer;$/;"	m	class:MPIdata
bufferXleft	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::bufferXleft(double *b_, int np_current, VirtualTopology3D * vct) {$/;"	f	class:Particles3Dcomm
bufferXright	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::bufferXright(double *b_, int np_current, VirtualTopology3D * vct) {$/;"	f	class:Particles3Dcomm
bufferYleft	./particles/Particles3Dcomm.cpp	/^inline void Particles3Dcomm::bufferYleft(double *b_, int np_current, VirtualTopology3D * vct) {$/;"	f	class:Particles3Dcomm
bufferYright	./particles/Particles3Dcomm.cpp	/^inline void Particles3Dcomm::bufferYright(double *b_, int np_current, VirtualTopology3D * vct) {$/;"	f	class:Particles3Dcomm
bufferZleft	./particles/Particles3Dcomm.cpp	/^inline void Particles3Dcomm::bufferZleft(double *b_, int np_current, VirtualTopology3D * vct) {$/;"	f	class:Particles3Dcomm
bufferZright	./particles/Particles3Dcomm.cpp	/^inline void Particles3Dcomm::bufferZright(double *b_, int np_current, VirtualTopology3D * vct) {$/;"	f	class:Particles3Dcomm
buffer_size	./include/MPIdata.h	/^  int buffer_size;$/;"	m	class:MPIdata
buffer_size	./include/Particles3Dcomm.h	/^  int buffer_size;$/;"	m	class:Particles3Dcomm
buffer_size_small	./include/Particles3Dcomm.h	/^  int buffer_size_small;$/;"	m	class:Particles3Dcomm
builtin_expect	./include/asserts.h	123;"	d
builtin_expect	./include/asserts.h	125;"	d
c	./include/Collective.h	/^    double c;$/;"	m	class:Collective
c	./include/EMfields3D.h	/^    double c;$/;"	m	class:EMfields3D
c	./include/Particles3Dcomm.h	/^  double c;$/;"	m	class:Particles3Dcomm
c	./include/input_array.h	/^  bool a, b, c, d, e, f;$/;"	m	struct:array_bool
c	./include/input_array.h	/^  double a, b, c, d, e, f;$/;"	m	struct:array_double
c	./include/input_array.h	/^  int a, b, c, d, e, f;$/;"	m	struct:array_int
cVERBOSE	./include/Particles3Dcomm.h	/^  bool cVERBOSE;$/;"	m	class:Particles3Dcomm
cVERBOSE	./include/VCtopology3D.h	/^  bool cVERBOSE;$/;"	m	class:VCtopology3D
c_Solver	./include/iPic3D.h	/^  class c_Solver {$/;"	c	namespace:iPic3D
c_Solver::CalculateB	./main/iPic3Dlib.cpp	/^void c_Solver::CalculateB() {$/;"	f	class:c_Solver
c_Solver::CalculateField	./main/iPic3Dlib.cpp	/^void c_Solver::CalculateField() {$/;"	f	class:c_Solver
c_Solver::CalculateMoments	./main/iPic3Dlib.cpp	/^void c_Solver::CalculateMoments() {$/;"	f	class:c_Solver
c_Solver::Finalize	./main/iPic3Dlib.cpp	/^void c_Solver::Finalize() {$/;"	f	class:c_Solver
c_Solver::Init	./main/iPic3Dlib.cpp	/^int c_Solver::Init(int argc, char **argv) {$/;"	f	class:c_Solver
c_Solver::ParticlesMover	./main/iPic3Dlib.cpp	/^bool c_Solver::ParticlesMover() {$/;"	f	class:c_Solver
c_Solver::WriteConserved	./main/iPic3Dlib.cpp	/^void c_Solver::WriteConserved(int cycle) {$/;"	f	class:c_Solver
c_Solver::WriteOutput	./main/iPic3Dlib.cpp	/^void c_Solver::WriteOutput(int cycle) {$/;"	f	class:c_Solver
c_Solver::WriteRestart	./main/iPic3Dlib.cpp	/^void c_Solver::WriteRestart(int cycle) {$/;"	f	class:c_Solver
c_Solver::convertParticlesToAoS	./main/iPic3Dlib.cpp	/^void c_Solver::convertParticlesToAoS()$/;"	f	class:c_Solver
c_Solver::convertParticlesToSoA	./main/iPic3Dlib.cpp	/^void c_Solver::convertParticlesToSoA()$/;"	f	class:c_Solver
calcXN	./include/Grid3DCU.h	/^  double calcXN(int X)const{ return xStart+(X-1)*dx;}$/;"	f	class:Grid3DCU
calcYN	./include/Grid3DCU.h	/^  double calcYN(int Y)const{ return yStart+(Y-1)*dy;}$/;"	f	class:Grid3DCU
calcZN	./include/Grid3DCU.h	/^  double calcZN(int Z)const{ return zStart+(Z-1)*dz;}$/;"	f	class:Grid3DCU
calc_bessel_Jn_seq	./include/Bessel.h	/^void calc_bessel_Jn_seq(double lambda, int nmax, double bessel_Jn_array[], double bessel_Jn_prime_array[]) {$/;"	f
calculateB	./fields/EMfields3D.cpp	/^void EMfields3D::calculateB(Grid * grid, VirtualTopology3D * vct, Collective *col) {$/;"	f	class:EMfields3D
calculateE	./fields/EMfields3D.cpp	/^void EMfields3D::calculateE(Grid * grid, VirtualTopology3D * vct, Collective *col) {$/;"	f	class:EMfields3D
calculateHatFunctions	./fields/EMfields3D.cpp	/^void EMfields3D::calculateHatFunctions(Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
cartesian_rank	./include/VCtopology3D.h	/^  int cartesian_rank;$/;"	m	class:VCtopology3D
center_xcoord	./include/Grid3DCU.h	/^  double *center_xcoord;$/;"	m	class:Grid3DCU
center_ycoord	./include/Grid3DCU.h	/^  double *center_ycoord;$/;"	m	class:Grid3DCU
center_zcoord	./include/Grid3DCU.h	/^  double *center_zcoord;$/;"	m	class:Grid3DCU
chdim	./include/phdf5.h	/^    hsize_t  chdim   [3];  \/\/$/;"	m	class:PHDF5fileClass
check_bounds	./include/Alloc.h	87;"	d
check_bounds	./include/Alloc.h	89;"	d
check_idx_bounds	./include/Alloc.h	/^      void check_idx_bounds(size_t n3, size_t n2, size_t n1) const$/;"	f	class:iPic3D::const_array_ref3
check_idx_bounds	./include/Alloc.h	/^      void check_idx_bounds(size_t n4, size_t n3, size_t n2, size_t n1) const$/;"	f	class:iPic3D::const_array_ref4
close	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::close(void) {$/;"	f	class:HDF5OutputAdaptor
close	./include/PSKOutput.h	/^    virtual void close(void) {$/;"	f	class:PSK::OutputAdaptor
close	./include/PSKOutput.h	/^    void close(void) {$/;"	f	class:PSK::OutputAgent
close	./include/PSKOutput.h	/^    void close(void) {$/;"	f	class:PSK::coutOutputAdaptor
col	./include/iPic3D.h	/^    Collective    *col;$/;"	m	class:iPic3D::c_Solver
comm	./include/phdf5.h	/^    MPI_Comm comm;$/;"	m	class:PHDF5fileClass
communicate	./include/TimeTasks.h	/^  double communicate[NUMBER_OF_TASKS];$/;"	m	class:TimeTasks
communicate	./particles/Particles3Dcomm.cpp	/^int Particles3Dcomm::communicate(VirtualTopology3D * ptVCT) {$/;"	f	class:Particles3Dcomm
communicateCenter	./communication/ComNodes3D.cpp	/^void communicateCenter(int nx, int ny, int nz, arr3_double _vector, VirtualTopology3D * vct) {$/;"	f
communicateCenter	./communication/ComNodes3D.cpp	/^void communicateCenter(int nx, int ny, int nz, arr4_double _vector, int ns, VirtualTopology3D * vct) {$/;"	f
communicateCenterBC	./communication/ComNodes3D.cpp	/^void communicateCenterBC(int nx, int ny, int nz, arr3_double _vector, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, int bcFaceZright, int bcFaceZleft, VirtualTopology3D * vct) {$/;"	f
communicateCenterBC_P	./communication/ComNodes3D.cpp	/^void communicateCenterBC_P(int nx, int ny, int nz, arr3_double _vector, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, int bcFaceZright, int bcFaceZleft, VirtualTopology3D * vct) {$/;"	f
communicateCenterBoxStencilBC	./communication/ComNodes3D.cpp	/^void communicateCenterBoxStencilBC(int nx, int ny, int nz, arr3_double _vector, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, int bcFaceZright, int bcFaceZleft, VirtualTopology3D * vct) {$/;"	f
communicateCenterBoxStencilBC_P	./communication/ComNodes3D.cpp	/^void communicateCenterBoxStencilBC_P(int nx, int ny, int nz, arr3_double _vector, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, int bcFaceZright, int bcFaceZleft, VirtualTopology3D * vct) {$/;"	f
communicateGhostCorner	./communication/ComBasic3D.cpp	/^void communicateGhostCorner(int myrank, int right_neighborC, int left_neighborC, int DIR, int XLEN, int YLEN, int ZLEN, double *ghostRightCorner, double *ghostLeftCorner) {$/;"	f
communicateGhostEdge	./communication/ComBasic3D.cpp	/^void communicateGhostEdge(int b_len, int myrank, int right_neighborD, int left_neighborD, int DIR, int XLEN, int YLEN, int ZLEN, double *ghostRightEdge, double *ghostLeftEdge) {$/;"	f
communicateGhostFace	./communication/ComBasic3D.cpp	/^void communicateGhostFace(int b_len, int myrank, int right_neighbor, int left_neighbor, int DIR, int XLEN, int YLEN, int ZLEN, double *ghostRightFace, double *ghostLeftFace) {$/;"	f
communicateGhostP2G	./fields/EMfields3D.cpp	/^void EMfields3D::communicateGhostP2G(int ns, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
communicateInterp	./communication/ComInterpNodes3D.cpp	/^void communicateInterp(int nx, int ny, int nz, int ns, double**** vector, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, int bcFaceZright, int bcFaceZleft, VirtualTopology3D * vct) {$/;"	f
communicateNode	./communication/ComNodes3D.cpp	/^void communicateNode(int nx, int ny, int nz, arr3_double _vector, VirtualTopology3D * vct) {$/;"	f
communicateNode	./communication/ComNodes3D.cpp	/^void communicateNode(int nx, int ny, int nz, arr4_double _vector, int ns, VirtualTopology3D * vct) {$/;"	f
communicateNodeBC	./communication/ComNodes3D.cpp	/^void communicateNodeBC(int nx, int ny, int nz, arr3_double _vector, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, int bcFaceZright, int bcFaceZleft, VirtualTopology3D * vct) {$/;"	f
communicateNodeBC_P	./communication/ComNodes3D.cpp	/^void communicateNodeBC_P(int nx, int ny, int nz, arr3_double _vector, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, int bcFaceZright, int bcFaceZleft, VirtualTopology3D * vct) {$/;"	f
communicateNodeBoxStencilBC	./communication/ComNodes3D.cpp	/^void communicateNodeBoxStencilBC(int nx, int ny, int nz, arr3_double _vector, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, int bcFaceZright, int bcFaceZleft, VirtualTopology3D * vct) {$/;"	f
communicateNodeBoxStencilBC_P	./communication/ComNodes3D.cpp	/^void communicateNodeBoxStencilBC_P(int nx, int ny, int nz, arr3_double _vector, int bcFaceXright, int bcFaceXleft, int bcFaceYright, int bcFaceYleft, int bcFaceZright, int bcFaceZleft, VirtualTopology3D * vct) {$/;"	f
communicateNode_P	./communication/ComNodes3D.cpp	/^void communicateNode_P(int nx, int ny, int nz, arr4_double _vector, int ns, VirtualTopology3D * vct) {$/;"	f
communicateParticles	./communication/ComParticles3D.cpp	/^void communicateParticles(int buffer_size, double *b_Xleft, double *b_Xright, double *b_Yleft, double *b_Yright, double *b_Zleft, double *b_Zright, VirtualTopology3D * vct) {$/;"	f
communicateParticlesDIR	./communication/ComBasic3D.cpp	/^void communicateParticlesDIR(int buffer_size, int myrank, int right_neighbor, int left_neighbor, int DIR, int XLEN, int YLEN, int ZLEN, double *b_right, double *b_left) {$/;"	f
communicate_particles	./particles/Particles3D.cpp	/^int Particles3D::communicate_particles(VirtualTopology3D * vct)$/;"	f	class:Particles3D
communicating	./include/TimeTasks.h	/^  bool communicating;$/;"	m	class:TimeTasks
compute_moments	./fields/EMfields3D.cpp	/^inline void compute_moments(double velmoments[10], double weights[8],$/;"	f
const_arr3_double	./include/arraysfwd.h	/^typedef iPic3D::const_array_ref3<double> const_arr3_double;$/;"	t
const_arr3_ptr	./include/arraysfwd.h	/^typedef iPic3D::const_array_ref3<void*> const_arr3_ptr;$/;"	t
const_arr4_double	./include/arraysfwd.h	/^typedef iPic3D::const_array_ref4<double> const_arr4_double;$/;"	t
const_arr4_pfloat	./include/arraysfwd.h	/^typedef iPic3D::const_array_ref4<pfloat> const_arr4_pfloat;$/;"	t
const_array_get1	./include/Alloc.h	/^    inline const_array_get1(type*const arr_, size_t k, size_t s1) :$/;"	f	class:iPic3D::const_array_get1
const_array_get1	./include/Alloc.h	/^  class const_array_get1$/;"	c	namespace:iPic3D
const_array_get2	./include/Alloc.h	/^    inline const_array_get2(type*const arr_, size_t k, size_t s2, size_t s1) :$/;"	f	class:iPic3D::const_array_get2
const_array_get2	./include/Alloc.h	/^  class const_array_get2$/;"	c	namespace:iPic3D
const_array_get3	./include/Alloc.h	/^    const_array_get3(type*const arr_, size_t k, size_t s3, size_t s2, size_t s1) :$/;"	f	class:iPic3D::const_array_get3
const_array_get3	./include/Alloc.h	/^  class const_array_get3$/;"	c	namespace:iPic3D
const_array_ref3	./include/Alloc.h	/^      const_array_ref3(size_t s3, size_t s2, size_t s1) :$/;"	f	class:iPic3D::const_array_ref3
const_array_ref3	./include/Alloc.h	/^      const_array_ref3(type*const*const* in,$/;"	f	class:iPic3D::const_array_ref3
const_array_ref3	./include/Alloc.h	/^  class const_array_ref3 \/\/ : public base_arr<type>$/;"	c	namespace:iPic3D
const_array_ref4	./include/Alloc.h	/^      const_array_ref4(size_t s4, size_t s3, size_t s2, size_t s1) :$/;"	f	class:iPic3D::const_array_ref4
const_array_ref4	./include/Alloc.h	/^      const_array_ref4(type*const*const*const* in,$/;"	f	class:iPic3D::const_array_ref4
const_array_ref4	./include/Alloc.h	/^  class const_array_ref4 \/\/: public base_arr<type>$/;"	c	namespace:iPic3D
constantVelocity	./particles/Particles3D.cpp	/^void Particles3D::constantVelocity(double vel, int dim, Grid * grid, Field * EMf) {$/;"	f	class:Particles3D
convHDF5.cpp	./postprocessing_tools/vtk3D/convHDF5.cpp	1;"	F
convHDF5_EPAR.cpp	./postprocessing_tools/vtk3D/convHDF5_EPAR.cpp	1;"	F
convHDF5unico.cpp	./postprocessing_tools/vtk3D/convHDF5unico.cpp	1;"	F
convertParticlesToAoS	./main/iPic3Dlib.cpp	/^void c_Solver::convertParticlesToAoS()$/;"	f	class:c_Solver
convertParticlesToAoS	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::convertParticlesToAoS()$/;"	f	class:Particles3Dcomm
convertParticlesToSoA	./main/iPic3Dlib.cpp	/^void c_Solver::convertParticlesToSoA()$/;"	f	class:c_Solver
convertParticlesToSoA	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::convertParticlesToSoA()$/;"	f	class:Particles3Dcomm
coord11	./postprocessing_tools/c++/fft-2D-slice-of-vtk/user_inputs.h	/^    float coord11=10.0;$/;"	v
coord12	./postprocessing_tools/c++/fft-2D-slice-of-vtk/user_inputs.h	/^    float coord12=30.0;$/;"	v
coord21	./postprocessing_tools/c++/fft-2D-slice-of-vtk/user_inputs.h	/^    float coord21=00.0;$/;"	v
coord22	./postprocessing_tools/c++/fft-2D-slice-of-vtk/user_inputs.h	/^    float coord22=15.0;$/;"	v
coordinates	./include/VCtopology3D.h	/^  int coordinates[3];$/;"	m	class:VCtopology3D
copyParticlesToAoS	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::copyParticlesToAoS()$/;"	f	class:Particles3Dcomm
copyParticlesToSoA	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::copyParticlesToSoA()$/;"	f	class:Particles3Dcomm
coutOutputAdaptor	./include/PSKOutput.h	/^    coutOutputAdaptor(void) {;$/;"	f	class:PSK::coutOutputAdaptor
coutOutputAdaptor	./include/PSKOutput.h	/^  class coutOutputAdaptor:public OutputAdaptor {$/;"	c	namespace:PSK
cq	./include/iPic3D.h	/^    string cq;$/;"	m	class:iPic3D::c_Solver
cqsat	./include/iPic3D.h	/^    string cqsat;$/;"	m	class:iPic3D::c_Solver
cross_product	./include/Basic.h	/^inline void cross_product(double a1, double a2, double a3, double b1, double b2, double b3, double *c){$/;"	f
curlC2N	./grids/Grid3DCU.cpp	/^void Grid3DCU::curlC2N(arr3_double curlXN, arr3_double curlYN, arr3_double curlZN, const_arr3_double vecFieldXC, const_arr3_double vecFieldYC, const_arr3_double vecFieldZC) {$/;"	f	class:Grid3DCU
curlN2C	./grids/Grid3DCU.cpp	/^void Grid3DCU::curlN2C(arr3_double curlXC, arr3_double curlYC, arr3_double curlZC,$/;"	f	class:Grid3DCU
cx	./include/Particle.h	/^  int cx[3]; \/\/ mesh cell$/;"	m	struct:CellParticle
d	./include/input_array.h	/^  bool a, b, c, d, e, f;$/;"	m	struct:array_bool
d	./include/input_array.h	/^  double a, b, c, d, e, f;$/;"	m	struct:array_double
d	./include/input_array.h	/^  int a, b, c, d, e, f;$/;"	m	struct:array_int
dassert_	./include/asserts.h	58;"	d
dassert_	./include/asserts.h	66;"	d
dassert_fileLine	./include/asserts.h	44;"	d
debug.cpp	./utility/debug.cpp	1;"	F
debug.h	./include/debug.h	1;"	F
declare_assert_errmsg	./include/asserts.h	104;"	d
declare_dprintvar_fileLine	./include/debug.h	18;"	d
declare_invalid_value_error	./include/errors.h	19;"	d
delArr1	./include/Alloc.h	/^template <class type> inline void delArr1(type * arr)$/;"	f
delArr2	./include/Alloc.h	/^template <class type> inline void delArr2(type ** arr, size_t sz1)$/;"	f
delArr2_Amaya	./tests/test_arrays.cpp	/^template < class type > void delArr2_Amaya(type ** arr, int dummyx) {$/;"	f
delArr3	./include/Alloc.h	/^template <class type> inline void delArr3(type *** arr, size_t sz1, size_t sz2)$/;"	f
delArr3_Amaya	./tests/test_arrays.cpp	/^template < class type > void delArr3_Amaya(type *** arr, int dummyx, int dummyy) {$/;"	f
delArr4	./include/Alloc.h	/^template <class type> inline void delArr4(type **** arr,$/;"	f
delArr4_Amaya	./tests/test_arrays.cpp	/^template < class type > void delArr4_Amaya(type **** arr, int dummyx, int dummyy, int dummyz) {$/;"	f
delArray1	./include/Alloc.h	/^template < class type > inline void delArray1(type * arr)$/;"	f
delArray2	./include/Alloc.h	/^template < class type > inline void delArray2(type ** arr)$/;"	f
delArray3	./include/Alloc.h	/^template < class type > inline void delArray3(type *** arr)$/;"	f
delArray4	./include/Alloc.h	/^template < class type > inline void delArray4(type **** arr)$/;"	f
del_pack	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::del_pack(int np_current, int *nplast) {$/;"	f	class:Particles3Dcomm
deleteParticlesInsideSphere	./particles/Particles3D.cpp	/^double Particles3D::deleteParticlesInsideSphere(double R, double x_center, double y_center, double z_center){$/;"	f	class:Particles3D
delt	./include/EMfields3D.h	/^    double delt;$/;"	m	class:EMfields3D
delta	./include/Collective.h	/^    double delta;$/;"	m	class:Collective
delta	./include/EMfields3D.h	/^    double B0x, B0y, B0z, delta;$/;"	m	class:EMfields3D
delta	./include/Particles3Dcomm.h	/^  double delta;$/;"	m	class:Particles3Dcomm
delta_f	./particles/Particles3D.cpp	/^double Particles3D::delta_f(double u, double v, double w, double x, double y, double kx, double ky, double omega_re, double omega_i, double Ex_mod, double Ex_phase, double Ey_mod, double Ey_phase, double Ez_mod, double Ez_phase, double theta, Field * EMf) {$/;"	f	class:Particles3D
derBC	./grids/Grid3DCU.cpp	/^void Grid3DCU::derBC(arr3_double derBC, const_arr3_double vector, int leftActiveNode, int dirDER) {$/;"	f	class:Grid3DCU
df0_dvpar	./particles/Particles3D.cpp	/^double Particles3D::df0_dvpar(double vpar, double vperp) {$/;"	f	class:Particles3D
df0_dvperp	./particles/Particles3D.cpp	/^double Particles3D::df0_dvperp(double vpar, double vperp) {$/;"	f	class:Particles3D
dfprintf_fileLine	./utility/new/diagnostics.cpp	/^void dfprintf_fileLine(FILE* fptr, const char *func, const char *file, int line_number,$/;"	f
diag_cout	./include/PSKException.h	/^      void diag_cout() {$/;"	f	class:PSK::Exception
diagnostics.cpp	./utility/new/diagnostics.cpp	1;"	F
diff_tv	./tests/stopwatch.h	/^static inline struct timeval diff_tv(const struct timeval start, const struct timeval stop){$/;"	f
dim	./include/Collective.h	/^    int dim;$/;"	m	class:Collective
dim	./include/phdf5.h	/^    hsize_t  dim     [3];  \/\/ Is there a way to avoid this problem?$/;"	m	class:PHDF5fileClass
dim1	./tests/test_arrays.cpp	/^    size_t dim1() const { return S1; } $/;"	f	class:Rank4
dim1	./tests/test_arrays.cpp	/^    size_t dim1() const { return S1; }$/;"	f	class:Rank1
dim1	./tests/test_arrays.cpp	/^    size_t dim1() const { return S1; }$/;"	f	class:Rank2
dim1	./tests/test_arrays.cpp	/^    size_t dim1() const { return S1; }$/;"	f	class:Rank3
dim2	./tests/test_arrays.cpp	/^    size_t dim2() const { return S2; }$/;"	f	class:Rank2
dim2	./tests/test_arrays.cpp	/^    size_t dim2() const { return S2; }$/;"	f	class:Rank3
dim2	./tests/test_arrays.cpp	/^    size_t dim2() const { return S2; }$/;"	f	class:Rank4
dim3	./tests/test_arrays.cpp	/^    size_t dim3() const { return S3; }$/;"	f	class:Rank3
dim3	./tests/test_arrays.cpp	/^    size_t dim3() const { return S3; }$/;"	f	class:Rank4
dim4	./tests/test_arrays.cpp	/^    size_t dim4() const { return S4; }$/;"	f	class:Rank4
div	./include/Basic.h	/^inline void div(arr3_double vect1, double alfa, const arr3_double vect2, int nx, int ny, int nz) {$/;"	f
divBCleft	./grids/Grid3DCU.cpp	/^void Grid3DCU::divBCleft(arr3_double divBC, const_arr3_double vectorX, const_arr3_double vectorY, const_arr3_double vectorZ, int leftActiveNode, int dirDER) {$/;"	f	class:Grid3DCU
divBCright	./grids/Grid3DCU.cpp	/^void Grid3DCU::divBCright(arr3_double divBC, const_arr3_double vectorX, const_arr3_double vectorY, const_arr3_double vectorZ, int rightActiveNode, int dirDER) {$/;"	f	class:Grid3DCU
divC	./include/EMfields3D.h	/^    array3_double divC;$/;"	m	class:EMfields3D
divC2N	./grids/Grid3DCU.cpp	/^void Grid3DCU::divC2N(arr3_double divN, const_arr3_double vecFieldXC, const_arr3_double vecFieldYC, const_arr3_double vecFieldZC) {$/;"	f	class:Grid3DCU
divN2C	./grids/Grid3DCU.cpp	/^void Grid3DCU::divN2C(arr3_double divC, const_arr3_double vecFieldXN, const_arr3_double vecFieldYN, const_arr3_double vecFieldZN) {$/;"	f	class:Grid3DCU
divSymmTensorN2C	./grids/Grid3DCU.cpp	/^void Grid3DCU::divSymmTensorN2C(arr3_double divCX, arr3_double divCY, arr3_double divCZ, const_arr4_double pXX, const_arr4_double pXY, const_arr4_double pXZ, const_arr4_double pYY, const_arr4_double pYZ, const_arr4_double pZZ, int ns) {$/;"	f	class:Grid3DCU
divisions	./include/VCtopology3D.h	/^  int divisions[3];$/;"	m	class:VCtopology3D
dot	./include/Basic.h	/^inline double dot(double *vect1, double *vect2, int n) {$/;"	f
dotP	./include/Basic.h	/^inline double dotP(double *vect1, double *vect2, int n) {$/;"	f
dprint	./include/debug.h	16;"	d
dprint0	./include/debug.h	17;"	d
dprintf	./include/debug.h	15;"	d
drd	./mathlib/EllipticF.cpp	/^double drd(double x, double y, double z, int* piErr)$/;"	f
drf	./mathlib/EllipticF.cpp	/^double drf(double x, double y, double z, int* piErr)$/;"	f
ds	./include/iPic3D.h	/^    string ds;$/;"	m	class:iPic3D::c_Solver
dt	./include/Collective.h	/^    double dt;$/;"	m	class:Collective
dt	./include/EMfields3D.h	/^    double dt;$/;"	m	class:EMfields3D
dt	./include/Particles3Dcomm.h	/^  double dt;$/;"	m	class:Particles3Dcomm
dt	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var-2D/user_inputs_block_single_var_2D.h	/^    float dt = 0.125;                                     \/\/ timestep$/;"	v
dt	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var/user_inputs_block_single_var.h	/^    float dt = 0.125;                                     \/\/ timestep$/;"	v
dt	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block/user_inputs_block.h	/^    float dt = 0.125;                                     \/\/ timestep$/;"	v
dt	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point-2D/user_inputs_point_2D.h	/^    float dt = 0.060;                                     \/\/ timestep$/;"	v
dt	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point/user_inputs_point.h	/^    float dt = 0.125;                                     \/\/ timestep$/;"	v
dx	./include/Collective.h	/^    double dx;$/;"	m	class:Collective
dx	./include/EMfields3D.h	/^    double dx, dy, dz, invVOL;$/;"	m	class:EMfields3D
dx	./include/Grid3DCU.h	/^  double dx;$/;"	m	class:Grid3DCU
dx	./include/Particles3Dcomm.h	/^  double dx, dy, dz;$/;"	m	class:Particles3Dcomm
dy	./include/Collective.h	/^    double dy;$/;"	m	class:Collective
dy	./include/EMfields3D.h	/^    double dx, dy, dz, invVOL;$/;"	m	class:EMfields3D
dy	./include/Grid3DCU.h	/^  double dy;$/;"	m	class:Grid3DCU
dy	./include/Particles3Dcomm.h	/^  double dx, dy, dz;$/;"	m	class:Particles3Dcomm
dz	./include/Collective.h	/^    double dz;$/;"	m	class:Collective
dz	./include/EMfields3D.h	/^    double dx, dy, dz, invVOL;$/;"	m	class:EMfields3D
dz	./include/Grid3DCU.h	/^  double dz;$/;"	m	class:Grid3DCU
dz	./include/Particles3Dcomm.h	/^  double dx, dy, dz;$/;"	m	class:Particles3Dcomm
e	./include/input_array.h	/^  bool a, b, c, d, e, f;$/;"	m	struct:array_bool
e	./include/input_array.h	/^  double a, b, c, d, e, f;$/;"	m	struct:array_double
e	./include/input_array.h	/^  int a, b, c, d, e, f;$/;"	m	struct:array_int
end	./utility/new/diagnostics.cpp	/^void TimeTasks::end(int taskid)$/;"	f	class:TimeTasks
end_communicating	./utility/TimeTasks.cpp	/^void TimeTasks::end_communicating(double start_time)$/;"	f	class:TimeTasks
end_main_task	./utility/TimeTasks.cpp	/^void TimeTasks::end_main_task(TimeTasks::Tasks taskid, double start_time)$/;"	f	class:TimeTasks
end_task	./utility/TimeTasks.cpp	/^void TimeTasks::end_task(TimeTasks::Tasks taskid)$/;"	f	class:TimeTasks
end_task	./utility/TimeTasks.cpp	/^void TimeTasks::end_task(TimeTasks::Tasks taskid, double start_time)$/;"	f	class:TimeTasks
eprintf	./include/errors.h	11;"	d
eprintf_fileLine	./utility/errors.cpp	/^void eprintf_fileLine(FILE * fptr, const char *type,$/;"	f
eps	./include/Basic.h	/^inline double eps() {$/;"	f
eq	./include/Basic.h	/^inline void eq(arr3_double vect1, const arr3_double vect2, int nx, int ny) {$/;"	f
eq	./include/Basic.h	/^inline void eq(arr3_double vect1, const arr3_double vect2, int nx, int ny, int nz) {$/;"	f
eq	./include/Basic.h	/^inline void eq(arr4_double vect1, const arr3_double vect2, int nx, int ny, int is) {$/;"	f
eq	./include/Basic.h	/^inline void eq(arr4_double vect1, const arr3_double vect2, int nx, int ny, int nz, int is) {$/;"	f
eq	./include/Basic.h	/^inline void eq(double *vect1, double *vect2, int n) {$/;"	f
eqValue	./include/Basic.h	/^inline void eqValue(double value, arr3_double vect, int nx) {$/;"	f
eqValue	./include/Basic.h	/^inline void eqValue(double value, arr3_double vect, int nx, int ny) {$/;"	f
eqValue	./include/Basic.h	/^inline void eqValue(double value, arr3_double vect, int nx, int ny, int nz) {$/;"	f
eqValue	./include/Basic.h	/^inline void eqValue(double value, double *vect, int n) {$/;"	f
eqValue	./include/Basic.h	/^inline void eqValue(double value, double vect[][2][2], int nx, int ny, int nz) {$/;"	f
error_printf	./include/errors.h	13;"	d
errors.cpp	./utility/errors.cpp	1;"	F
errors.h	./include/errors.h	1;"	F
event1a	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
event1b	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
event2a	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
event2b	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
event3a	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
event3b	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
event4a	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
event4b	./include/Timing.h	/^  int event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;$/;"	m	class:Timing
f	./include/input_array.h	/^  bool a, b, c, d, e, f;$/;"	m	struct:array_bool
f	./include/input_array.h	/^  double a, b, c, d, e, f;$/;"	m	struct:array_double
f	./include/input_array.h	/^  int a, b, c, d, e, f;$/;"	m	struct:array_int
f0	./particles/Particles3D.cpp	/^double Particles3D::f0(double vpar, double vperp) {$/;"	f	class:Particles3D
fcmp	./utility/asserts.cpp	/^int fcmp(double x1, double x2, double epsilon)$/;"	f
fetch	./include/Alloc.h	/^      type& fetch(size_t n2, size_t n1) const$/;"	f	class:iPic3D::array_ref2
fetch	./include/Alloc.h	/^      type& fetch(size_t n2,size_t n1) const$/;"	f	class:iPic3D::array_ref1
fetch	./include/Alloc.h	/^      type& fetch(size_t n3,size_t n2,size_t n1) const$/;"	f	class:iPic3D::array_ref3
fetch	./include/Alloc.h	/^      type& fetch(size_t n3,size_t n2,size_t n1) const$/;"	f	class:iPic3D::const_array_ref3
fetch	./include/Alloc.h	/^      type& fetch(size_t n4,size_t n3,size_t n2,size_t n1) const$/;"	f	class:iPic3D::array_ref4
fetch	./include/Alloc.h	/^      type& fetch(size_t n4,size_t n3,size_t n2,size_t n1) const$/;"	f	class:iPic3D::const_array_ref4
fetch	./include/arrays.h	/^  type& fetch(size_t n1)$/;"	f	class:FixedArray1D
fetch	./include/arrays.h	/^  type& fetch(size_t n1, size_t n2)$/;"	f	class:FixedArray2D
fetch	./include/arrays.h	/^  type& fetch(size_t n1, size_t n2, size_t n3)$/;"	f	struct:FixedArray3D
fetch	./include/arrays.h	/^  type& fetch(size_t n1, size_t n2, size_t n3, size_t n4)$/;"	f	class:FixedArray4D
fetch	./tests/test_arrays.cpp	/^    type& fetch(size_t n1, size_t n2, size_t n3) const$/;"	f	class:Rank3
fetch	./tests/test_arrays.cpp	/^    type& fetch(size_t n1,size_t n2) const$/;"	f	class:Rank2
fetch_arr	./include/Moments.h	/^    arr4_double fetch_arr() { return arr; }$/;"	f	class:Moments10
fetch_arr3	./include/Alloc.h	/^      type*** fetch_arr3(){ return (type***) arr3; }$/;"	f	class:iPic3D::array_ref3
fetch_arr4	./include/Alloc.h	/^      type**** fetch_arr4(){ return (type****) arr4; }$/;"	f	class:iPic3D::array_ref4
fetch_moments10Array	./include/EMfields3D.h	/^    Moments10& fetch_moments10Array(int i){$/;"	f	class:EMfields3D
fft-virtsat-point-data-with-normalization.cpp	./postprocessing_tools/c++/read-virt-sat-files-iPIC/fft-cpp-code-point/fft-virtsat-point-data-with-normalization.cpp	1;"	F
fft-virtsat-point-data.cpp	./postprocessing_tools/c++/read-virt-sat-files-iPIC/fft-cpp-code-point/fft-virtsat-point-data.cpp	1;"	F
fft2d-slice-of-vtk.cpp	./postprocessing_tools/c++/fft-2D-slice-of-vtk/fft2d-slice-of-vtk.cpp	1;"	F
fieldForPcls	./include/EMfields3D.h	/^    array4_pfloat fieldForPcls;$/;"	m	class:EMfields3D
file_id	./include/phdf5.h	/^    hid_t    file_id;$/;"	m	class:PHDF5fileClass
file_not_found	./ConfigFile/src/ConfigFile.h	/^    file_not_found(const string & filename_ = string())$/;"	f	struct:ConfigFile::file_not_found
file_not_found	./ConfigFile/src/ConfigFile.h	/^  struct file_not_found {$/;"	s	class:ConfigFile
file_not_found	./include/ConfigFile.h	/^    file_not_found(const string & filename_ = string())$/;"	f	struct:ConfigFile::file_not_found
file_not_found	./include/ConfigFile.h	/^  struct file_not_found {$/;"	s	class:ConfigFile
filename	./ConfigFile/src/ConfigFile.h	/^    string filename;$/;"	m	struct:ConfigFile::file_not_found
filename	./include/ConfigFile.h	/^    string filename;$/;"	m	struct:ConfigFile::file_not_found
filename	./include/phdf5.h	/^    string   filename;$/;"	m	class:PHDF5fileClass
finalize_mpi	./utility/MPIdata.cpp	/^void MPIdata::finalize_mpi() {$/;"	f	class:MPIdata
find_virtual_sat	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point-2D/process-virtual-sat-point-2D.cpp	/^void find_virtual_sat(float x_satellite_user,$/;"	f
find_virtual_sat	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point/process-virtual-sat-point.cpp	/^void find_virtual_sat(float x_satellite_user,$/;"	f
find_virtual_sat_block	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var-2D/process-virtual-sat-block-single-var-2D.cpp	/^void find_virtual_sat_block(float x_satellite_user,$/;"	f
find_virtual_sat_block	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var/process-virtual-sat-block-single-var.cpp	/^void find_virtual_sat_block(float x_satellite_user,$/;"	f
find_virtual_sat_block	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block/process-virtual-sat-block.cpp	/^void find_virtual_sat_block(float x_satellite_user,$/;"	f
first_cycle	./include/iPic3D.h	/^    int first_cycle;$/;"	m	class:iPic3D::c_Solver
fixBforcefree	./fields/EMfields3D.cpp	/^void EMfields3D::fixBforcefree(Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
fixBgem	./fields/EMfields3D.cpp	/^void EMfields3D::fixBgem(Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
force_free	./particles/Particles3D.cpp	/^void Particles3D::force_free(Grid * grid, Field * EMf, VirtualTopology3D * vct) {$/;"	f	class:Particles3D
fourpi	./include/Collective.h	/^    double fourpi;$/;"	m	class:Collective
fprintf_fileLine	./utility/debug.cpp	/^void fprintf_fileLine(FILE * fptr,$/;"	f
free	./include/Alloc.h	/^      void free() { AlignedFree(arr); }$/;"	f	class:iPic3D::array_ref1
free	./include/Alloc.h	/^      void free() { AlignedFree(arr); }$/;"	f	class:iPic3D::array_ref2
free	./include/Alloc.h	/^      void free() { AlignedFree(arr); }$/;"	f	class:iPic3D::base_arr
free	./include/Alloc.h	/^      void free(){ delArray3<type>((type***)arr3); }$/;"	f	class:iPic3D::array_ref3
free	./include/Alloc.h	/^      void free(){ delArray4<type>((type****)arr4); }$/;"	f	class:iPic3D::array_ref4
free	./tests/test_arrays.cpp	/^    void free() { AlignedFree(arr); }$/;"	f	class:Rank4
free	./tests/test_arrays.cpp	/^    void free() {$/;"	f	class:Rank2
free	./tests/test_arrays.cpp	/^    void free() {$/;"	f	class:Rank3
free	./tests/test_arrays.cpp	/^    void free(){ delete[] arr; }$/;"	f	class:BracketRank2
fx	./include/Particle.h	/^  float fx[3]; \/\/ mesh cell position (fraction)$/;"	m	struct:CellParticle
fxavg	./include/Particle.h	/^  float fxavg[3]; \/\/ for implicit push$/;"	m	struct:CellParticle
get	./include/Alloc.h	/^      const type& get(size_t n1) const$/;"	f	class:iPic3D::array_ref1
get	./include/Alloc.h	/^      const type& get(size_t n2,size_t n1) const$/;"	f	class:iPic3D::array_ref2
get	./include/Alloc.h	/^      const type& get(size_t n3,size_t n2,size_t n1) const$/;"	f	class:iPic3D::const_array_ref3
get	./include/Alloc.h	/^      const type& get(size_t n4,size_t n3,size_t n2,size_t n1) const$/;"	f	class:iPic3D::const_array_ref4
get	./tests/test_arrays.cpp	/^    const type& get(size_t n1, size_t n2, size_t n3) const$/;"	f	class:Rank3
getB0x	./include/Collective.h	/^    double getB0x()const{ return (B0x); }$/;"	f	class:Collective
getB0y	./include/Collective.h	/^    double getB0y()const{ return (B0y); }$/;"	f	class:Collective
getB0z	./include/Collective.h	/^    double getB0z()const{ return (B0z); }$/;"	f	class:Collective
getB1x	./include/Collective.h	/^    double getB1x()const{ return (B1x); }$/;"	f	class:Collective
getB1y	./include/Collective.h	/^    double getB1y()const{ return (B1y); }$/;"	f	class:Collective
getB1z	./include/Collective.h	/^    double getB1z()const{ return (B1z); }$/;"	f	class:Collective
getBcEMfaceXleft	./include/Collective.h	/^    int getBcEMfaceXleft()const{ return (bcEMfaceXleft); }$/;"	f	class:Collective
getBcEMfaceXright	./include/Collective.h	/^    int getBcEMfaceXright()const{ return (bcEMfaceXright); }$/;"	f	class:Collective
getBcEMfaceYleft	./include/Collective.h	/^    int getBcEMfaceYleft()const{ return (bcEMfaceYleft); }$/;"	f	class:Collective
getBcEMfaceYright	./include/Collective.h	/^    int getBcEMfaceYright()const{ return (bcEMfaceYright); }$/;"	f	class:Collective
getBcEMfaceZleft	./include/Collective.h	/^    int getBcEMfaceZleft()const{ return (bcEMfaceZleft); }$/;"	f	class:Collective
getBcEMfaceZright	./include/Collective.h	/^    int getBcEMfaceZright()const{ return (bcEMfaceZright); }$/;"	f	class:Collective
getBcPHIfaceXleft	./include/Collective.h	/^    int getBcPHIfaceXleft()const{ return (bcPHIfaceXleft); }$/;"	f	class:Collective
getBcPHIfaceXright	./include/Collective.h	/^    int getBcPHIfaceXright()const{ return (bcPHIfaceXright); }$/;"	f	class:Collective
getBcPHIfaceYleft	./include/Collective.h	/^    int getBcPHIfaceYleft()const{ return (bcPHIfaceYleft); }$/;"	f	class:Collective
getBcPHIfaceYright	./include/Collective.h	/^    int getBcPHIfaceYright()const{ return (bcPHIfaceYright); }$/;"	f	class:Collective
getBcPHIfaceZleft	./include/Collective.h	/^    int getBcPHIfaceZleft()const{ return (bcPHIfaceZleft); }$/;"	f	class:Collective
getBcPHIfaceZright	./include/Collective.h	/^    int getBcPHIfaceZright()const{ return (bcPHIfaceZright); }$/;"	f	class:Collective
getBcPfaceXleft	./include/Collective.h	/^    int getBcPfaceXleft()const{ return (bcPfaceXleft); }$/;"	f	class:Collective
getBcPfaceXright	./include/Collective.h	/^    int getBcPfaceXright()const{ return (bcPfaceXright); }$/;"	f	class:Collective
getBcPfaceYleft	./include/Collective.h	/^    int getBcPfaceYleft()const{ return (bcPfaceYleft); }$/;"	f	class:Collective
getBcPfaceYright	./include/Collective.h	/^    int getBcPfaceYright()const{ return (bcPfaceYright); }$/;"	f	class:Collective
getBcPfaceZleft	./include/Collective.h	/^    int getBcPfaceZleft()const{ return (bcPfaceZleft); }$/;"	f	class:Collective
getBcPfaceZright	./include/Collective.h	/^    int getBcPfaceZright()const{ return (bcPfaceZright); }$/;"	f	class:Collective
getBenergy	./fields/EMfields3D.cpp	/^double EMfields3D::getBenergy(void) {$/;"	f	class:EMfields3D
getBx	./include/EMfields3D.h	/^    arr3_double getBx() { return Bxn; }$/;"	f	class:EMfields3D
getBx	./include/EMfields3D.h	/^    double getBx(int X, int Y, int Z) const { return Bxn.get(X,Y,Z);}$/;"	f	class:EMfields3D
getBx_ext	./include/EMfields3D.h	/^    arr3_double getBx_ext() { return Bx_ext; }$/;"	f	class:EMfields3D
getBx_ext	./include/EMfields3D.h	/^    double getBx_ext(int X, int Y, int Z) const{return Bx_ext.get(X,Y,Z);}$/;"	f	class:EMfields3D
getBxc	./fields/EMfields3D.cpp	/^void EMfields3D::getBxc(arr3_double arr) {$/;"	f	class:EMfields3D
getBy	./include/EMfields3D.h	/^    arr3_double getBy() { return Byn; }$/;"	f	class:EMfields3D
getBy	./include/EMfields3D.h	/^    double getBy(int X, int Y, int Z) const { return Byn.get(X,Y,Z);}$/;"	f	class:EMfields3D
getBy_ext	./include/EMfields3D.h	/^    arr3_double getBy_ext() { return By_ext; }$/;"	f	class:EMfields3D
getBy_ext	./include/EMfields3D.h	/^    double getBy_ext(int X, int Y, int Z) const{return By_ext.get(X,Y,Z);}$/;"	f	class:EMfields3D
getByc	./fields/EMfields3D.cpp	/^void EMfields3D::getByc(arr3_double arr) {$/;"	f	class:EMfields3D
getBz	./include/EMfields3D.h	/^    arr3_double getBz() { return Bzn; }$/;"	f	class:EMfields3D
getBz	./include/EMfields3D.h	/^    double getBz(int X, int Y, int Z) const { return Bzn.get(X,Y,Z);}$/;"	f	class:EMfields3D
getBz_ext	./include/EMfields3D.h	/^    arr3_double getBz_ext() { return Bz_ext; }$/;"	f	class:EMfields3D
getBz_ext	./include/EMfields3D.h	/^    double getBz_ext(int X, int Y, int Z) const{return Bz_ext.get(X,Y,Z);}$/;"	f	class:EMfields3D
getBzc	./fields/EMfields3D.cpp	/^void EMfields3D::getBzc(arr3_double arr) {$/;"	f	class:EMfields3D
getC	./include/Collective.h	/^    double getC()const{ return (c); }$/;"	f	class:Collective
getCGtol	./include/Collective.h	/^    double getCGtol()const{ return (CGtol); }$/;"	f	class:Collective
getCallFinalize	./include/Collective.h	/^    bool getCallFinalize()const{ return (CallFinalize); }$/;"	f	class:Collective
getCartesian_rank	./include/VCtopology3D.h	/^  int getCartesian_rank() { return (cartesian_rank); }$/;"	f	class:VCtopology3D
getCase	./include/Collective.h	/^    string getCase()const{ return (Case); }$/;"	f	class:Collective
getColumn	./include/Basic.h	/^inline void getColumn(double *vect, double **Matrix, int column, int n) {$/;"	f
getComm	./include/VCtopology3D.h	/^  MPI_Comm getComm(){ return (CART_COMM); }$/;"	f	class:VCtopology3D
getComment	./ConfigFile/src/ConfigFile.h	/^  } string getComment() const {$/;"	f	class:ConfigFile
getComment	./include/ConfigFile.h	/^  } string getComment() const {$/;"	f	class:ConfigFile
getCoordinates	./include/VCtopology3D.h	/^  int *getCoordinates() { return (coordinates); }$/;"	f	class:VCtopology3D
getCoordinates	./include/VCtopology3D.h	/^  int getCoordinates(int dir) { return (coordinates[dir]); }$/;"	f	class:VCtopology3D
getDX	./include/Grid3DCU.h	/^  double getDX() { return (dx); }$/;"	f	class:Grid3DCU
getDY	./include/Grid3DCU.h	/^  double getDY() { return (dy); }$/;"	f	class:Grid3DCU
getDZ	./include/Grid3DCU.h	/^  double getDZ() { return (dz); }$/;"	f	class:Grid3DCU
getDelimiter	./ConfigFile/src/ConfigFile.h	/^  string getDelimiter() const {$/;"	f	class:ConfigFile
getDelimiter	./include/ConfigFile.h	/^  string getDelimiter() const {$/;"	f	class:ConfigFile
getDelta	./include/Collective.h	/^    double getDelta()const{ return (delta); }$/;"	f	class:Collective
getDiagnosticsOutputCycle	./include/Collective.h	/^    int getDiagnosticsOutputCycle()const{ return (DiagnosticsOutputCycle); }$/;"	f	class:Collective
getDim	./include/Collective.h	/^    int getDim()const{ return (dim); }$/;"	f	class:Collective
getDt	./include/Collective.h	/^    double getDt()const{ return (dt); }$/;"	f	class:Collective
getDx	./include/Collective.h	/^    double getDx()const{ return (dx); }$/;"	f	class:Collective
getDy	./include/Collective.h	/^    double getDy()const{ return (dy); }$/;"	f	class:Collective
getDz	./include/Collective.h	/^    double getDz()const{ return (dz); }$/;"	f	class:Collective
getEenergy	./fields/EMfields3D.cpp	/^double EMfields3D::getEenergy(void) {$/;"	f	class:EMfields3D
getEx	./include/EMfields3D.h	/^    arr3_double getEx() { return Ex; }$/;"	f	class:EMfields3D
getEx	./include/EMfields3D.h	/^    double getEx(int X, int Y, int Z) const { return Ex.get(X,Y,Z);}$/;"	f	class:EMfields3D
getExc	./fields/EMfields3D.cpp	/^void EMfields3D::getExc(arr3_double arr, Grid3DCU *grid) {$/;"	f	class:EMfields3D
getExecutionTime	./performances/Timing.cpp	/^double Timing::getExecutionTime() {$/;"	f	class:Timing
getEy	./include/EMfields3D.h	/^    arr3_double getEy() { return Ey; }$/;"	f	class:EMfields3D
getEy	./include/EMfields3D.h	/^    double getEy(int X, int Y, int Z) const { return Ey.get(X,Y,Z);}$/;"	f	class:EMfields3D
getEyc	./fields/EMfields3D.cpp	/^void EMfields3D::getEyc(arr3_double arr, Grid3DCU *grid) {$/;"	f	class:EMfields3D
getEz	./include/EMfields3D.h	/^    arr3_double getEz() { return Ez; }$/;"	f	class:EMfields3D
getEz	./include/EMfields3D.h	/^    double getEz(int X, int Y, int Z) const { return Ez.get(X,Y,Z);}$/;"	f	class:EMfields3D
getEzc	./fields/EMfields3D.cpp	/^void EMfields3D::getEzc(arr3_double arr, Grid3DCU *grid) {$/;"	f	class:EMfields3D
getFieldOutputCycle	./include/Collective.h	/^    int getFieldOutputCycle()const{ return (FieldOutputCycle); }$/;"	f	class:Collective
getFluidLx	./include/InterfaceFluid.h	/^  inline double getFluidLx(){ return(XYZ_D[0]); };$/;"	f	class:InterfaceFluid
getFluidLy	./include/InterfaceFluid.h	/^  inline double getFluidLy(){ return(XYZ_D[1]); };$/;"	f	class:InterfaceFluid
getFluidLz	./include/InterfaceFluid.h	/^  inline double getFluidLz(){ return(XYZ_D[2]); };$/;"	f	class:InterfaceFluid
getFluidNxc	./include/InterfaceFluid.h	/^  inline double getFluidNxc()$/;"	f	class:InterfaceFluid
getFluidNyc	./include/InterfaceFluid.h	/^  inline double getFluidNyc()$/;"	f	class:InterfaceFluid
getFluidNzc	./include/InterfaceFluid.h	/^  inline double getFluidNzc()$/;"	f	class:InterfaceFluid
getFluidRhoCenter	./include/InterfaceFluid.h	/^  inline double getFluidRhoCenter(const int ii,const int jj, const int kk, const int is)$/;"	f	class:InterfaceFluid
getFluidUthx	./include/InterfaceFluid.h	/^  inline double getFluidUthx(const int i, const int j,const int k, const int is)$/;"	f	class:InterfaceFluid
getFluidUthy	./include/InterfaceFluid.h	/^  inline double getFluidUthy(const int i, const int j,const int k, const int is)$/;"	f	class:InterfaceFluid
getFluidUthz	./include/InterfaceFluid.h	/^  inline double getFluidUthz(const int i, const int j,const int k, const int is)$/;"	f	class:InterfaceFluid
getFluidUx	./include/InterfaceFluid.h	/^  inline double getFluidUx(const int i, const int j,const int k, const int is)$/;"	f	class:InterfaceFluid
getFluidUy	./include/InterfaceFluid.h	/^  inline double getFluidUy(const int i, const int j,const int k, const int is)$/;"	f	class:InterfaceFluid
getFluidUz	./include/InterfaceFluid.h	/^  inline double getFluidUz(const int i, const int j,const int k, const int is)$/;"	f	class:InterfaceFluid
getGMREStol	./include/Collective.h	/^    double getGMREStol()const{ return (GMREStol); }$/;"	f	class:Collective
getGlobalIndex	./include/InterfaceFluid.h	/^  inline void getGlobalIndex(const int il, const int jl, const int kl,$/;"	f	class:InterfaceFluid
getInvVOL	./include/Grid3DCU.h	/^  double getInvVOL() { return (invVOL); }$/;"	f	class:Grid3DCU
getJx	./include/EMfields3D.h	/^    arr3_double getJx() { return Jx; }$/;"	f	class:EMfields3D
getJx	./include/EMfields3D.h	/^    double getJx(int X, int Y, int Z) const { return Jx.get(X,Y,Z);}$/;"	f	class:EMfields3D
getJxs	./include/EMfields3D.h	/^    arr4_double getJxs() { return Jxs; }$/;"	f	class:EMfields3D
getJxs	./include/EMfields3D.h	/^    double getJxs(int X,int Y,int Z,int is)const{return Jxs.get(is,X,Y,Z);}$/;"	f	class:EMfields3D
getJxsc	./fields/EMfields3D.cpp	/^void EMfields3D::getJxsc(arr3_double arr, Grid3DCU *grid, int is) {$/;"	f	class:EMfields3D
getJy	./include/EMfields3D.h	/^    arr3_double getJy() { return Jy; }$/;"	f	class:EMfields3D
getJy	./include/EMfields3D.h	/^    double getJy(int X, int Y, int Z) const { return Jy.get(X,Y,Z);}$/;"	f	class:EMfields3D
getJys	./include/EMfields3D.h	/^    arr4_double getJys() { return Jys; }$/;"	f	class:EMfields3D
getJys	./include/EMfields3D.h	/^    double getJys(int X,int Y,int Z,int is)const{return Jys.get(is,X,Y,Z);}$/;"	f	class:EMfields3D
getJysc	./fields/EMfields3D.cpp	/^void EMfields3D::getJysc(arr3_double arr, Grid3DCU *grid, int is) {$/;"	f	class:EMfields3D
getJz	./include/EMfields3D.h	/^    arr3_double getJz() { return Jz; }$/;"	f	class:EMfields3D
getJz	./include/EMfields3D.h	/^    double getJz(int X, int Y, int Z) const { return Jz.get(X,Y,Z);}$/;"	f	class:EMfields3D
getJzs	./include/EMfields3D.h	/^    arr4_double getJzs() { return Jzs; }$/;"	f	class:EMfields3D
getJzs	./include/EMfields3D.h	/^    double getJzs(int X,int Y,int Z,int is)const{return Jzs.get(is,X,Y,Z);}$/;"	f	class:EMfields3D
getJzsc	./fields/EMfields3D.cpp	/^void EMfields3D::getJzsc(arr3_double arr, Grid3DCU *grid, int is) {$/;"	f	class:EMfields3D
getKe	./particles/Particles3Dcomm.cpp	/^double Particles3Dcomm::getKe() {$/;"	f	class:Particles3Dcomm
getL_square	./include/Collective.h	/^    double getL_square()const{ return (L_square); }$/;"	f	class:Collective
getLast_cycle	./include/Collective.h	/^    int getLast_cycle()const{ return (last_cycle); }$/;"	f	class:Collective
getLx	./include/Collective.h	/^    double getLx()const{ return (Lx); }$/;"	f	class:Collective
getLy	./include/Collective.h	/^    double getLy()const{ return (Ly); }$/;"	f	class:Collective
getLz	./include/Collective.h	/^    double getLz()const{ return (Lz); }$/;"	f	class:Collective
getMaxVelocity	./particles/Particles3Dcomm.cpp	/^double Particles3Dcomm::getMaxVelocity() {$/;"	f	class:Particles3Dcomm
getNOP	./include/Particles3Dcomm.h	/^  int getNOP()  const { return (nop); }$/;"	f	class:Particles3Dcomm
getNXC	./include/Grid3DCU.h	/^  int getNXC() { return (nxc); }$/;"	f	class:Grid3DCU
getNXN	./include/Grid3DCU.h	/^  int getNXN() { return (nxn); }$/;"	f	class:Grid3DCU
getNYC	./include/Grid3DCU.h	/^  int getNYC() { return (nyc); }$/;"	f	class:Grid3DCU
getNYN	./include/Grid3DCU.h	/^  int getNYN() { return (nyn); }$/;"	f	class:Grid3DCU
getNZC	./include/Grid3DCU.h	/^  int getNZC() { return (nzc); }$/;"	f	class:Grid3DCU
getNZN	./include/Grid3DCU.h	/^  int getNZN() { return (nzn); }$/;"	f	class:Grid3DCU
getNcycles	./include/Collective.h	/^    int getNcycles()const{ return (ncycles); }$/;"	f	class:Collective
getNiterMover	./include/Collective.h	/^    int getNiterMover()const{ return (NiterMover); }$/;"	f	class:Collective
getNp	./include/Collective.h	/^    int getNp(int nspecies)const{ return (np[nspecies]); }$/;"	f	class:Collective
getNpMax	./include/Collective.h	/^    int getNpMax(int nspecies)const{ return (npMax[nspecies]); }$/;"	f	class:Collective
getNpMaxNpRatio	./include/Collective.h	/^    double getNpMaxNpRatio()const{ return (NpMaxNpRatio); }$/;"	f	class:Collective
getNpcel	./include/Collective.h	/^    int getNpcel(int nspecies)const{ return (npcel[nspecies]); }$/;"	f	class:Collective
getNpcelx	./include/Collective.h	/^    int getNpcelx(int nspecies)const{ return (npcelx[nspecies]); }$/;"	f	class:Collective
getNpcely	./include/Collective.h	/^    int getNpcely(int nspecies)const{ return (npcely[nspecies]); }$/;"	f	class:Collective
getNpcelz	./include/Collective.h	/^    int getNpcelz(int nspecies)const{ return (npcelz[nspecies]); }$/;"	f	class:Collective
getNprocs	./include/VCtopology3D.h	/^  int getNprocs() { return (nprocs); }$/;"	f	class:VCtopology3D
getNs	./include/Collective.h	/^    int getNs()const{ return (ns); }$/;"	f	class:Collective
getNxc	./include/Collective.h	/^    int getNxc()const{ return (nxc); }$/;"	f	class:Collective
getNyc	./include/Collective.h	/^    int getNyc()const{ return (nyc); }$/;"	f	class:Collective
getNzc	./include/Collective.h	/^    int getNzc()const{ return (nzc); }$/;"	f	class:Collective
getP	./particles/Particles3Dcomm.cpp	/^double Particles3Dcomm::getP() {$/;"	f	class:Particles3Dcomm
getPERIODICX	./include/Collective.h	/^    bool getPERIODICX()const{ return (PERIODICX); }$/;"	f	class:Collective
getPERIODICX	./include/VCtopology3D.h	/^  bool getPERIODICX() { return (PERIODICX); }$/;"	f	class:VCtopology3D
getPERIODICY	./include/Collective.h	/^    bool getPERIODICY()const{ return (PERIODICY); }$/;"	f	class:Collective
getPERIODICY	./include/VCtopology3D.h	/^  bool getPERIODICY() { return (PERIODICY); }$/;"	f	class:VCtopology3D
getPERIODICZ	./include/Collective.h	/^    bool getPERIODICZ()const{ return (PERIODICZ); }$/;"	f	class:Collective
getPERIODICZ	./include/VCtopology3D.h	/^  bool getPERIODICZ() { return (PERIODICZ); }$/;"	f	class:VCtopology3D
getPHDF5ncx	./inputoutput/phdf5.cpp	/^int PHDF5fileClass::getPHDF5ncx(){$/;"	f	class:PHDF5fileClass
getPHDF5ncy	./inputoutput/phdf5.cpp	/^int PHDF5fileClass::getPHDF5ncy(){$/;"	f	class:PHDF5fileClass
getPHDF5ncz	./inputoutput/phdf5.cpp	/^int PHDF5fileClass::getPHDF5ncz(){$/;"	f	class:PHDF5fileClass
getPHDF5ndim	./inputoutput/phdf5.cpp	/^int PHDF5fileClass::getPHDF5ndim(){$/;"	f	class:PHDF5fileClass
getPHI	./include/EMfields3D.h	/^    arr3_double getPHI() {return PHI;}$/;"	f	class:EMfields3D
getParticleID	./include/Particles3Dcomm.h	/^  long long getParticleID(int indexPart)  const$/;"	f	class:Particles3Dcomm
getParticleIDall	./include/Particles3Dcomm.h	/^  long long *getParticleIDall()  const { return (ParticleID); }$/;"	f	class:Particles3Dcomm
getParticlesOutputCycle	./include/Collective.h	/^    int getParticlesOutputCycle()const{ return (ParticlesOutputCycle); }$/;"	f	class:Collective
getPeriods	./include/VCtopology3D.h	/^  int getPeriods(int dir) { return (periods[dir]); }$/;"	f	class:VCtopology3D
getPoissonCorrection	./include/Collective.h	/^    string getPoissonCorrection()const{ return (PoissonCorrection); }$/;"	f	class:Collective
getQ	./include/Particles3Dcomm.h	/^  double getQ(int indexPart)  const { return (q[indexPart]); }$/;"	f	class:Particles3Dcomm
getQOM	./include/Collective.h	/^    double getQOM(int nspecies)const{ return (qom[nspecies]); }$/;"	f	class:Collective
getQall	./include/Particles3Dcomm.h	/^  double *getQall()  const { return (q); }$/;"	f	class:Particles3Dcomm
getRHOc	./include/EMfields3D.h	/^    arr3_double getRHOc() { return rhoc; }$/;"	f	class:EMfields3D
getRHOc	./include/EMfields3D.h	/^    double getRHOc(int X, int Y, int Z) const { return rhoc.get(X,Y,Z);}$/;"	f	class:EMfields3D
getRHOcs	./fields/EMfields3D.cpp	/^void EMfields3D::getRHOcs(arr3_double arr, Grid3DCU *grid, int is) {$/;"	f	class:EMfields3D
getRHOcs	./include/EMfields3D.h	/^    double getRHOcs(int X,int Y,int Z,int is)const{return rhocs.get(is,X,Y,Z);}$/;"	f	class:EMfields3D
getRHOinit	./include/Collective.h	/^    double getRHOinit(int nspecies)const{ return (rhoINIT[nspecies]); }$/;"	f	class:Collective
getRHOinject	./include/Collective.h	/^    double getRHOinject(int nspecies)const { return(rhoINJECT[nspecies]); }$/;"	f	class:Collective
getRHOn	./include/EMfields3D.h	/^    arr3_double getRHOn() { return rhon; }$/;"	f	class:EMfields3D
getRHOn	./include/EMfields3D.h	/^    double getRHOn(int X, int Y, int Z) const { return rhon.get(X,Y,Z);}$/;"	f	class:EMfields3D
getRHOns	./include/EMfields3D.h	/^    arr4_double getRHOns(){return rhons;}$/;"	f	class:EMfields3D
getRHOns	./include/EMfields3D.h	/^    double getRHOns(int X,int Y,int Z,int is)const{return rhons.get(is,X,Y,Z);}$/;"	f	class:EMfields3D
getRestartDirName	./include/Collective.h	/^    string getRestartDirName()const{ return (RestartDirName); }$/;"	f	class:Collective
getRestartOutputCycle	./include/Collective.h	/^    int getRestartOutputCycle()const{ return (RestartOutputCycle); }$/;"	f	class:Collective
getRestart_status	./include/Collective.h	/^    int getRestart_status()const{ return (restart_status); }$/;"	f	class:Collective
getRidGhost	./include/Basic.h	/^inline void getRidGhost(double **out, double **in, int nx, int ny) {$/;"	f
getSaveDirName	./include/Collective.h	/^    string getSaveDirName()const{ return (SaveDirName); }$/;"	f	class:Collective
getSentry	./ConfigFile/src/ConfigFile.h	/^  } string getSentry() const {$/;"	f	class:ConfigFile
getSentry	./include/ConfigFile.h	/^  } string getSentry() const {$/;"	f	class:ConfigFile
getSimName	./include/Collective.h	/^    string getSimName()const{ return (SimName); }$/;"	f	class:Collective
getSmooth	./include/Collective.h	/^    double getSmooth()const{ return (Smooth); }$/;"	f	class:Collective
getTh	./include/Collective.h	/^    double getTh()const{ return (th); }$/;"	f	class:Collective
getTrackParticleID	./include/Collective.h	/^    bool getTrackParticleID(int nspecies)const$/;"	f	class:Collective
getU	./include/Particles3Dcomm.h	/^  double getU(int indexPart)  const { return (u[indexPart]); }$/;"	f	class:Particles3Dcomm
getU0	./include/Collective.h	/^    double getU0(int nspecies)const{ return (u0[nspecies]); }$/;"	f	class:Collective
getUall	./include/Particles3Dcomm.h	/^  double *getUall()  const { return (u); }$/;"	f	class:Particles3Dcomm
getUth	./include/Collective.h	/^    double getUth(int nspecies)const{ return (uth[nspecies]); }$/;"	f	class:Collective
getV	./include/Particles3Dcomm.h	/^  double getV(int indexPart)  const { return (v[indexPart]); }$/;"	f	class:Particles3Dcomm
getV0	./include/Collective.h	/^    double getV0(int nspecies)const{ return (v0[nspecies]); }$/;"	f	class:Collective
getVall	./include/Particles3Dcomm.h	/^  double *getVall()  const { return (v); }$/;"	f	class:Particles3Dcomm
getVelocityDistribution	./particles/Particles3Dcomm.cpp	/^long long *Particles3Dcomm::getVelocityDistribution(int nBins, double maxVel) {$/;"	f	class:Particles3Dcomm
getVerbose	./include/Collective.h	/^    bool getVerbose()const{ return (verbose); }$/;"	f	class:Collective
getVinj	./include/Collective.h	/^    double getVinj()const{ return (Vinj); }$/;"	f	class:Collective
getVth	./include/Collective.h	/^    double getVth(int nspecies)const{ return (vth[nspecies]); }$/;"	f	class:Collective
getW	./include/Particles3Dcomm.h	/^  double getW(int indexPart)  const { return (w[indexPart]); }$/;"	f	class:Particles3Dcomm
getW0	./include/Collective.h	/^    double getW0(int nspecies)const{ return (w0[nspecies]); }$/;"	f	class:Collective
getWall	./include/Particles3Dcomm.h	/^  double *getWall()  const { return (w); }$/;"	f	class:Particles3Dcomm
getWriteMethod	./include/Collective.h	/^    string getWriteMethod()const{ return (wmethod); }$/;"	f	class:Collective
getWth	./include/Collective.h	/^    double getWth(int nspecies)const{ return (wth[nspecies]); }$/;"	f	class:Collective
getX	./include/Particles3Dcomm.h	/^  double getX(int indexPart)  const { return (x[indexPart]); }$/;"	f	class:Particles3Dcomm
getXC	./include/Grid3DCU.h	/^  const double &getXC(int X)const{ return center_xcoord[X];}$/;"	f	class:Grid3DCU
getXC	./include/Grid3DCU.h	/^  const double &getXC(int X, int Y, int Z) { return center_xcoord[X];}$/;"	f	class:Grid3DCU
getXLEN	./include/Collective.h	/^    int getXLEN()const{ return (XLEN); }$/;"	f	class:Collective
getXLEN	./include/VCtopology3D.h	/^  int getXLEN() { return (XLEN); }$/;"	f	class:VCtopology3D
getXN	./include/Grid3DCU.h	/^  const double &getXN(int X)const{ return node_xcoord[X];}$/;"	f	class:Grid3DCU
getXN	./include/Grid3DCU.h	/^  const double &getXN(int X, int Y, int Z) { return node_xcoord[X];}$/;"	f	class:Grid3DCU
getXall	./include/Particles3Dcomm.h	/^  double *getXall()  const { return (x); }$/;"	f	class:Particles3Dcomm
getXend	./include/Grid3DCU.h	/^  double getXend() { return (xEnd); }$/;"	f	class:Grid3DCU
getXleft_neighbor	./include/VCtopology3D.h	/^  int getXleft_neighbor() { return (xleft_neighbor); }$/;"	f	class:VCtopology3D
getXleft_neighbor_P	./include/VCtopology3D.h	/^  int getXleft_neighbor_P() { return (xleft_neighbor_P); }$/;"	f	class:VCtopology3D
getXright_neighbor	./include/VCtopology3D.h	/^  int getXright_neighbor() { return (xright_neighbor); }$/;"	f	class:VCtopology3D
getXright_neighbor_P	./include/VCtopology3D.h	/^  int getXright_neighbor_P() { return (xright_neighbor_P); }$/;"	f	class:VCtopology3D
getXstart	./include/Grid3DCU.h	/^  double getXstart() { return (xStart); }$/;"	f	class:Grid3DCU
getY	./include/Particles3Dcomm.h	/^  double getY(int indexPart)  const { return (y[indexPart]); }$/;"	f	class:Particles3Dcomm
getYC	./include/Grid3DCU.h	/^  const double &getYC(int X, int Y, int Z) { return center_ycoord[Y];}$/;"	f	class:Grid3DCU
getYC	./include/Grid3DCU.h	/^  const double &getYC(int Y)const{ return center_ycoord[Y];}$/;"	f	class:Grid3DCU
getYLEN	./include/Collective.h	/^    int getYLEN()const{ return (YLEN); }$/;"	f	class:Collective
getYLEN	./include/VCtopology3D.h	/^  int getYLEN() { return (YLEN); }$/;"	f	class:VCtopology3D
getYN	./include/Grid3DCU.h	/^  const double &getYN(int X, int Y, int Z) { return node_ycoord[Y];}$/;"	f	class:Grid3DCU
getYN	./include/Grid3DCU.h	/^  const double &getYN(int Y)const{ return node_ycoord[Y];}$/;"	f	class:Grid3DCU
getYall	./include/Particles3Dcomm.h	/^  double *getYall()  const { return (y); }$/;"	f	class:Particles3Dcomm
getYend	./include/Grid3DCU.h	/^  double getYend() { return (yEnd); } $/;"	f	class:Grid3DCU
getYleft_neighbor	./include/VCtopology3D.h	/^  int getYleft_neighbor() { return (yleft_neighbor); }$/;"	f	class:VCtopology3D
getYleft_neighbor_P	./include/VCtopology3D.h	/^  int getYleft_neighbor_P() { return (yleft_neighbor_P); }$/;"	f	class:VCtopology3D
getYright_neighbor	./include/VCtopology3D.h	/^  int getYright_neighbor() { return (yright_neighbor); }$/;"	f	class:VCtopology3D
getYright_neighbor_P	./include/VCtopology3D.h	/^  int getYright_neighbor_P() { return (yright_neighbor_P); }$/;"	f	class:VCtopology3D
getYstart	./include/Grid3DCU.h	/^  double getYstart() { return (yStart); }$/;"	f	class:Grid3DCU
getZ	./include/Particles3Dcomm.h	/^  double getZ(int indexPart)  const { return (z[indexPart]); }$/;"	f	class:Particles3Dcomm
getZC	./include/Grid3DCU.h	/^  const double &getZC(int X, int Y, int Z) { return center_zcoord[Z];}$/;"	f	class:Grid3DCU
getZC	./include/Grid3DCU.h	/^  const double &getZC(int Z)const{ return center_zcoord[Z];}$/;"	f	class:Grid3DCU
getZLEN	./include/Collective.h	/^    int getZLEN()const{ return (ZLEN); }$/;"	f	class:Collective
getZLEN	./include/VCtopology3D.h	/^  int getZLEN() { return (ZLEN); }$/;"	f	class:VCtopology3D
getZN	./include/Grid3DCU.h	/^  const double &getZN(int X, int Y, int Z) { return node_zcoord[Z];}$/;"	f	class:Grid3DCU
getZN	./include/Grid3DCU.h	/^  const double &getZN(int Z)const{ return node_zcoord[Z];}$/;"	f	class:Grid3DCU
getZall	./include/Particles3Dcomm.h	/^  double *getZall()  const { return (z); }$/;"	f	class:Particles3Dcomm
getZend	./include/Grid3DCU.h	/^  double getZend() { return (zEnd); }$/;"	f	class:Grid3DCU
getZleft_neighbor	./include/VCtopology3D.h	/^  int getZleft_neighbor() { return (zleft_neighbor); }$/;"	f	class:VCtopology3D
getZleft_neighbor_P	./include/VCtopology3D.h	/^  int getZleft_neighbor_P() { return (zleft_neighbor_P); }$/;"	f	class:VCtopology3D
getZright_neighbor	./include/VCtopology3D.h	/^  int getZright_neighbor() { return (zright_neighbor); }$/;"	f	class:VCtopology3D
getZright_neighbor_P	./include/VCtopology3D.h	/^  int getZright_neighbor_P() { return (zright_neighbor_P); }$/;"	f	class:VCtopology3D
getZstart	./include/Grid3DCU.h	/^  double getZstart() { return (zStart); }$/;"	f	class:Grid3DCU
get_ID	./include/Particle.h	/^  long long get_ID()const{ return ID; }$/;"	f	class:SpeciesParticle
get_ID	./include/Particle.h	/^  long long get_ID()const{ return ID; }$/;"	f	struct:CellParticle
get_InfoFieldsBottom	./fields/EMfields3D.cpp	/^injInfoFields* EMfields3D::get_InfoFieldsBottom() {return injFieldsBottom;}$/;"	f	class:EMfields3D
get_InfoFieldsFront	./fields/EMfields3D.cpp	/^injInfoFields* EMfields3D::get_InfoFieldsFront() {return injFieldsFront;}$/;"	f	class:EMfields3D
get_InfoFieldsLeft	./fields/EMfields3D.cpp	/^injInfoFields* EMfields3D::get_InfoFieldsLeft() {return injFieldsLeft;}$/;"	f	class:EMfields3D
get_InfoFieldsRear	./fields/EMfields3D.cpp	/^injInfoFields* EMfields3D::get_InfoFieldsRear() {return injFieldsRear;}$/;"	f	class:EMfields3D
get_InfoFieldsRight	./fields/EMfields3D.cpp	/^injInfoFields* EMfields3D::get_InfoFieldsRight() {return injFieldsRight;}$/;"	f	class:EMfields3D
get_InfoFieldsTop	./fields/EMfields3D.cpp	/^injInfoFields* EMfields3D::get_InfoFieldsTop() {return injFieldsTop;}$/;"	f	class:EMfields3D
get_SORTING_PARTICLES	./main/Parameters.cpp	/^bool Parameters::get_SORTING_PARTICLES() { return true; }$/;"	f	class:Parameters
get_USING_XAVG	./main/Parameters.cpp	/^bool Parameters::get_USING_XAVG() { return get_SORTING_PARTICLES(); }$/;"	f	class:Parameters
get_VECTORIZE_MOMENTS	./main/Parameters.cpp	/^bool Parameters::get_VECTORIZE_MOMENTS() { return false; }$/;"	f	class:Parameters
get_VECTORIZE_MOVER	./main/Parameters.cpp	/^bool Parameters::get_VECTORIZE_MOVER() { return false; }$/;"	f	class:Parameters
get_arr	./include/Alloc.h	/^      type* get_arr()const{return arr;}$/;"	f	class:iPic3D::base_arr
get_bucket_offset	./include/Particles3Dcomm.h	/^  int get_bucket_offset(int cx, int cy, int cz)const$/;"	f	class:Particles3Dcomm
get_cell_for_pos_in_domain	./include/Particles3Dcomm.h	/^  void get_cell_for_pos_in_domain($/;"	f	class:Particles3Dcomm
get_communicate	./include/TimeTasks.h	/^  double get_communicate(int arg) {$/;"	f	class:TimeTasks
get_communicating	./include/TimeTasks.h	/^  bool get_communicating() { return communicating; }$/;"	f	class:TimeTasks
get_compute	./include/TimeTasks.h	/^  double get_compute(int arg) {$/;"	f	class:TimeTasks
get_dataset_context	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::get_dataset_context(const std::string & name, std::vector < hid_t > &hid_array, std::string & dataset_name) {$/;"	f	class:HDF5OutputAdaptor
get_fieldForPcls	./include/EMfields3D.h	/^    const_arr4_pfloat get_fieldForPcls() { return fieldForPcls; }$/;"	f	class:EMfields3D
get_fx	./include/Particle.h	/^  float get_fx()const{ return fx[0]; }$/;"	f	struct:CellParticle
get_fy	./include/Particle.h	/^  float get_fy()const{ return fx[1]; }$/;"	f	struct:CellParticle
get_fz	./include/Particle.h	/^  float get_fz()const{ return fx[2]; }$/;"	f	struct:CellParticle
get_invdx	./include/Grid3DCU.h	/^  double get_invdx() { return (invdx); }$/;"	f	class:Grid3DCU
get_invdy	./include/Grid3DCU.h	/^  double get_invdy() { return (invdy); }$/;"	f	class:Grid3DCU
get_invdz	./include/Grid3DCU.h	/^  double get_invdz() { return (invdz); }$/;"	f	class:Grid3DCU
get_myrank	./include/iPic3D.h	/^  inline int c_Solver::get_myrank() {$/;"	f	class:iPic3D::c_Solver
get_nprocs	./include/MPIdata.h	/^  static int get_nprocs(){return instance().nprocs;}$/;"	f	class:MPIdata
get_ns	./include/Particles3Dcomm.h	/^  int get_ns()const{return ns;}$/;"	f	class:Particles3Dcomm
get_numpcls_in_bucket	./include/Particles3Dcomm.h	/^  int get_numpcls_in_bucket(int cx, int cy, int cz)const$/;"	f	class:Particles3Dcomm
get_particleType	./include/Particles3Dcomm.h	/^  ParticleType::Type get_particleType()const { return particleType; }$/;"	f	class:Particles3Dcomm
get_pcl	./include/Particles3Dcomm.h	/^  const SpeciesParticle& get_pcl(int pidx)const{ return pcls[pidx]; }$/;"	f	class:Particles3Dcomm
get_pfloat_XN	./include/Grid3DCU.h	/^  const pfloat &get_pfloat_XN(int X)const{ return pfloat_node_xcoord[X];}$/;"	f	class:Grid3DCU
get_pfloat_YN	./include/Grid3DCU.h	/^  const pfloat &get_pfloat_YN(int Y)const{ return pfloat_node_ycoord[Y];}$/;"	f	class:Grid3DCU
get_pfloat_ZN	./include/Grid3DCU.h	/^  const pfloat &get_pfloat_ZN(int Z)const{ return pfloat_node_zcoord[Z];}$/;"	f	class:Grid3DCU
get_q	./include/Particle.h	/^  double get_q()const{ return q; }$/;"	f	class:SpeciesParticle
get_q	./include/Particle.h	/^  float get_q()const{ return q; }$/;"	f	struct:CellParticle
get_rank	./include/MPIdata.h	/^  static int get_rank(){return instance().rank;}$/;"	f	class:MPIdata
get_rank	./utility/new/diagnostics.cpp	/^int get_rank() { return mpi->rank; }$/;"	f
get_safe_cell_for_pos	./include/Particles3Dcomm.h	/^  void get_safe_cell_for_pos($/;"	f	class:Particles3Dcomm
get_size	./include/Alloc.h	/^      int get_size() const { return size; }$/;"	f	class:iPic3D::const_array_ref4
get_size	./include/Alloc.h	/^      int get_size() { return size; }$/;"	f	class:iPic3D::base_arr
get_sizeMomentsArray	./include/EMfields3D.h	/^    int get_sizeMomentsArray() { return sizeMomentsArray; }$/;"	f	class:EMfields3D
get_stack_depth	./include/TimeTasks.h	/^  int get_stack_depth(TimeTasks::Tasks taskid) { return stack_depth[taskid]; }$/;"	f	class:TimeTasks
get_taskname	./utility/TimeTasks.cpp	/^const char* TimeTasks::get_taskname(int arg)$/;"	f	class:TimeTasks
get_time	./include/TimeTasks.h	/^  double get_time(int arg) {$/;"	f	class:TimeTasks
get_u	./include/Particle.h	/^  double get_u()const{ return u[0]; }$/;"	f	class:SpeciesParticle
get_u	./include/Particle.h	/^  double get_u(int i)const{ return u[i]; }$/;"	f	class:SpeciesParticle
get_u	./include/Particle.h	/^  float get_u()const{ return u[0]; }$/;"	f	struct:CellParticle
get_v	./include/Particle.h	/^  double get_v()const{ return u[1]; }$/;"	f	class:SpeciesParticle
get_v	./include/Particle.h	/^  float get_v()const{ return u[1]; }$/;"	f	struct:CellParticle
get_w	./include/Particle.h	/^  double get_w()const{ return u[2]; }$/;"	f	class:SpeciesParticle
get_w	./include/Particle.h	/^  float get_w()const{ return u[2]; }$/;"	f	struct:CellParticle
get_x	./include/Particle.h	/^  double get_x()const{ return x[0]; }$/;"	f	class:SpeciesParticle
get_x	./include/Particle.h	/^  double get_x(int i)const{ return x[i]; }$/;"	f	class:SpeciesParticle
get_y	./include/Particle.h	/^  double get_y()const{ return x[1]; }$/;"	f	class:SpeciesParticle
get_z	./include/Particle.h	/^  double get_z()const{ return x[2]; }$/;"	f	class:SpeciesParticle
getcVERBOSE	./include/VCtopology3D.h	/^  bool getcVERBOSE() { return (cVERBOSE); }$/;"	f	class:VCtopology3D
getidx	./include/Alloc.h	/^      inline size_t getidx(size_t n1) const$/;"	f	class:iPic3D::array_ref1
getidx	./include/Alloc.h	/^      inline size_t getidx(size_t n2, size_t n1) const$/;"	f	class:iPic3D::array_ref2
getidx	./include/Alloc.h	/^      inline size_t getidx(size_t n3, size_t n2, size_t n1) const$/;"	f	class:iPic3D::const_array_ref3
getidx	./include/Alloc.h	/^      inline size_t getidx(size_t n4, size_t n3, size_t n2, size_t n1) const$/;"	f	class:iPic3D::const_array_ref4
getinputfile	./include/Collective.h	/^    string getinputfile()const{ return (inputfile); }$/;"	f	class:Collective
getpXXsn	./include/EMfields3D.h	/^    arr4_double getpXXsn() { return pXXsn; }$/;"	f	class:EMfields3D
getpXYsn	./include/EMfields3D.h	/^    arr4_double getpXYsn() { return pXYsn; }$/;"	f	class:EMfields3D
getpXZsn	./include/EMfields3D.h	/^    arr4_double getpXZsn() { return pXZsn; }$/;"	f	class:EMfields3D
getpYYsn	./include/EMfields3D.h	/^    arr4_double getpYYsn() { return pYYsn; }$/;"	f	class:EMfields3D
getpYZsn	./include/EMfields3D.h	/^    arr4_double getpYZsn() { return pYZsn; }$/;"	f	class:EMfields3D
getpZZsn	./include/EMfields3D.h	/^    arr4_double getpZZsn() { return pZZsn; }$/;"	f	class:EMfields3D
getx_center	./include/Collective.h	/^    double getx_center()const{ return (x_center); }$/;"	f	class:Collective
gety_center	./include/Collective.h	/^    double gety_center()const{ return (y_center); }$/;"	f	class:Collective
getz_center	./include/Collective.h	/^    double getz_center()const{ return (z_center); }$/;"	f	class:Collective
gradC2N	./grids/Grid3DCU.cpp	/^void Grid3DCU::gradC2N(arr3_double gradXN, arr3_double gradYN, arr3_double gradZN, const_arr3_double scFieldC) {$/;"	f	class:Grid3DCU
gradN2C	./grids/Grid3DCU.cpp	/^void Grid3DCU::gradN2C(arr3_double gradXC, arr3_double gradYC, arr3_double gradZC, const_arr3_double scFieldN) {$/;"	f	class:Grid3DCU
grid	./include/iPic3D.h	/^    Grid3DCU      *grid;$/;"	m	class:iPic3D::c_Solver
grpnames	./include/phdf5.h	/^    string grpnames[3];$/;"	m	class:PHDF5fileClass
hdf5_agent	./include/iPic3D.h	/^    myOutputAgent < PSK::HDF5OutputAdaptor > hdf5_agent;  \/\/ Create an Output Agent for HDF5 output$/;"	m	class:iPic3D::c_Solver
iBx	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
iBy	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
iBz	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
iP	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
iPic3D	./include/Alloc.h	/^namespace iPic3D$/;"	n
iPic3D	./include/arraysfwd.h	/^namespace iPic3D$/;"	n
iPic3D	./include/iPic3D.h	/^namespace iPic3D {$/;"	n
iPic3D.cpp	./iPic3D.cpp	1;"	F
iPic3D.h	./include/iPic3D.h	1;"	F
iPic3D::array1	./include/Alloc.h	/^  struct array1 : public array_ref1<type>$/;"	s	namespace:iPic3D
iPic3D::array1::array1	./include/Alloc.h	/^      array1(size_t s1) : array_ref1<type>(s1) { }$/;"	f	struct:iPic3D::array1
iPic3D::array1::~array1	./include/Alloc.h	/^      ~array1(){array_ref1<type>::free();}$/;"	f	struct:iPic3D::array1
iPic3D::array2	./include/Alloc.h	/^  struct array2 : public array_ref2<type>$/;"	s	namespace:iPic3D
iPic3D::array2::array2	./include/Alloc.h	/^      array2(size_t s2, size_t s1) : array_ref2<type>(s2,s1) { }$/;"	f	struct:iPic3D::array2
iPic3D::array2::~array2	./include/Alloc.h	/^      ~array2(){array_ref2<type>::free();}$/;"	f	struct:iPic3D::array2
iPic3D::array3	./include/Alloc.h	/^  struct array3 : public array_ref3<type>$/;"	s	namespace:iPic3D
iPic3D::array3::array3	./include/Alloc.h	/^      array3(size_t s3, size_t s2, size_t s1) : array_ref3<type>(s3,s2,s1) { }$/;"	f	struct:iPic3D::array3
iPic3D::array3::~array3	./include/Alloc.h	/^      ~array3(){array_ref3<type>::free();}$/;"	f	struct:iPic3D::array3
iPic3D::array4	./include/Alloc.h	/^  struct array4 : public array_ref4<type>$/;"	s	namespace:iPic3D
iPic3D::array4::array4	./include/Alloc.h	/^      array4(size_t s4, size_t s3, size_t s2, size_t s1)$/;"	f	struct:iPic3D::array4
iPic3D::array4::~array4	./include/Alloc.h	/^      ~array4(){array_ref4<type>::free();}$/;"	f	struct:iPic3D::array4
iPic3D::array_fetch1	./include/Alloc.h	/^  class array_fetch1$/;"	c	namespace:iPic3D
iPic3D::array_fetch1::S1	./include/Alloc.h	/^    const size_t S1;$/;"	m	class:iPic3D::array_fetch1
iPic3D::array_fetch1::arr	./include/Alloc.h	/^    type* const __restrict__ arr;$/;"	m	class:iPic3D::array_fetch1
iPic3D::array_fetch1::array_fetch1	./include/Alloc.h	/^    inline array_fetch1(type*const arr_, size_t k, size_t s1) :$/;"	f	class:iPic3D::array_fetch1
iPic3D::array_fetch1::operator []	./include/Alloc.h	/^    inline type& operator[](size_t n1){$/;"	f	class:iPic3D::array_fetch1
iPic3D::array_fetch1::shift	./include/Alloc.h	/^    const size_t shift;$/;"	m	class:iPic3D::array_fetch1
iPic3D::array_fetch2	./include/Alloc.h	/^  class array_fetch2$/;"	c	namespace:iPic3D
iPic3D::array_fetch2::S1	./include/Alloc.h	/^    const size_t S2, S1;$/;"	m	class:iPic3D::array_fetch2
iPic3D::array_fetch2::S2	./include/Alloc.h	/^    const size_t S2, S1;$/;"	m	class:iPic3D::array_fetch2
iPic3D::array_fetch2::arr	./include/Alloc.h	/^    type* const __restrict__ arr;$/;"	m	class:iPic3D::array_fetch2
iPic3D::array_fetch2::array_fetch2	./include/Alloc.h	/^    inline array_fetch2(type*const arr_, size_t k, size_t s2, size_t s1) :$/;"	f	class:iPic3D::array_fetch2
iPic3D::array_fetch2::operator []	./include/Alloc.h	/^    inline array_fetch1<type> operator[](size_t n2){$/;"	f	class:iPic3D::array_fetch2
iPic3D::array_fetch2::shift	./include/Alloc.h	/^    const size_t shift;$/;"	m	class:iPic3D::array_fetch2
iPic3D::array_fetch3	./include/Alloc.h	/^  class array_fetch3$/;"	c	namespace:iPic3D
iPic3D::array_fetch3::S1	./include/Alloc.h	/^    const size_t S3, S2, S1;$/;"	m	class:iPic3D::array_fetch3
iPic3D::array_fetch3::S2	./include/Alloc.h	/^    const size_t S3, S2, S1;$/;"	m	class:iPic3D::array_fetch3
iPic3D::array_fetch3::S3	./include/Alloc.h	/^    const size_t S3, S2, S1;$/;"	m	class:iPic3D::array_fetch3
iPic3D::array_fetch3::arr	./include/Alloc.h	/^    type* const __restrict__ arr;$/;"	m	class:iPic3D::array_fetch3
iPic3D::array_fetch3::array_fetch3	./include/Alloc.h	/^    inline array_fetch3(type*const arr_, size_t k, size_t s3, size_t s2, size_t s1) :$/;"	f	class:iPic3D::array_fetch3
iPic3D::array_fetch3::operator []	./include/Alloc.h	/^    inline array_fetch2<type> operator[](size_t n3){$/;"	f	class:iPic3D::array_fetch3
iPic3D::array_fetch3::shift	./include/Alloc.h	/^    const size_t shift;$/;"	m	class:iPic3D::array_fetch3
iPic3D::array_ref1	./include/Alloc.h	/^  class array_ref1$/;"	c	namespace:iPic3D
iPic3D::array_ref1::S1	./include/Alloc.h	/^      const size_t S1;$/;"	m	class:iPic3D::array_ref1
iPic3D::array_ref1::arr	./include/Alloc.h	/^      type* const __restrict__ arr;$/;"	m	class:iPic3D::array_ref1
iPic3D::array_ref1::array_ref1	./include/Alloc.h	/^      array_ref1(size_t s1) :$/;"	f	class:iPic3D::array_ref1
iPic3D::array_ref1::array_ref1	./include/Alloc.h	/^      array_ref1(type* in,$/;"	f	class:iPic3D::array_ref1
iPic3D::array_ref1::fetch	./include/Alloc.h	/^      type& fetch(size_t n2,size_t n1) const$/;"	f	class:iPic3D::array_ref1
iPic3D::array_ref1::free	./include/Alloc.h	/^      void free() { AlignedFree(arr); }$/;"	f	class:iPic3D::array_ref1
iPic3D::array_ref1::get	./include/Alloc.h	/^      const type& get(size_t n1) const$/;"	f	class:iPic3D::array_ref1
iPic3D::array_ref1::getidx	./include/Alloc.h	/^      inline size_t getidx(size_t n1) const$/;"	f	class:iPic3D::array_ref1
iPic3D::array_ref1::operator []	./include/Alloc.h	/^      inline type& operator[](size_t n1){$/;"	f	class:iPic3D::array_ref1
iPic3D::array_ref1::set	./include/Alloc.h	/^      void set(size_t n1, type value)$/;"	f	class:iPic3D::array_ref1
iPic3D::array_ref1::~array_ref1	./include/Alloc.h	/^      ~array_ref1() { }$/;"	f	class:iPic3D::array_ref1
iPic3D::array_ref2	./include/Alloc.h	/^  class array_ref2$/;"	c	namespace:iPic3D
iPic3D::array_ref2::S1	./include/Alloc.h	/^      const size_t S2,S1;$/;"	m	class:iPic3D::array_ref2
iPic3D::array_ref2::S2	./include/Alloc.h	/^      const size_t S2,S1;$/;"	m	class:iPic3D::array_ref2
iPic3D::array_ref2::arr	./include/Alloc.h	/^      type* const __restrict__ arr;$/;"	m	class:iPic3D::array_ref2
iPic3D::array_ref2::array_ref2	./include/Alloc.h	/^      array_ref2(size_t s2, size_t s1) :$/;"	f	class:iPic3D::array_ref2
iPic3D::array_ref2::array_ref2	./include/Alloc.h	/^      array_ref2(type*const* in,$/;"	f	class:iPic3D::array_ref2
iPic3D::array_ref2::fetch	./include/Alloc.h	/^      type& fetch(size_t n2, size_t n1) const$/;"	f	class:iPic3D::array_ref2
iPic3D::array_ref2::free	./include/Alloc.h	/^      void free() { AlignedFree(arr); }$/;"	f	class:iPic3D::array_ref2
iPic3D::array_ref2::get	./include/Alloc.h	/^      const type& get(size_t n2,size_t n1) const$/;"	f	class:iPic3D::array_ref2
iPic3D::array_ref2::getidx	./include/Alloc.h	/^      inline size_t getidx(size_t n2, size_t n1) const$/;"	f	class:iPic3D::array_ref2
iPic3D::array_ref2::operator []	./include/Alloc.h	/^      inline array_fetch1<type> operator[](size_t n2){$/;"	f	class:iPic3D::array_ref2
iPic3D::array_ref2::set	./include/Alloc.h	/^      void set(size_t n2,size_t n1, type value)$/;"	f	class:iPic3D::array_ref2
iPic3D::array_ref2::~array_ref2	./include/Alloc.h	/^      ~array_ref2(){}$/;"	f	class:iPic3D::array_ref2
iPic3D::array_ref3	./include/Alloc.h	/^  class array_ref3 : public const_array_ref3<type>$/;"	c	namespace:iPic3D
iPic3D::array_ref3::array_ref3	./include/Alloc.h	/^      array_ref3(size_t s3, size_t s2, size_t s1) :$/;"	f	class:iPic3D::array_ref3
iPic3D::array_ref3::array_ref3	./include/Alloc.h	/^      array_ref3(type*const*const* in,$/;"	f	class:iPic3D::array_ref3
iPic3D::array_ref3::fetch	./include/Alloc.h	/^      type& fetch(size_t n3,size_t n2,size_t n1) const$/;"	f	class:iPic3D::array_ref3
iPic3D::array_ref3::fetch_arr3	./include/Alloc.h	/^      type*** fetch_arr3(){ return (type***) arr3; }$/;"	f	class:iPic3D::array_ref3
iPic3D::array_ref3::free	./include/Alloc.h	/^      void free(){ delArray3<type>((type***)arr3); }$/;"	f	class:iPic3D::array_ref3
iPic3D::array_ref3::operator []	./include/Alloc.h	/^      inline array_fetch2<type> operator[](size_t n3){$/;"	f	class:iPic3D::array_ref3
iPic3D::array_ref3::operator type***	./include/Alloc.h	/^      operator type***(){ return (type***) arr3; }$/;"	f	class:iPic3D::array_ref3
iPic3D::array_ref3::set	./include/Alloc.h	/^      void set(size_t n3,size_t n2,size_t n1, type value)$/;"	f	class:iPic3D::array_ref3
iPic3D::array_ref3::setall	./include/Alloc.h	/^      void setall(type val){$/;"	f	class:iPic3D::array_ref3
iPic3D::array_ref3::~array_ref3	./include/Alloc.h	/^      ~array_ref3(){}$/;"	f	class:iPic3D::array_ref3
iPic3D::array_ref4	./include/Alloc.h	/^  class array_ref4 : public const_array_ref4<type>$/;"	c	namespace:iPic3D
iPic3D::array_ref4::array_ref4	./include/Alloc.h	/^      array_ref4(size_t s4, size_t s3, size_t s2, size_t s1) :$/;"	f	class:iPic3D::array_ref4
iPic3D::array_ref4::array_ref4	./include/Alloc.h	/^      array_ref4(type*const*const*const* in,$/;"	f	class:iPic3D::array_ref4
iPic3D::array_ref4::fetch	./include/Alloc.h	/^      type& fetch(size_t n4,size_t n3,size_t n2,size_t n1) const$/;"	f	class:iPic3D::array_ref4
iPic3D::array_ref4::fetch_arr4	./include/Alloc.h	/^      type**** fetch_arr4(){ return (type****) arr4; }$/;"	f	class:iPic3D::array_ref4
iPic3D::array_ref4::free	./include/Alloc.h	/^      void free(){ delArray4<type>((type****)arr4); }$/;"	f	class:iPic3D::array_ref4
iPic3D::array_ref4::operator []	./include/Alloc.h	/^      inline array_fetch3<type> operator[](size_t n4){$/;"	f	class:iPic3D::array_ref4
iPic3D::array_ref4::operator type****	./include/Alloc.h	/^      operator type****(){ return (type****) arr4; }$/;"	f	class:iPic3D::array_ref4
iPic3D::array_ref4::set	./include/Alloc.h	/^      void set(size_t n4,size_t n3,size_t n2,size_t n1, type value)$/;"	f	class:iPic3D::array_ref4
iPic3D::array_ref4::setall	./include/Alloc.h	/^      void setall(type val) { const_array_ref4<type>::setall(val); }$/;"	f	class:iPic3D::array_ref4
iPic3D::array_ref4::~array_ref4	./include/Alloc.h	/^      ~array_ref4(){}$/;"	f	class:iPic3D::array_ref4
iPic3D::base_arr	./include/Alloc.h	/^  class base_arr$/;"	c	namespace:iPic3D
iPic3D::base_arr::arr	./include/Alloc.h	/^      type* const __restrict__ arr;$/;"	m	class:iPic3D::base_arr
iPic3D::base_arr::base_arr	./include/Alloc.h	/^      base_arr(size_t s) : size(s), arr(AlignedAlloc(type, s)) {}$/;"	f	class:iPic3D::base_arr
iPic3D::base_arr::base_arr	./include/Alloc.h	/^      base_arr(type* in, size_t s) : size(s), arr(in) {}$/;"	f	class:iPic3D::base_arr
iPic3D::base_arr::free	./include/Alloc.h	/^      void free() { AlignedFree(arr); }$/;"	f	class:iPic3D::base_arr
iPic3D::base_arr::get_arr	./include/Alloc.h	/^      type* get_arr()const{return arr;}$/;"	f	class:iPic3D::base_arr
iPic3D::base_arr::get_size	./include/Alloc.h	/^      int get_size() { return size; }$/;"	f	class:iPic3D::base_arr
iPic3D::base_arr::setall	./include/Alloc.h	/^      void setall(type val){$/;"	f	class:iPic3D::base_arr
iPic3D::base_arr::size	./include/Alloc.h	/^      size_t size;$/;"	m	class:iPic3D::base_arr
iPic3D::base_arr::~base_arr	./include/Alloc.h	/^      ~base_arr(){}$/;"	f	class:iPic3D::base_arr
iPic3D::c_Solver	./include/iPic3D.h	/^  class c_Solver {$/;"	c	namespace:iPic3D
iPic3D::c_Solver::Benergy	./include/iPic3D.h	/^    double Benergy;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::EMf	./include/iPic3D.h	/^    EMfields3D    *EMf;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::Eenergy	./include/iPic3D.h	/^    double Eenergy;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::FirstCycle	./include/iPic3D.h	/^  inline int c_Solver::FirstCycle() {$/;"	f	class:iPic3D::c_Solver
iPic3D::c_Solver::Ke	./include/iPic3D.h	/^    double        *Ke;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::LastCycle	./include/iPic3D.h	/^  inline int c_Solver::LastCycle() {$/;"	f	class:iPic3D::c_Solver
iPic3D::c_Solver::Qremoved	./include/iPic3D.h	/^    double        *Qremoved;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::RestartDirName	./include/iPic3D.h	/^    string RestartDirName;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::SaveDirName	./include/iPic3D.h	/^    string SaveDirName;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::TOTenergy	./include/iPic3D.h	/^    double TOTenergy;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::TOTmomentum	./include/iPic3D.h	/^    double TOTmomentum;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::col	./include/iPic3D.h	/^    Collective    *col;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::cq	./include/iPic3D.h	/^    string cq;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::cqsat	./include/iPic3D.h	/^    string cqsat;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::ds	./include/iPic3D.h	/^    string ds;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::first_cycle	./include/iPic3D.h	/^    int first_cycle;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::get_myrank	./include/iPic3D.h	/^  inline int c_Solver::get_myrank() {$/;"	f	class:iPic3D::c_Solver
iPic3D::c_Solver::grid	./include/iPic3D.h	/^    Grid3DCU      *grid;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::hdf5_agent	./include/iPic3D.h	/^    myOutputAgent < PSK::HDF5OutputAdaptor > hdf5_agent;  \/\/ Create an Output Agent for HDF5 output$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::mem_avail	./include/iPic3D.h	/^    int mem_avail;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::momentum	./include/iPic3D.h	/^    double        *momentum;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::mpi	./include/iPic3D.h	/^    static MPIdata * mpi;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::my_clock	./include/iPic3D.h	/^    Timing        *my_clock;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::myrank	./include/iPic3D.h	/^    int myrank;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::nDistributionBins	./include/iPic3D.h	/^    int nDistributionBins;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::nprocs	./include/iPic3D.h	/^    int nprocs;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::ns	./include/iPic3D.h	/^    int ns;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::nsat	./include/iPic3D.h	/^    int nsat;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::num_proc	./include/iPic3D.h	/^    stringstream num_proc;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::nx0	./include/iPic3D.h	/^    int nx0;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::ny0	./include/iPic3D.h	/^    int ny0;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::nz0	./include/iPic3D.h	/^    int nz0;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::output_mgr	./include/iPic3D.h	/^    PSK::OutputManager < PSK::OutputAdaptor > output_mgr; \/\/ Create an Output Manager$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::part	./include/iPic3D.h	/^    Particles3D   *part;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::restart	./include/iPic3D.h	/^    int restart;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::restart_cycle	./include/iPic3D.h	/^    int restart_cycle;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::vct	./include/iPic3D.h	/^    VCtopology3D  *vct;$/;"	m	class:iPic3D::c_Solver
iPic3D::c_Solver::verbose	./include/iPic3D.h	/^    bool verbose;$/;"	m	class:iPic3D::c_Solver
iPic3D::const_array_get1	./include/Alloc.h	/^  class const_array_get1$/;"	c	namespace:iPic3D
iPic3D::const_array_get1::S1	./include/Alloc.h	/^    const size_t S1;$/;"	m	class:iPic3D::const_array_get1
iPic3D::const_array_get1::arr	./include/Alloc.h	/^    type* const __restrict__ arr;$/;"	m	class:iPic3D::const_array_get1
iPic3D::const_array_get1::const_array_get1	./include/Alloc.h	/^    inline const_array_get1(type*const arr_, size_t k, size_t s1) :$/;"	f	class:iPic3D::const_array_get1
iPic3D::const_array_get1::operator []	./include/Alloc.h	/^    inline const type& operator[](size_t n1)const{$/;"	f	class:iPic3D::const_array_get1
iPic3D::const_array_get1::shift	./include/Alloc.h	/^    const size_t shift;$/;"	m	class:iPic3D::const_array_get1
iPic3D::const_array_get2	./include/Alloc.h	/^  class const_array_get2$/;"	c	namespace:iPic3D
iPic3D::const_array_get2::S1	./include/Alloc.h	/^    const size_t S2, S1;$/;"	m	class:iPic3D::const_array_get2
iPic3D::const_array_get2::S2	./include/Alloc.h	/^    const size_t S2, S1;$/;"	m	class:iPic3D::const_array_get2
iPic3D::const_array_get2::arr	./include/Alloc.h	/^    type* const __restrict__ arr;$/;"	m	class:iPic3D::const_array_get2
iPic3D::const_array_get2::const_array_get2	./include/Alloc.h	/^    inline const_array_get2(type*const arr_, size_t k, size_t s2, size_t s1) :$/;"	f	class:iPic3D::const_array_get2
iPic3D::const_array_get2::operator []	./include/Alloc.h	/^    inline const const_array_get1<type> operator[](size_t n2)const{$/;"	f	class:iPic3D::const_array_get2
iPic3D::const_array_get2::shift	./include/Alloc.h	/^    const size_t shift;$/;"	m	class:iPic3D::const_array_get2
iPic3D::const_array_get3	./include/Alloc.h	/^  class const_array_get3$/;"	c	namespace:iPic3D
iPic3D::const_array_get3::S1	./include/Alloc.h	/^    const size_t S3, S2, S1;$/;"	m	class:iPic3D::const_array_get3
iPic3D::const_array_get3::S2	./include/Alloc.h	/^    const size_t S3, S2, S1;$/;"	m	class:iPic3D::const_array_get3
iPic3D::const_array_get3::S3	./include/Alloc.h	/^    const size_t S3, S2, S1;$/;"	m	class:iPic3D::const_array_get3
iPic3D::const_array_get3::arr	./include/Alloc.h	/^    type* const __restrict__ arr;$/;"	m	class:iPic3D::const_array_get3
iPic3D::const_array_get3::const_array_get3	./include/Alloc.h	/^    const_array_get3(type*const arr_, size_t k, size_t s3, size_t s2, size_t s1) :$/;"	f	class:iPic3D::const_array_get3
iPic3D::const_array_get3::operator []	./include/Alloc.h	/^    inline const const_array_get2<type> operator[](size_t n3)const{$/;"	f	class:iPic3D::const_array_get3
iPic3D::const_array_get3::shift	./include/Alloc.h	/^    const size_t shift;$/;"	m	class:iPic3D::const_array_get3
iPic3D::const_array_ref3	./include/Alloc.h	/^  class const_array_ref3 \/\/ : public base_arr<type>$/;"	c	namespace:iPic3D
iPic3D::const_array_ref3::S1	./include/Alloc.h	/^      const size_t S3,S2,S1;$/;"	m	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::S2	./include/Alloc.h	/^      const size_t S3,S2,S1;$/;"	m	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::S3	./include/Alloc.h	/^      const size_t S3,S2,S1;$/;"	m	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::arr	./include/Alloc.h	/^      type* const __restrict__ arr;$/;"	m	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::arr3	./include/Alloc.h	/^      type*const*const*const arr3;$/;"	m	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::check_idx_bounds	./include/Alloc.h	/^      void check_idx_bounds(size_t n3, size_t n2, size_t n1) const$/;"	f	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::const_array_ref3	./include/Alloc.h	/^      const_array_ref3(size_t s3, size_t s2, size_t s1) :$/;"	f	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::const_array_ref3	./include/Alloc.h	/^      const_array_ref3(type*const*const* in,$/;"	f	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::fetch	./include/Alloc.h	/^      type& fetch(size_t n3,size_t n2,size_t n1) const$/;"	f	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::get	./include/Alloc.h	/^      const type& get(size_t n3,size_t n2,size_t n1) const$/;"	f	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::getidx	./include/Alloc.h	/^      inline size_t getidx(size_t n3, size_t n2, size_t n1) const$/;"	f	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::operator []	./include/Alloc.h	/^      const const_array_get2<type> operator[](size_t n3)const{$/;"	f	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::operator type***	./include/Alloc.h	/^      operator type***(){ return (type***) arr3; }$/;"	f	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::set	./include/Alloc.h	/^      void set(size_t n3,size_t n2,size_t n1, type value)$/;"	f	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::size	./include/Alloc.h	/^      size_t size;$/;"	m	class:iPic3D::const_array_ref3
iPic3D::const_array_ref3::~const_array_ref3	./include/Alloc.h	/^      ~const_array_ref3(){}$/;"	f	class:iPic3D::const_array_ref3
iPic3D::const_array_ref4	./include/Alloc.h	/^  class const_array_ref4 \/\/: public base_arr<type>$/;"	c	namespace:iPic3D
iPic3D::const_array_ref4::S1	./include/Alloc.h	/^      const size_t S4,S3,S2,S1;$/;"	m	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::S2	./include/Alloc.h	/^      const size_t S4,S3,S2,S1;$/;"	m	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::S3	./include/Alloc.h	/^      const size_t S4,S3,S2,S1;$/;"	m	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::S4	./include/Alloc.h	/^      const size_t S4,S3,S2,S1;$/;"	m	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::arr	./include/Alloc.h	/^      type* const __restrict__ arr;$/;"	m	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::arr4	./include/Alloc.h	/^      type*const*const*const*const arr4;$/;"	m	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::check_idx_bounds	./include/Alloc.h	/^      void check_idx_bounds(size_t n4, size_t n3, size_t n2, size_t n1) const$/;"	f	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::const_array_ref4	./include/Alloc.h	/^      const_array_ref4(size_t s4, size_t s3, size_t s2, size_t s1) :$/;"	f	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::const_array_ref4	./include/Alloc.h	/^      const_array_ref4(type*const*const*const* in,$/;"	f	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::fetch	./include/Alloc.h	/^      type& fetch(size_t n4,size_t n3,size_t n2,size_t n1) const$/;"	f	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::get	./include/Alloc.h	/^      const type& get(size_t n4,size_t n3,size_t n2,size_t n1) const$/;"	f	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::get_size	./include/Alloc.h	/^      int get_size() const { return size; }$/;"	f	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::getidx	./include/Alloc.h	/^      inline size_t getidx(size_t n4, size_t n3, size_t n2, size_t n1) const$/;"	f	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::operator []	./include/Alloc.h	/^      const const_array_get3<type> operator[](size_t n4)const{$/;"	f	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::operator type****	./include/Alloc.h	/^      operator type****(){ return (type****) arr4; }$/;"	f	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::set	./include/Alloc.h	/^      void set(size_t n4,size_t n3,size_t n2,size_t n1, type value)$/;"	f	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::setall	./include/Alloc.h	/^      void setall(type val)$/;"	f	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::size	./include/Alloc.h	/^      size_t size;$/;"	m	class:iPic3D::const_array_ref4
iPic3D::const_array_ref4::~const_array_ref4	./include/Alloc.h	/^      ~const_array_ref4(){}$/;"	f	class:iPic3D::const_array_ref4
iPic3Dlib.cpp	./main/iPic3Dlib.cpp	1;"	F
iRho	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
iUx	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
iUy	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
iUz	./include/InterfaceFluid.h	/^  int iRho,iUx,iUy,iUz,iBx,iBy,iBz,iP; \/\/ named indexes for State_GV$/;"	m	class:InterfaceFluid
imageX	./include/EMfields3D.h	/^    array3_double imageX;$/;"	m	class:EMfields3D
imageY	./include/EMfields3D.h	/^    array3_double imageY;$/;"	m	class:EMfields3D
imageZ	./include/EMfields3D.h	/^    array3_double imageZ;$/;"	m	class:EMfields3D
implement_assert_errmsg	./utility/asserts.cpp	33;"	d	file:
implement_assert_errmsg	./utility/new/diagnostics.cpp	55;"	d	file:
implement_dprintvar_fileLine	./utility/debug.cpp	9;"	d	file:
implement_dprintvar_fileLine	./utility/new/diagnostics.cpp	10;"	d	file:
implement_invalid_value_error	./utility/errors.cpp	42;"	d	file:
info_arch	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_platform	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_version	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
init	./fields/EMfields3D.cpp	/^void EMfields3D::init(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
init	./include/Particle.h	/^  void init(const SpeciesParticle& pcl,$/;"	f	struct:CellParticle
init	./utility/MPIdata.cpp	/^void MPIdata::init(int *argc, char ***argv) {$/;"	f	class:MPIdata
initBATSRUS	./fields/EMfields3D.cpp	/^void EMfields3D::initBATSRUS(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
initBEAM	./fields/EMfields3D.cpp	/^void EMfields3D::initBEAM(VirtualTopology3D * vct, Grid * grid, Collective *col, double x_center, double y_center, double z_center, double radius) {$/;"	f	class:EMfields3D
initDipole	./fields/EMfields3D.cpp	/^void EMfields3D::initDipole(VirtualTopology3D *vct, Grid *grid, Collective *col){$/;"	f	class:EMfields3D
initDoublePeriodicHarrisWithGaussianHumpPerturbation	./fields/EMfields3D.cpp	/^void EMfields3D::initDoublePeriodicHarrisWithGaussianHumpPerturbation(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
initEM_rotate	./fields/EMfields3D.cpp	/^void EMfields3D::initEM_rotate(VirtualTopology3D * vct, Grid * grid, Collective *col, double B, double theta) {$/;"	f	class:EMfields3D
initForceFree	./fields/EMfields3D.cpp	/^void EMfields3D::initForceFree(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
initGEM	./fields/EMfields3D.cpp	/^void EMfields3D::initGEM(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
initGEMDipoleLikeTailNoPert	./fields/EMfields3D.cpp	/^void EMfields3D::initGEMDipoleLikeTailNoPert(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
initGEMnoPert	./fields/EMfields3D.cpp	/^void EMfields3D::initGEMnoPert(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
initOriginalGEM	./fields/EMfields3D.cpp	/^void EMfields3D::initOriginalGEM(VirtualTopology3D * vct, Grid * grid, Collective *col) {$/;"	f	class:EMfields3D
initRandomField	./fields/EMfields3D.cpp	/^void EMfields3D::initRandomField(VirtualTopology3D *vct, Grid *grid, Collective *col)$/;"	f	class:EMfields3D
init_parameters	./main/Parameters.cpp	/^void Parameters::init_parameters()$/;"	f	class:Parameters
injFieldsBottom	./include/EMfields3D.h	/^    injInfoFields *injFieldsLeft, *injFieldsRight, *injFieldsTop, *injFieldsBottom, *injFieldsFront, *injFieldsRear;$/;"	m	class:EMfields3D
injFieldsFront	./include/EMfields3D.h	/^    injInfoFields *injFieldsLeft, *injFieldsRight, *injFieldsTop, *injFieldsBottom, *injFieldsFront, *injFieldsRear;$/;"	m	class:EMfields3D
injFieldsLeft	./include/EMfields3D.h	/^    injInfoFields *injFieldsLeft, *injFieldsRight, *injFieldsTop, *injFieldsBottom, *injFieldsFront, *injFieldsRear;$/;"	m	class:EMfields3D
injFieldsRear	./include/EMfields3D.h	/^    injInfoFields *injFieldsLeft, *injFieldsRight, *injFieldsTop, *injFieldsBottom, *injFieldsFront, *injFieldsRear;$/;"	m	class:EMfields3D
injFieldsRight	./include/EMfields3D.h	/^    injInfoFields *injFieldsLeft, *injFieldsRight, *injFieldsTop, *injFieldsBottom, *injFieldsFront, *injFieldsRear;$/;"	m	class:EMfields3D
injFieldsTop	./include/EMfields3D.h	/^    injInfoFields *injFieldsLeft, *injFieldsRight, *injFieldsTop, *injFieldsBottom, *injFieldsFront, *injFieldsRear;$/;"	m	class:EMfields3D
injIFields	./include/BCStructure.h	2;"	d
injInfoFields	./fields/BCStructure.cpp	/^injInfoFields::injInfoFields(int Nxsize, int Nysize, int Nzsize) {$/;"	f	class:injInfoFields
injInfoFields	./include/BCStructure.h	/^struct injInfoFields {$/;"	s
injInfoFields::BxITemp	./include/BCStructure.h	/^  double ***BxITemp;$/;"	m	struct:injInfoFields
injInfoFields::ByITemp	./include/BCStructure.h	/^  double ***ByITemp;$/;"	m	struct:injInfoFields
injInfoFields::BzITemp	./include/BCStructure.h	/^  double ***BzITemp;$/;"	m	struct:injInfoFields
injInfoFields::ExITemp	./include/BCStructure.h	/^  double ***ExITemp;$/;"	m	struct:injInfoFields
injInfoFields::EyITemp	./include/BCStructure.h	/^  double ***EyITemp;$/;"	m	struct:injInfoFields
injInfoFields::EzITemp	./include/BCStructure.h	/^  double ***EzITemp;$/;"	m	struct:injInfoFields
injInfoFields::Nxsize_store	./include/BCStructure.h	/^  int Nxsize_store;$/;"	m	struct:injInfoFields
injInfoFields::Nysize_store	./include/BCStructure.h	/^  int Nysize_store;$/;"	m	struct:injInfoFields
injInfoFields::injInfoFields	./fields/BCStructure.cpp	/^injInfoFields::injInfoFields(int Nxsize, int Nysize, int Nzsize) {$/;"	f	class:injInfoFields
injInfoFields::~injInfoFields	./fields/BCStructure.cpp	/^injInfoFields::~injInfoFields() {$/;"	f	class:injInfoFields
injInfoParticles	./fields/BCStructure.cpp	/^injInfoParticles::injInfoParticles(int Nxsize, int Nysize, int Nzsize) {$/;"	f	class:injInfoParticles
injInfoParticles	./include/BCStructure.h	/^struct injInfoParticles {$/;"	s
injInfoParticles::Npcelx_array	./include/BCStructure.h	/^  int ***Npcelx_array;$/;"	m	struct:injInfoParticles
injInfoParticles::Npcely_array	./include/BCStructure.h	/^  int ***Npcely_array;$/;"	m	struct:injInfoParticles
injInfoParticles::Npcelz_array	./include/BCStructure.h	/^  int ***Npcelz_array;$/;"	m	struct:injInfoParticles
injInfoParticles::Nxsize_store	./include/BCStructure.h	/^  int Nxsize_store;$/;"	m	struct:injInfoParticles
injInfoParticles::Nysize_store	./include/BCStructure.h	/^  int Nysize_store;$/;"	m	struct:injInfoParticles
injInfoParticles::QITemp	./include/BCStructure.h	/^  double ***QITemp;             \/\/ weight of injected particles: make it variable, keeping the amount of injected particles.$/;"	m	struct:injInfoParticles
injInfoParticles::RoITemp	./include/BCStructure.h	/^  double ***RoITemp;$/;"	m	struct:injInfoParticles
injInfoParticles::VthxITemp	./include/BCStructure.h	/^  double ***VthxITemp;$/;"	m	struct:injInfoParticles
injInfoParticles::VthyITemp	./include/BCStructure.h	/^  double ***VthyITemp;$/;"	m	struct:injInfoParticles
injInfoParticles::VthzITemp	./include/BCStructure.h	/^  double ***VthzITemp;$/;"	m	struct:injInfoParticles
injInfoParticles::VxITemp	./include/BCStructure.h	/^  double ***VxITemp;$/;"	m	struct:injInfoParticles
injInfoParticles::VyITemp	./include/BCStructure.h	/^  double ***VyITemp;$/;"	m	struct:injInfoParticles
injInfoParticles::VzITemp	./include/BCStructure.h	/^  double ***VzITemp;$/;"	m	struct:injInfoParticles
injInfoParticles::injInfoParticles	./fields/BCStructure.cpp	/^injInfoParticles::injInfoParticles(int Nxsize, int Nysize, int Nzsize) {$/;"	f	class:injInfoParticles
injInfoParticles::~injInfoParticles	./fields/BCStructure.cpp	/^injInfoParticles::~injInfoParticles() {$/;"	f	class:injInfoParticles
input_array.h	./include/input_array.h	1;"	F
inputfile	./include/Collective.h	/^    string inputfile;$/;"	m	class:Collective
instance	./utility/MPIdata.cpp	/^MPIdata& MPIdata::instance()$/;"	f	class:MPIdata
interpC2N	./grids/Grid3DCU.cpp	/^void Grid3DCU::interpC2N(arr3_double vecFieldN, const_arr3_double vecFieldC) {$/;"	f	class:Grid3DCU
interpDensitiesN2C	./fields/EMfields3D.cpp	/^void EMfields3D::interpDensitiesN2C(VirtualTopology3D * vct, Grid * grid) {$/;"	f	class:EMfields3D
interpN2C	./grids/Grid3DCU.cpp	/^void Grid3DCU::interpN2C(arr3_double vecFieldC, const_arr3_double vecFieldN) {$/;"	f	class:Grid3DCU
interpN2C	./grids/Grid3DCU.cpp	/^void Grid3DCU::interpN2C(arr4_double vecFieldC, int ns, const_arr4_double vecFieldN) {$/;"	f	class:Grid3DCU
interpP2G	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::interpP2G(Field * EMf, Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:Particles3Dcomm
invVOL	./include/EMfields3D.h	/^    double dx, dy, dz, invVOL;$/;"	m	class:EMfields3D
invVOL	./include/Grid3DCU.h	/^  double invVOL;$/;"	m	class:Grid3DCU
invVOL	./include/Particles3Dcomm.h	/^  double xstart, xend, ystart, yend, zstart, zend, invVOL;$/;"	m	class:Particles3Dcomm
inv_dx	./include/Particles3Dcomm.h	/^  double inv_dx;$/;"	m	class:Particles3Dcomm
inv_dy	./include/Particles3Dcomm.h	/^  double inv_dy;$/;"	m	class:Particles3Dcomm
inv_dz	./include/Particles3Dcomm.h	/^  double inv_dz;$/;"	m	class:Particles3Dcomm
invalid_value_error	./include/errors.h	27;"	d
invdx	./include/Grid3DCU.h	/^  double invdx;$/;"	m	class:Grid3DCU
invdy	./include/Grid3DCU.h	/^  double invdy;$/;"	m	class:Grid3DCU
invdz	./include/Grid3DCU.h	/^  double invdz;$/;"	m	class:Grid3DCU
ipic_errors_H	./include/errors.h	2;"	d
ipicdefs.h	./include/ipicdefs.h	1;"	F
ipicmath.h	./include/ipicmath.h	1;"	F
ipicsys.h	./include/ipicsys.h	1;"	F
isMessagingDone	./particles/Particles3Dcomm.cpp	/^int Particles3Dcomm::isMessagingDone(VirtualTopology3D * ptVCT) {$/;"	f	class:Particles3Dcomm
is_active	./include/TimeTasks.h	/^  bool is_active(Tasks taskid){ return active[taskid]; }$/;"	f	class:TimeTasks
is_aligned	./include/Alloc.h	/^inline bool is_aligned(void *p, int N)$/;"	f
is_exclusive	./include/TimeTasks.h	/^  bool is_exclusive(Tasks taskid) { return (taskid < LAST); }$/;"	f	class:TimeTasks
is_output_thread	./include/parallel.h	/^inline bool is_output_thread()$/;"	f
key	./ConfigFile/src/ConfigFile.h	/^    string key;$/;"	m	struct:ConfigFile::key_not_found
key	./include/ConfigFile.h	/^    string key;$/;"	m	struct:ConfigFile::key_not_found
keyExists	./ConfigFile/src/ConfigFile.cpp	/^bool ConfigFile::keyExists(const string & key) const {$/;"	f	class:ConfigFile
key_not_found	./ConfigFile/src/ConfigFile.h	/^    key_not_found(const string & key_ = string())$/;"	f	struct:ConfigFile::key_not_found
key_not_found	./ConfigFile/src/ConfigFile.h	/^  struct key_not_found {        \/\/ thrown only by T read(key) variant of read()$/;"	s	class:ConfigFile
key_not_found	./include/ConfigFile.h	/^    key_not_found(const string & key_ = string())$/;"	f	struct:ConfigFile::key_not_found
key_not_found	./include/ConfigFile.h	/^  struct key_not_found {        \/\/ thrown only by T read(key) variant of read()$/;"	s	class:ConfigFile
lapC2C	./grids/Grid3DCU.cpp	/^void Grid3DCU::lapC2C(arr3_double lapC, const_arr3_double scFieldC, VirtualTopology3D * vct) {$/;"	f	class:Grid3DCU
lapC2Cpoisson	./grids/Grid3DCU.cpp	/^void Grid3DCU::lapC2Cpoisson(arr3_double lapC, arr3_double scFieldC, VirtualTopology3D * vct) {$/;"	f	class:Grid3DCU
lapN2N	./grids/Grid3DCU.cpp	/^void Grid3DCU::lapN2N(arr3_double lapN, const_arr3_double scFieldN, VirtualTopology3D * vct) {$/;"	f	class:Grid3DCU
last	./tests/stopwatch.h	/^   struct timeval total, now, last;$/;"	m	struct:__anon3	typeref:struct:__anon3::
last_cycle	./include/Collective.h	/^    int last_cycle;$/;"	m	class:Collective
linear_perturbation	./particles/Particles3D.cpp	/^void Particles3D::linear_perturbation(double deltaBoB, double kx, double ky, double angle, double omega_r, double omega_i, double Ex_mod, double Ex_phase, double Ey_mod, double Ey_phase, double Ez_mod, double Ez_phase, double Bx_mod, double Bx_phase, double By_mod, double By_phase, double Bz_mod, double Bz_phase, Grid * grid, Field * EMf, VirtualTopology3D * vct) {$/;"	f	class:Particles3D
loopX	./include/Basic.h	/^inline void loopX(double *b, double z, double x, double y, double a, double zc, double xc, double yc, double m){$/;"	f
loopY	./include/Basic.h	/^inline void loopY(double *b, double y, double z, double x, double a, double yc, double zc, double xc, double m){$/;"	f
loopZ	./include/Basic.h	/^inline void loopZ(double *b, double x, double y, double z, double a, double xc, double yc, double zc, double m){$/;"	f
main	./build.oldphi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./build.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./build.xeon/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./build1.phi/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./iPic3D.cpp	/^int main(int argc, char **argv) {$/;"	f
main	./postprocessing_tools/c++/fft-2D-slice-of-vtk/fft2d-slice-of-vtk.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var-2D/process-virtual-sat-block-single-var-2D.cpp	/^int main()$/;"	f
main	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var/process-virtual-sat-block-single-var.cpp	/^int main()$/;"	f
main	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block/process-virtual-sat-block.cpp	/^int main()$/;"	f
main	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point-2D/process-virtual-sat-point-2D.cpp	/^int main()$/;"	f
main	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point/process-virtual-sat-point.cpp	/^int main()$/;"	f
main	./postprocessing_tools/c++/read-virt-sat-files-iPIC/fft-cpp-code-point/fft-virtsat-point-data-with-normalization.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	./postprocessing_tools/c++/read-virt-sat-files-iPIC/fft-cpp-code-point/fft-virtsat-point-data.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	./postprocessing_tools/vtk3D/convHDF5.cpp	/^int main(int argc, char **argv) {$/;"	f
main	./postprocessing_tools/vtk3D/convHDF5_EPAR.cpp	/^int main(int argc, char **argv) {$/;"	f
main	./postprocessing_tools/vtk3D/convHDF5unico.cpp	/^int main (int argc, char **argv) {$/;"	f
main	./tests/test_arrays.cpp	/^int main()$/;"	f
makeCenterFace	./communication/ComParser3D.cpp	/^void makeCenterFace(int nx, int ny, int nz, double ****vector, int ns, double *ghostXrightFace, double *ghostXleftFace, double *ghostYrightFace, double *ghostYleftFace, double *ghostZrightFace, double *ghostZleftFace) {$/;"	f
makeCenterFace	./communication/ComParser3D.cpp	/^void makeCenterFace(int nx, int ny, int nz, double ***vector, double *ghostXrightFace, double *ghostXleftFace, double *ghostYrightFace, double *ghostYleftFace, double *ghostZrightFace, double *ghostZleftFace) {$/;"	f
makeNodeCorner	./communication/ComParser3D.cpp	/^void makeNodeCorner(int nx, int ny, int nz, double *ghostXsameYrightZrightEdge, double *ghostXsameYleftZleftEdge, double *ghostXsameYleftZrightEdge, double *ghostXsameYrightZleftEdge, double *ghostXrightYrightZrightCorner, double *ghostXleftYrightZrightCorner, double *ghostXrightYleftZrightCorner, double *ghostXleftYleftZrightCorner, double *ghostXrightYrightZleftCorner, double *ghostXleftYrightZleftCorner, double *ghostXrightYleftZleftCorner, double *ghostXleftYleftZleftCorner) {$/;"	f
makeNodeEdgeX	./communication/ComParser3D.cpp	/^void makeNodeEdgeX(int nx, int ny, int nz, double *faceYleft, double *faceYright, double *ghostXsameYrightZrightEdge, double *ghostXsameYleftZleftEdge, double *ghostXsameYleftZrightEdge, double *ghostXsameYrightZleftEdge) {$/;"	f
makeNodeEdgeY	./communication/ComParser3D.cpp	/^void makeNodeEdgeY(int nx, int ny, int nz, double *faceZleft, double *faceZright, double *ghostXrightYsameZrightEdge, double *ghostXleftYsameZleftEdge, double *ghostXleftYsameZrightEdge, double *ghostXrightYsameZleftEdge) {$/;"	f
makeNodeEdgeZ	./communication/ComParser3D.cpp	/^void makeNodeEdgeZ(int nx, int ny, int nz, double *faceXleft, double *faceXright, double *ghostXrightYrightZsameEdge, double *ghostXleftYleftZsameEdge, double *ghostXrightYleftZsameEdge, double *ghostXleftYrightZsameEdge) {$/;"	f
makeNodeFace	./communication/ComParser3D.cpp	/^void makeNodeFace(int nx, int ny, int nz, double ****vector, int ns, double *ghostXrightFace, double *ghostXleftFace, double *ghostYrightFace, double *ghostYleftFace, double *ghostZrightFace, double *ghostZleftFace) {$/;"	f
makeNodeFace	./communication/ComParser3D.cpp	/^void makeNodeFace(int nx, int ny, int nz, double ***vector, double *ghostXrightFace, double *ghostXleftFace, double *ghostYrightFace, double *ghostYleftFace, double *ghostZrightFace, double *ghostZleftFace) {$/;"	f
mapci	./ConfigFile/src/ConfigFile.h	/^  typedef std::map < string, string >::const_iterator mapci;$/;"	t	class:ConfigFile
mapci	./include/ConfigFile.h	/^  typedef std::map < string, string >::const_iterator mapci;$/;"	t	class:ConfigFile
mapi	./ConfigFile/src/ConfigFile.h	/^  typedef std::map < string, string >::iterator mapi;$/;"	t	class:ConfigFile
mapi	./include/ConfigFile.h	/^  typedef std::map < string, string >::iterator mapi;$/;"	t	class:ConfigFile
max	./particles/Particles3D.cpp	38;"	d	file:
max	./particles/Particles3Dcomm.cpp	43;"	d	file:
maxNpExiting	./particles/Particles3Dcomm.cpp	/^int Particles3Dcomm::maxNpExiting() {$/;"	f	class:Particles3Dcomm
maxwellian	./particles/Particles3D.cpp	/^void Particles3D::maxwellian(Grid * grid, Field * EMf, VirtualTopology3D * vct) {$/;"	f	class:Particles3D
mem_avail	./include/iPic3D.h	/^    int mem_avail;$/;"	m	class:iPic3D::c_Solver
min	./particles/Particles3D.cpp	37;"	d	file:
min	./particles/Particles3Dcomm.cpp	42;"	d	file:
moments10Array	./include/EMfields3D.h	/^    Moments10 **moments10Array;$/;"	m	class:EMfields3D
momentum	./include/iPic3D.h	/^    double        *momentum;$/;"	m	class:iPic3D::c_Solver
mover_PC	./particles/Particles3D.cpp	/^void Particles3D::mover_PC(Grid * grid, VirtualTopology3D * vct, Field * EMf) {$/;"	f	class:Particles3D
mover_PC_AoS	./particles/Particles3D.cpp	/^void Particles3D::mover_PC_AoS(Grid * grid, VirtualTopology3D * vct, Field * EMf)$/;"	f	class:Particles3D
mover_PC_AoS2	./particles/Particles3D.cpp	/^void Particles3D::mover_PC_AoS2(Grid * grid, VirtualTopology3D * vct, Field * EMf)$/;"	f	class:Particles3D
mover_PC_vectorized	./particles/Particles3D.cpp	/^void Particles3D::mover_PC_vectorized($/;"	f	class:Particles3D
mover_explicit	./particles/Particles3D.cpp	/^void Particles3D::mover_explicit(Grid * grid, VirtualTopology3D * vct, Field * EMf) {$/;"	f	class:Particles3D
mover_relativistic	./particles/Particles3D.cpp	/^int Particles3D::mover_relativistic(Grid * grid, VirtualTopology3D * vct, Field * EMf) {$/;"	f	class:Particles3D
mpi	./include/iPic3D.h	/^    static MPIdata * mpi;$/;"	m	class:iPic3D::c_Solver
mpicoord	./include/phdf5.h	/^    int      mpicoord[3];  \/\/ as the vectors were corrupted at the second call of the Write function.$/;"	m	class:PHDF5fileClass
myComment	./ConfigFile/src/ConfigFile.h	/^  string myComment;             \/\/ separator between value and comments$/;"	m	class:ConfigFile
myComment	./include/ConfigFile.h	/^  string myComment;             \/\/ separator between value and comments$/;"	m	class:ConfigFile
myContents	./ConfigFile/src/ConfigFile.h	/^  std::map < string, string > myContents; \/\/ extracted keys and values$/;"	m	class:ConfigFile
myContents	./include/ConfigFile.h	/^  std::map < string, string > myContents; \/\/ extracted keys and values$/;"	m	class:ConfigFile
myDelimiter	./ConfigFile/src/ConfigFile.h	/^  string myDelimiter;           \/\/ separator between key and value$/;"	m	class:ConfigFile
myDelimiter	./include/ConfigFile.h	/^  string myDelimiter;           \/\/ separator between key and value$/;"	m	class:ConfigFile
myOutputAgent	./include/PSKOutput.h	/^  myOutputAgent(void) {;$/;"	f	class:myOutputAgent
myOutputAgent	./include/PSKOutput.h	/^template < class Toa > class myOutputAgent:public PSK::OutputAgent < Toa > {$/;"	c
myOutputAgent::_col	./include/PSKOutput.h	/^  Collective *_col;$/;"	m	class:myOutputAgent
myOutputAgent::_field	./include/PSKOutput.h	/^  Field *_field;$/;"	m	class:myOutputAgent
myOutputAgent::_grid	./include/PSKOutput.h	/^  Grid *_grid;$/;"	m	class:myOutputAgent
myOutputAgent::_mpi	./include/PSKOutput.h	/^  MPIdata *_mpi;$/;"	m	class:myOutputAgent
myOutputAgent::_part	./include/PSKOutput.h	/^  std::vector < Particles * >_part;$/;"	m	class:myOutputAgent
myOutputAgent::_vct	./include/PSKOutput.h	/^  VCtopology3D *_vct;$/;"	m	class:myOutputAgent
myOutputAgent::myOutputAgent	./include/PSKOutput.h	/^  myOutputAgent(void) {;$/;"	f	class:myOutputAgent
myOutputAgent::ns	./include/PSKOutput.h	/^  int ns;$/;"	m	class:myOutputAgent
myOutputAgent::output	./include/PSKOutput.h	/^  void output(const string & tag, int cycle) {$/;"	f	class:myOutputAgent
myOutputAgent::output	./include/PSKOutput.h	/^  void output(const string & tag, int cycle, int sample) {$/;"	f	class:myOutputAgent
myOutputAgent::set_simulation_pointers	./include/PSKOutput.h	/^  void set_simulation_pointers(Field * field, Grid * grid, VCtopology3D * vct, MPIdata * mpi, Collective * col) {$/;"	f	class:myOutputAgent
myOutputAgent::set_simulation_pointers_part	./include/PSKOutput.h	/^  void set_simulation_pointers_part(Particles * part) {$/;"	f	class:myOutputAgent
mySentry	./ConfigFile/src/ConfigFile.h	/^  string mySentry;              \/\/ optional string to signal end of file$/;"	m	class:ConfigFile
mySentry	./include/ConfigFile.h	/^  string mySentry;              \/\/ optional string to signal end of file$/;"	m	class:ConfigFile
my_clock	./include/iPic3D.h	/^    Timing        *my_clock;$/;"	m	class:iPic3D::c_Solver
mygrid	./include/PSKOutput.h	/^    Grid *mygrid;$/;"	m	class:PSK::OutputAgent
myrank	./include/iPic3D.h	/^    int myrank;$/;"	m	class:iPic3D::c_Solver
myuint64_t	./tests/stopwatch.h	5;"	d
n1	./include/arrays.h	/^    arr(_arr), n1(_n1) {};$/;"	f	class:FixedArray2D1
n1	./include/arrays.h	/^    arr(_arr), n1(_n1) {};$/;"	f	class:FixedArray4D3
n1	./include/arrays.h	/^  FixedArray3D2(type (&_arr)[s1][s2][s3], size_t _n1) : arr(_arr), n1(_n1) {};$/;"	f	class:FixedArray3D2
n1	./include/arrays.h	/^  size_t n1, n2;$/;"	m	class:FixedArray3D1
n1	./include/arrays.h	/^  size_t n1,n2,n3;$/;"	m	class:FixedArray4D1
n1	./include/arrays.h	/^  size_t n1,n2;$/;"	m	class:FixedArray4D2
n1	./include/arrays.h	/^  size_t n1;$/;"	m	class:FixedArray2D1
n1	./include/arrays.h	/^  size_t n1;$/;"	m	class:FixedArray3D2
n1	./include/arrays.h	/^  size_t n1;$/;"	m	class:FixedArray4D3
n2	./include/arrays.h	/^    arr(_arr), n1(_n1), n2(_n2) {};$/;"	f	class:FixedArray3D1
n2	./include/arrays.h	/^    arr(_arr), n1(_n1), n2(_n2){};$/;"	f	class:FixedArray4D2
n2	./include/arrays.h	/^  size_t n1, n2;$/;"	m	class:FixedArray3D1
n2	./include/arrays.h	/^  size_t n1,n2,n3;$/;"	m	class:FixedArray4D1
n2	./include/arrays.h	/^  size_t n1,n2;$/;"	m	class:FixedArray4D2
n3	./include/arrays.h	/^    arr(_arr), n1(_n1), n2(_n2), n3(_n3){};$/;"	f	class:FixedArray4D1
n3	./include/arrays.h	/^  size_t n1,n2,n3;$/;"	m	class:FixedArray4D1
nDistributionBins	./include/iPic3D.h	/^    int nDistributionBins;$/;"	m	class:iPic3D::c_Solver
nIJK_D	./include/InterfaceFluid.h	/^  int nIJK_D[3];    \/\/ number of cells in the passed uniform grid$/;"	m	class:InterfaceFluid
nVar	./include/Particles3Dcomm.h	/^  int nVar;$/;"	m	class:Particles3Dcomm
ncycles	./include/Collective.h	/^    int ncycles;$/;"	m	class:Collective
ndim	./include/phdf5.h	/^    int      ndim;$/;"	m	class:PHDF5fileClass
neg	./include/Basic.h	/^inline void neg(arr3_double vect, int nx) {$/;"	f
neg	./include/Basic.h	/^inline void neg(arr3_double vect, int nx, int ny) {$/;"	f
neg	./include/Basic.h	/^inline void neg(arr3_double vect, int nx, int ny, int nz) {$/;"	f
neg	./include/Basic.h	/^inline void neg(double *vect, int n) {$/;"	f
nels	./include/PSKOutput.h	/^    } int nels(void) const {$/;"	f	class:PSK::Dimens
newArr2	./include/Alloc.h	717;"	d
newArr2_Amaya	./tests/test_arrays.cpp	/^template < class type > type ** newArr2_Amaya(int sz1, int sz2) {$/;"	f
newArr2_Amaya	./tests/test_arrays.cpp	112;"	d	file:
newArr3	./include/Alloc.h	716;"	d
newArr3_Amaya	./tests/test_arrays.cpp	111;"	d	file:
newArr4	./include/Alloc.h	715;"	d
newArr4_Amaya	./tests/test_arrays.cpp	110;"	d	file:
newArray1	./include/Alloc.h	/^inline type * newArray1(size_t sz1)$/;"	f
newArray2	./include/Alloc.h	/^inline type ** newArray2(size_t sz1, size_t sz2)$/;"	f
newArray2	./include/Alloc.h	/^inline type ** newArray2(type * in, size_t sz1, size_t sz2)$/;"	f
newArray3	./include/Alloc.h	/^inline type *** newArray3(size_t sz1, size_t sz2, size_t sz3)$/;"	f
newArray3	./include/Alloc.h	/^inline type *** newArray3(type * in, size_t sz1, size_t sz2, size_t sz3)$/;"	f
newArray3_Amaya	./tests/test_arrays.cpp	/^template < class type > type *** newArray3_Amaya(int sz1, int sz2, int sz3) {$/;"	f
newArray4	./include/Alloc.h	/^inline type **** newArray4(size_t sz1, size_t sz2, size_t sz3, size_t sz4)$/;"	f
newArray4	./include/Alloc.h	/^inline type **** newArray4(type * in, size_t sz1, size_t sz2, size_t sz3, size_t sz4)$/;"	f
newArray4_Amaya	./tests/test_arrays.cpp	/^template < class type > type **** newArray4_Amaya(int sz1, int sz2, int sz3, int sz4) {$/;"	f
ngrp	./include/phdf5.h	/^    static const int ngrp = 3;$/;"	m	class:PHDF5fileClass
node_xcoord	./include/Grid3DCU.h	/^  double *node_xcoord;$/;"	m	class:Grid3DCU
node_ycoord	./include/Grid3DCU.h	/^  double *node_ycoord;$/;"	m	class:Grid3DCU
node_zcoord	./include/Grid3DCU.h	/^  double *node_zcoord;$/;"	m	class:Grid3DCU
nop	./include/Particles3Dcomm.h	/^  int nop;$/;"	m	class:Particles3Dcomm
norm2	./include/Basic.h	/^inline double norm2(const arr3_double vect, int nx, int ny) {$/;"	f
norm2	./include/Basic.h	/^inline double norm2(double **vect, int nx, int ny) {$/;"	f
norm2	./include/Basic.h	/^inline double norm2(double *vect, int nx) {$/;"	f
norm2P	./include/Basic.h	/^inline double norm2P(const arr3_double vect, int nx, int ny, int nz) {$/;"	f
norm2P	./include/Basic.h	/^inline double norm2P(double *vect, int n) {$/;"	f
normP	./include/Basic.h	/^inline double normP(double *vect, int n) {$/;"	f
now	./tests/stopwatch.h	/^   struct timeval total, now, last;$/;"	m	struct:__anon3	typeref:struct:__anon3::
np	./include/Collective.h	/^    int *np;$/;"	m	class:Collective
npExit	./include/Particles3Dcomm.h	/^  int npExit;$/;"	m	class:Particles3Dcomm
npExitXleft	./include/Particles3Dcomm.h	/^  int npExitXleft;$/;"	m	class:Particles3Dcomm
npExitXright	./include/Particles3Dcomm.h	/^  int npExitXright;$/;"	m	class:Particles3Dcomm
npExitYleft	./include/Particles3Dcomm.h	/^  int npExitYleft;$/;"	m	class:Particles3Dcomm
npExitYright	./include/Particles3Dcomm.h	/^  int npExitYright;$/;"	m	class:Particles3Dcomm
npExitZleft	./include/Particles3Dcomm.h	/^  int npExitZleft;$/;"	m	class:Particles3Dcomm
npExitZright	./include/Particles3Dcomm.h	/^  int npExitZright;$/;"	m	class:Particles3Dcomm
npMax	./include/Collective.h	/^    int *npMax;$/;"	m	class:Collective
np_tot	./include/Particles3Dcomm.h	/^  long long np_tot;$/;"	m	class:Particles3Dcomm
npcel	./include/Collective.h	/^    int *npcel;$/;"	m	class:Collective
npcel	./include/Particles3Dcomm.h	/^  int npcel;$/;"	m	class:Particles3Dcomm
npcelx	./include/Collective.h	/^    int *npcelx;$/;"	m	class:Collective
npcelx	./include/Particles3Dcomm.h	/^  int npcelx;$/;"	m	class:Particles3Dcomm
npcely	./include/Collective.h	/^    int *npcely;$/;"	m	class:Collective
npcely	./include/Particles3Dcomm.h	/^  int npcely;$/;"	m	class:Particles3Dcomm
npcelz	./include/Collective.h	/^    int *npcelz;$/;"	m	class:Collective
npcelz	./include/Particles3Dcomm.h	/^  int npcelz;$/;"	m	class:Particles3Dcomm
npmax	./include/Particles3Dcomm.h	/^  int npmax;$/;"	m	class:Particles3Dcomm
nproc	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var-2D/user_inputs_block_single_var_2D.h	/^    int const nproc = 3071;                           \/\/ number of files to search into$/;"	v
nproc	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var/user_inputs_block_single_var.h	/^    int const nproc = 3071;                           \/\/ number of files to search into$/;"	v
nproc	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block/user_inputs_block.h	/^    int const nproc = 3071;                           \/\/ number of files to search into$/;"	v
nproc	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point-2D/user_inputs_point_2D.h	/^    int const nproc = 2048;                           \/\/ number of files to search into$/;"	v
nproc	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point/user_inputs_point.h	/^    int const nproc = 3071;                           \/\/ number of files to search into$/;"	v
nprocs	./include/MPIdata.h	/^  static int nprocs;$/;"	m	class:MPIdata
nprocs	./include/VCtopology3D.h	/^  int nprocs;$/;"	m	class:VCtopology3D
nprocs	./include/iPic3D.h	/^    int nprocs;$/;"	m	class:iPic3D::c_Solver
nprocs	./utility/MPIdata.cpp	/^int MPIdata::nprocs=-1;$/;"	m	class:MPIdata	file:
ns	./include/Collective.h	/^    int ns;$/;"	m	class:Collective
ns	./include/EMfields3D.h	/^    int ns;$/;"	m	class:EMfields3D
ns	./include/PSKOutput.h	/^  int ns;$/;"	m	class:myOutputAgent
ns	./include/Particles3Dcomm.h	/^  int ns;$/;"	m	class:Particles3Dcomm
ns	./include/iPic3D.h	/^    int ns;$/;"	m	class:iPic3D::c_Solver
nsat	./include/iPic3D.h	/^    int nsat;$/;"	m	class:iPic3D::c_Solver
num_proc	./include/iPic3D.h	/^    stringstream num_proc;$/;"	m	class:iPic3D::c_Solver
numpcls_in_bucket	./include/Particles3Dcomm.h	/^  array3_int* numpcls_in_bucket;$/;"	m	class:Particles3Dcomm
numpcls_in_bucket_now	./include/Particles3Dcomm.h	/^  array3_int* numpcls_in_bucket_now; \/\/ accumulator used during sorting$/;"	m	class:Particles3Dcomm
nx	./include/Moments.h	/^    int nx;$/;"	m	class:Moments10
nx0	./include/iPic3D.h	/^    int nx0;$/;"	m	class:iPic3D::c_Solver
nxc	./include/Collective.h	/^    int nxc;$/;"	m	class:Collective
nxc	./include/EMfields3D.h	/^    int nxc;$/;"	m	class:EMfields3D
nxc	./include/Grid3DCU.h	/^  int nxc;$/;"	m	class:Grid3DCU
nxc	./include/Particles3Dcomm.h	/^  int nxc, nyc, nzc;$/;"	m	class:Particles3Dcomm
nxn	./include/EMfields3D.h	/^    int nxn;$/;"	m	class:EMfields3D
nxn	./include/Grid3DCU.h	/^  int nxn;$/;"	m	class:Grid3DCU
nxn	./include/Particles3Dcomm.h	/^  int nxn, nyn, nzn;$/;"	m	class:Particles3Dcomm
ny	./include/Moments.h	/^    int ny;$/;"	m	class:Moments10
ny0	./include/iPic3D.h	/^    int ny0;$/;"	m	class:iPic3D::c_Solver
nyc	./include/Collective.h	/^    int nyc;$/;"	m	class:Collective
nyc	./include/EMfields3D.h	/^    int nyc;$/;"	m	class:EMfields3D
nyc	./include/Grid3DCU.h	/^  int nyc;$/;"	m	class:Grid3DCU
nyc	./include/Particles3Dcomm.h	/^  int nxc, nyc, nzc;$/;"	m	class:Particles3Dcomm
nyn	./include/EMfields3D.h	/^    int nyn;$/;"	m	class:EMfields3D
nyn	./include/Grid3DCU.h	/^  int nyn;$/;"	m	class:Grid3DCU
nyn	./include/Particles3Dcomm.h	/^  int nxn, nyn, nzn;$/;"	m	class:Particles3Dcomm
nz	./include/Moments.h	/^    int nz;$/;"	m	class:Moments10
nz0	./include/iPic3D.h	/^    int nz0;$/;"	m	class:iPic3D::c_Solver
nzc	./include/Collective.h	/^    int nzc;$/;"	m	class:Collective
nzc	./include/EMfields3D.h	/^    int nzc;$/;"	m	class:EMfields3D
nzc	./include/Grid3DCU.h	/^  int nzc;$/;"	m	class:Grid3DCU
nzc	./include/Particles3Dcomm.h	/^  int nxc, nyc, nzc;$/;"	m	class:Particles3Dcomm
nzn	./include/EMfields3D.h	/^    int nzn;$/;"	m	class:EMfields3D
nzn	./include/Grid3DCU.h	/^  int nzn;$/;"	m	class:Grid3DCU
nzn	./include/Particles3Dcomm.h	/^  int nxn, nyn, nzn;$/;"	m	class:Particles3Dcomm
omp_get_max_threads	./include/ompdefs.h	/^inline int omp_get_max_threads(){ return 1;}$/;"	f
omp_get_thread_num	./include/ompdefs.h	/^inline int omp_get_thread_num() { return 0;}$/;"	f
ompdefs.h	./include/ompdefs.h	1;"	F
ompdefs_H	./include/ompdefs.h	2;"	d
open	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::open(const std::string & name) {$/;"	f	class:HDF5OutputAdaptor
open	./include/PSKOutput.h	/^    void open(const std::string & outf) {$/;"	f	class:PSK::OutputAgent
open	./include/PSKOutput.h	/^    } virtual void open(const std::string & outf) {$/;"	f	class:PSK::OutputAdaptor
open	./include/PSKOutput.h	/^    } void open(const std::string & outf) {$/;"	f	class:PSK::coutOutputAdaptor
open_append	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::open_append(const std::string & name) {$/;"	f	class:HDF5OutputAdaptor
open_append	./include/PSKOutput.h	/^    void open_append(const std::string & outf) {$/;"	f	class:PSK::OutputAgent
operator ()	./tests/test_arrays.cpp	/^    type& operator()(size_t n1) const$/;"	f	class:Rank1
operator ()	./tests/test_arrays.cpp	/^    type& operator()(size_t n1, size_t n2) const$/;"	f	class:BracketRank2
operator ()	./tests/test_arrays.cpp	/^    type& operator()(size_t n1, size_t n2) const$/;"	f	class:Rank2
operator ()	./tests/test_arrays.cpp	/^    type& operator()(size_t n1, size_t n2, size_t n3) const$/;"	f	class:Rank3
operator ()	./tests/test_arrays.cpp	/^    type& operator()(size_t n1, size_t n2, size_t n3, size_t n4) const$/;"	f	class:Rank4
operator +=	./utility/TimeTasks.cpp	/^void TimeTasks::operator+=(const TimeTasks& arg)$/;"	f	class:TimeTasks
operator /=	./utility/TimeTasks.cpp	/^void TimeTasks::operator\/=(int num)$/;"	f	class:TimeTasks
operator <<	./ConfigFile/src/ConfigFile.cpp	/^std::ostream & operator<<(std::ostream & os, const ConfigFile & cf) {$/;"	f
operator <<	./include/input_array.h	/^inline std::ostream & operator<<(std::ostream & os, const array_bool & t) {$/;"	f
operator <<	./include/input_array.h	/^inline std::ostream & operator<<(std::ostream & os, const array_double & t) {$/;"	f
operator <<	./include/input_array.h	/^inline std::ostream & operator<<(std::ostream & os, const array_int & t) {$/;"	f
operator =	./include/input_array.h	/^  array_bool & operator=(const array_bool & orig) {$/;"	f	struct:array_bool
operator =	./include/input_array.h	/^  array_double & operator=(const array_double & orig) {$/;"	f	struct:array_double
operator =	./include/input_array.h	/^  array_int & operator=(const array_int & orig) {$/;"	f	struct:array_int
operator =	./utility/TimeTasks.cpp	/^void TimeTasks::operator=(const TimeTasks& arg)$/;"	f	class:TimeTasks
operator >>	./ConfigFile/src/ConfigFile.cpp	/^std::istream & operator>>(std::istream & is, ConfigFile & cf) {$/;"	f
operator >>	./include/input_array.h	/^inline std::istream & operator>>(std::istream & is, array_bool & t) {$/;"	f
operator >>	./include/input_array.h	/^inline std::istream & operator>>(std::istream & is, array_double & t) {$/;"	f
operator >>	./include/input_array.h	/^inline std::istream & operator>>(std::istream & is, array_int & t) {$/;"	f
operator []	./include/Alloc.h	/^      const const_array_get2<type> operator[](size_t n3)const{$/;"	f	class:iPic3D::const_array_ref3
operator []	./include/Alloc.h	/^      const const_array_get3<type> operator[](size_t n4)const{$/;"	f	class:iPic3D::const_array_ref4
operator []	./include/Alloc.h	/^      inline array_fetch1<type> operator[](size_t n2){$/;"	f	class:iPic3D::array_ref2
operator []	./include/Alloc.h	/^      inline array_fetch2<type> operator[](size_t n3){$/;"	f	class:iPic3D::array_ref3
operator []	./include/Alloc.h	/^      inline array_fetch3<type> operator[](size_t n4){$/;"	f	class:iPic3D::array_ref4
operator []	./include/Alloc.h	/^      inline type& operator[](size_t n1){$/;"	f	class:iPic3D::array_ref1
operator []	./include/Alloc.h	/^    inline array_fetch1<type> operator[](size_t n2){$/;"	f	class:iPic3D::array_fetch2
operator []	./include/Alloc.h	/^    inline array_fetch2<type> operator[](size_t n3){$/;"	f	class:iPic3D::array_fetch3
operator []	./include/Alloc.h	/^    inline const const_array_get1<type> operator[](size_t n2)const{$/;"	f	class:iPic3D::const_array_get2
operator []	./include/Alloc.h	/^    inline const const_array_get2<type> operator[](size_t n3)const{$/;"	f	class:iPic3D::const_array_get3
operator []	./include/Alloc.h	/^    inline const type& operator[](size_t n1)const{$/;"	f	class:iPic3D::const_array_get1
operator []	./include/Alloc.h	/^    inline type& operator[](size_t n1){$/;"	f	class:iPic3D::array_fetch1
operator []	./include/PSKOutput.h	/^    } int operator[] (const int i) const {$/;"	f	class:PSK::Dimens
operator []	./include/arrays.h	/^  FixedArray2D1<type,s1,s2> operator[](size_t n1)$/;"	f	class:FixedArray2D
operator []	./include/arrays.h	/^  FixedArray3D1<type,s1,s2,s3> operator[](size_t n2)$/;"	f	class:FixedArray3D2
operator []	./include/arrays.h	/^  FixedArray3D2<type,s1,s2,s3> operator[](size_t n1)$/;"	f	struct:FixedArray3D
operator []	./include/arrays.h	/^  FixedArray4D1<type,s1,s2,s3,s4> operator[](size_t n3)$/;"	f	class:FixedArray4D2
operator []	./include/arrays.h	/^  FixedArray4D2<type,s1,s2,s3,s4> operator[](size_t n2)$/;"	f	class:FixedArray4D3
operator []	./include/arrays.h	/^  FixedArray4D3<type,s1,s2,s3,s4> operator[](size_t n1)$/;"	f	class:FixedArray4D
operator []	./include/arrays.h	/^  type& operator[](size_t n1)$/;"	f	class:FixedArray1D
operator []	./include/arrays.h	/^  type& operator[](size_t n2)$/;"	f	class:FixedArray2D1
operator []	./include/arrays.h	/^  type& operator[](size_t n3)$/;"	f	class:FixedArray3D1
operator []	./include/arrays.h	/^  type& operator[](size_t n4) { return arr[n1][n2][n3][n4]; }$/;"	f	class:FixedArray4D1
operator []	./tests/test_arrays.cpp	/^    BracketRank1<type> operator[](size_t i) const$/;"	f	class:BracketRank2
operator []	./tests/test_arrays.cpp	/^    type& operator[](size_t i) const$/;"	f	class:BracketRank1
operator type***	./include/Alloc.h	/^      operator type***(){ return (type***) arr3; }$/;"	f	class:iPic3D::array_ref3
operator type***	./include/Alloc.h	/^      operator type***(){ return (type***) arr3; }$/;"	f	class:iPic3D::const_array_ref3
operator type****	./include/Alloc.h	/^      operator type****(){ return (type****) arr4; }$/;"	f	class:iPic3D::array_ref4
operator type****	./include/Alloc.h	/^      operator type****(){ return (type****) arr4; }$/;"	f	class:iPic3D::const_array_ref4
output	./include/PSKOutput.h	/^    void output(const std::string & tag, int cycle) {$/;"	f	class:PSK::OutputManager
output	./include/PSKOutput.h	/^    void output(const std::string & tag, int cycle, int sample) {$/;"	f	class:PSK::OutputManager
output	./include/PSKOutput.h	/^  void output(const string & tag, int cycle) {$/;"	f	class:myOutputAgent
output	./include/PSKOutput.h	/^  void output(const string & tag, int cycle, int sample) {$/;"	f	class:myOutputAgent
output_adaptor	./include/PSKOutput.h	/^    Toa output_adaptor;$/;"	m	class:PSK::OutputAgent
output_filename	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var-2D/user_inputs_block_single_var_2D.h	/^    char output_filename[] = "sat_output_block_single_var.txt";    \/\/ output file$/;"	v
output_filename	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var/user_inputs_block_single_var.h	/^    char output_filename[] = "sat_output_block_single_var.txt";    \/\/ output file$/;"	v
output_filename	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block/user_inputs_block.h	/^    char output_filename[] = "sat_output_block.txt";    \/\/ output file$/;"	v
output_filename	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point-2D/user_inputs_point_2D.h	/^    char output_filename[] = "sat_output_point.txt";    \/\/ output file$/;"	v
output_filename	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point/user_inputs_point.h	/^    char output_filename[] = "sat_output_point.txt";    \/\/ output file$/;"	v
output_mgr	./include/iPic3D.h	/^    PSK::OutputManager < PSK::OutputAdaptor > output_mgr; \/\/ Create an Output Manager$/;"	m	class:iPic3D::c_Solver
pXXsn	./include/EMfields3D.h	/^    array4_double pXXsn;$/;"	m	class:EMfields3D
pXYsn	./include/EMfields3D.h	/^    array4_double pXYsn;$/;"	m	class:EMfields3D
pXZsn	./include/EMfields3D.h	/^    array4_double pXZsn;$/;"	m	class:EMfields3D
pYYsn	./include/EMfields3D.h	/^    array4_double pYYsn;$/;"	m	class:EMfields3D
pYZsn	./include/EMfields3D.h	/^    array4_double pYZsn;$/;"	m	class:EMfields3D
pZZsn	./include/EMfields3D.h	/^    array4_double pZZsn;$/;"	m	class:EMfields3D
parallel.h	./include/parallel.h	1;"	F
parseCorner	./communication/ComParser3D.cpp	/^void parseCorner(int nx, int ny, int nz, double ****vector, int ns, double *ghostXrightYrightZrightCorner, double *ghostXleftYrightZrightCorner, double *ghostXrightYleftZrightCorner, double *ghostXleftYleftZrightCorner, double *ghostXrightYrightZleftCorner, double *ghostXleftYrightZleftCorner, double *ghostXrightYleftZleftCorner, double *ghostXleftYleftZleftCorner) {$/;"	f
parseCorner	./communication/ComParser3D.cpp	/^void parseCorner(int nx, int ny, int nz, double ***vector, double *ghostXrightYrightZrightCorner, double *ghostXleftYrightZrightCorner, double *ghostXrightYleftZrightCorner, double *ghostXleftYleftZrightCorner, double *ghostXrightYrightZleftCorner, double *ghostXleftYrightZleftCorner, double *ghostXrightYleftZleftCorner, double *ghostXleftYleftZleftCorner) {$/;"	f
parseEdgeX	./communication/ComParser3D.cpp	/^void parseEdgeX(int nx, int ny, int nz, double ****vector, int ns, double *ghostXsameYrightZrightEdge, double *ghostXsameYleftZleftEdge, double *ghostXsameYleftZrightEdge, double *ghostXsameYrightZleftEdge) {$/;"	f
parseEdgeX	./communication/ComParser3D.cpp	/^void parseEdgeX(int nx, int ny, int nz, double ***vector, double *ghostXsameYrightZrightEdge, double *ghostXsameYleftZleftEdge, double *ghostXsameYleftZrightEdge, double *ghostXsameYrightZleftEdge) {$/;"	f
parseEdgeY	./communication/ComParser3D.cpp	/^void parseEdgeY(int nx, int ny, int nz, double ****vector, int ns, double *ghostXrightYsameZrightEdge, double *ghostXleftYsameZleftEdge, double *ghostXleftYsameZrightEdge, double *ghostXrightYsameZleftEdge) {$/;"	f
parseEdgeY	./communication/ComParser3D.cpp	/^void parseEdgeY(int nx, int ny, int nz, double ***vector, double *ghostXrightYsameZrightEdge, double *ghostXleftYsameZleftEdge, double *ghostXleftYsameZrightEdge, double *ghostXrightYsameZleftEdge) {$/;"	f
parseEdgeZ	./communication/ComParser3D.cpp	/^void parseEdgeZ(int nx, int ny, int nz, double ****vector, int ns, double *ghostXrightYrightZsameEdge, double *ghostXleftYleftZsameEdge, double *ghostXrightYleftZsameEdge, double *ghostXleftYrightZsameEdge) {$/;"	f
parseEdgeZ	./communication/ComParser3D.cpp	/^void parseEdgeZ(int nx, int ny, int nz, double ***vector, double *ghostXrightYrightZsameEdge, double *ghostXleftYleftZsameEdge, double *ghostXrightYleftZsameEdge, double *ghostXleftYrightZsameEdge) {$/;"	f
parseFace	./communication/ComParser3D.cpp	/^void parseFace(int nx, int ny, int nz, double ****vector, int ns, double *ghostXrightFace, double *ghostXleftFace, double *ghostYrightFace, double *ghostYleftFace, double *ghostZrightFace, double *ghostZleftFace) {$/;"	f
parseFace	./communication/ComParser3D.cpp	/^void parseFace(int nx, int ny, int nz, double ***vector, double *ghostXrightFace, double *ghostXleftFace, double *ghostYrightFace, double *ghostYleftFace, double *ghostZrightFace, double *ghostZleftFace) {$/;"	f
part	./include/iPic3D.h	/^    Particles3D   *part;$/;"	m	class:iPic3D::c_Solver
particleType	./include/Particles3Dcomm.h	/^  ParticleType::Type particleType;$/;"	m	class:Particles3Dcomm
particle_repopulator	./particles/Particles3D.cpp	/^int Particles3D::particle_repopulator(Grid* grid,VirtualTopology3D* vct, Field* EMf){$/;"	f	class:Particles3D
pcls	./include/Particles3Dcomm.h	/^  SpeciesParticle *pcls;$/;"	m	class:Particles3Dcomm
perfectConductorLeft	./fields/EMfields3D.cpp	/^void EMfields3D::perfectConductorLeft(arr3_double imageX, arr3_double imageY, arr3_double imageZ,$/;"	f	class:EMfields3D
perfectConductorLeftS	./fields/EMfields3D.cpp	/^void EMfields3D::perfectConductorLeftS(arr3_double vectorX, arr3_double vectorY, arr3_double vectorZ, int dir) {$/;"	f	class:EMfields3D
perfectConductorRight	./fields/EMfields3D.cpp	/^void EMfields3D::perfectConductorRight($/;"	f	class:EMfields3D
perfectConductorRightS	./fields/EMfields3D.cpp	/^void EMfields3D::perfectConductorRightS(arr3_double vectorX, arr3_double vectorY, arr3_double vectorZ, int dir) {$/;"	f	class:EMfields3D
periods	./include/VCtopology3D.h	/^  int periods[3];$/;"	m	class:VCtopology3D
periods_P	./include/VCtopology3D.h	/^  int periods_P[3];$/;"	m	class:VCtopology3D
pfloat	./include/ipicdefs.h	/^  typedef double pfloat;$/;"	t
pfloat	./include/ipicdefs.h	/^  typedef float pfloat;$/;"	t
pfloat_node_xcoord	./include/Grid3DCU.h	/^  pfloat *pfloat_node_xcoord;$/;"	m	class:Grid3DCU
pfloat_node_ycoord	./include/Grid3DCU.h	/^  pfloat *pfloat_node_ycoord;$/;"	m	class:Grid3DCU
pfloat_node_zcoord	./include/Grid3DCU.h	/^  pfloat *pfloat_node_zcoord;$/;"	m	class:Grid3DCU
phdf5.cpp	./inputoutput/phdf5.cpp	1;"	F
phdf5.h	./include/phdf5.h	1;"	F
phys2solver	./include/TransArraySpace3D.h	/^inline void phys2solver(double *vectSolver, const arr3_double vectPhys, int nx, int ny, int nz) {$/;"	f
phys2solver	./include/TransArraySpace3D.h	/^inline void phys2solver(double *vectSolver, const arr3_double vectPhys1, const arr3_double vectPhys2, const arr3_double vectPhys3, int nx, int ny, int nz) {$/;"	f
pow2rounddown	./include/ipicmath.h	/^pow2rounddown (int x)$/;"	f
pow2roundup	./include/ipicmath.h	/^pow2roundup (int x)$/;"	f
prepend_err_str	./include/PSKException.h	/^      void prepend_err_str(const std::string & str) {$/;"	f	class:PSK::Exception
print	./fields/EMfields3D.cpp	/^void EMfields3D::print(void) const {$/;"	f	class:EMfields3D
print	./grids/Grid3DCU.cpp	/^void Grid3DCU::print(VirtualTopology3D * ptVCT) {$/;"	f	class:Grid3DCU
print_cycle_times	./utility/TimeTasks.cpp	/^void TimeTasks::print_cycle_times(int cycle)$/;"	f	class:TimeTasks
print_cycle_times	./utility/new/diagnostics.cpp	/^void TimeTasks::print_cycle_times()$/;"	f	class:TimeTasks
process-virtual-sat-block-single-var-2D.cpp	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var-2D/process-virtual-sat-block-single-var-2D.cpp	1;"	F
process-virtual-sat-block-single-var.cpp	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var/process-virtual-sat-block-single-var.cpp	1;"	F
process-virtual-sat-block.cpp	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block/process-virtual-sat-block.cpp	1;"	F
process-virtual-sat-point-2D.cpp	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point-2D/process-virtual-sat-point-2D.cpp	1;"	F
process-virtual-sat-point.cpp	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point/process-virtual-sat-point.cpp	1;"	F
process_string	./utility/asserts.cpp	18;"	d	file:
process_string	./utility/asserts.cpp	21;"	d	file:
process_string	./utility/asserts.cpp	26;"	d	file:
process_string	./utility/asserts.cpp	29;"	d	file:
prod	./include/Basic.h	/^inline void prod(arr3_double vect1, double alfa, const arr4_double vect2, int ns, const arr3_double vect3, int nx, int ny, int nz) {$/;"	f
prod6	./include/Basic.h	/^inline void prod6(arr3_double vect1, const arr3_double vect2, const arr3_double vect3, const arr3_double vect4, const arr3_double vect5, const arr3_double vect6, const arr3_double vect7, int nx, int ny, int nz) {$/;"	f
proddiv	./include/Basic.h	/^inline void proddiv(arr3_double vect1, const arr3_double vect2, double alfa, const arr3_double vect3, const arr3_double vect4, const arr3_double vect5, const arr3_double vect6, double beta, const arr3_double vect7, const arr3_double vect8, double gamma, const arr3_double vect9, int nx, int ny, int nz) {$/;"	f
purify_object_name	./PSKOutput3D/PSKhdf5adaptor.cpp	/^std::string HDF5OutputAdaptor::purify_object_name(const std::string & objname) {$/;"	f	class:HDF5OutputAdaptor
push	./include/PSKException.h	/^      void push(const std::string & err_msg) {$/;"	f	class:PSK::Exception
push_back	./include/PSKOutput.h	/^    void push_back(OutputAgentBase * a_p) {$/;"	f	class:PSK::OutputManager
putColumn	./include/Basic.h	/^inline void putColumn(double **Matrix, double *vect, int column, int n) {$/;"	f
q	./include/Particle.h	/^  double q;$/;"	m	class:SpeciesParticle
q	./include/Particle.h	/^  float q; \/\/ float m would be better for stitching to MHD for dusty plasma$/;"	m	struct:CellParticle
q	./include/Particles3Dcomm.h	/^  double *q;$/;"	m	class:Particles3Dcomm
qom	./include/Collective.h	/^    double *qom;$/;"	m	class:Collective
qom	./include/EMfields3D.h	/^    double *qom;$/;"	m	class:EMfields3D
qom	./include/Particle.h	/^  float qom; \/\/ for dusty plasma$/;"	m	struct:CellParticle
qom	./include/Particles3Dcomm.h	/^  double qom;$/;"	m	class:Particles3Dcomm
qtmp	./include/Particles3Dcomm.h	/^  double *qtmp;$/;"	m	class:Particles3Dcomm
rank	./include/MPIdata.h	/^  static int rank;$/;"	m	class:MPIdata
rank	./utility/MPIdata.cpp	/^int MPIdata::rank=-1;$/;"	m	class:MPIdata	file:
rank_id	./include/Timing.h	/^  int rank_id;$/;"	m	class:Timing
read	./ConfigFile/src/ConfigFile.h	/^template < class T > T ConfigFile::read(const string & key) const {$/;"	f	class:ConfigFile
read	./ConfigFile/src/ConfigFile.h	/^template < class T > T ConfigFile::read(const string & key, const T & value) const {$/;"	f	class:ConfigFile
read	./include/ConfigFile.h	/^template < class T > T ConfigFile::read(const string & key) const {$/;"	f	class:ConfigFile
read	./include/ConfigFile.h	/^template < class T > T ConfigFile::read(const string & key, const T & value) const {$/;"	f	class:ConfigFile
readInto	./ConfigFile/src/ConfigFile.h	/^template < class T > bool ConfigFile::readInto(T & var, const string & key) const {$/;"	f	class:ConfigFile
readInto	./ConfigFile/src/ConfigFile.h	/^template < class T > bool ConfigFile::readInto(T & var, const string & key, const T & value) const {$/;"	f	class:ConfigFile
readInto	./include/ConfigFile.h	/^template < class T > bool ConfigFile::readInto(T & var, const string & key) const {$/;"	f	class:ConfigFile
readInto	./include/ConfigFile.h	/^template < class T > bool ConfigFile::readInto(T & var, const string & key, const T & value) const {$/;"	f	class:ConfigFile
read_virtual_sat	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point-2D/process-virtual-sat-point-2D.cpp	/^void read_virtual_sat(float Bx0,$/;"	f
read_virtual_sat	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point/process-virtual-sat-point.cpp	/^void read_virtual_sat(float Bx0,$/;"	f
read_virtual_sat_block	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var-2D/process-virtual-sat-block-single-var-2D.cpp	/^void read_virtual_sat_block(float dt){$/;"	f
read_virtual_sat_block	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var/process-virtual-sat-block-single-var.cpp	/^void read_virtual_sat_block(float dt){$/;"	f
read_virtual_sat_block	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block/process-virtual-sat-block.cpp	/^void read_virtual_sat_block(float Bx0,$/;"	f
reduceMaxNpExiting	./include/ComParticles3D.h	/^inline int reduceMaxNpExiting(int npExitingMax) {$/;"	f
reduceNumberParticles	./include/ComParticles3D.h	/^inline int reduceNumberParticles(int rightDomain) {$/;"	f
remove	./ConfigFile/src/ConfigFile.cpp	/^void ConfigFile::remove(const string & key) {$/;"	f	class:ConfigFile
reorder	./include/VCtopology3D.h	/^  int reorder;$/;"	m	class:VCtopology3D
report_nan	./include/asserts.h	158;"	d
resetCycle	./utility/TimeTasks.cpp	/^void TimeTasks::resetCycle()$/;"	f	class:TimeTasks
resetCycle	./utility/new/diagnostics.cpp	/^void TimeTasks::resetCycle()$/;"	f	class:TimeTasks
resize_buffers	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::resize_buffers(int new_buffer_size) {$/;"	f	class:Particles3Dcomm
restart	./include/Particles3Dcomm.h	/^  int restart;$/;"	m	class:Particles3Dcomm
restart	./include/iPic3D.h	/^    int restart;$/;"	m	class:iPic3D::c_Solver
restart1	./include/EMfields3D.h	/^    int restart1;$/;"	m	class:EMfields3D
restart_cycle	./include/iPic3D.h	/^    int restart_cycle;$/;"	m	class:iPic3D::c_Solver
restart_status	./include/Collective.h	/^    int restart_status;$/;"	m	class:Collective
rhoINIT	./include/Collective.h	/^    double *rhoINIT;$/;"	m	class:Collective
rhoINIT	./include/EMfields3D.h	/^    double *rhoINIT;$/;"	m	class:EMfields3D
rhoINJECT	./include/Collective.h	/^    double *rhoINJECT;$/;"	m	class:Collective
rhoc	./include/EMfields3D.h	/^    array3_double rhoc;$/;"	m	class:EMfields3D
rhocs	./include/EMfields3D.h	/^    array4_double rhocs;$/;"	m	class:EMfields3D
rhoh	./include/EMfields3D.h	/^    array3_double rhoh;$/;"	m	class:EMfields3D
rhon	./include/EMfields3D.h	/^    array3_double rhon;$/;"	m	class:EMfields3D
rhons	./include/EMfields3D.h	/^    array4_double rhons;$/;"	m	class:EMfields3D
rightDomain	./include/Particles3Dcomm.h	/^  int rightDomain;$/;"	m	class:Particles3Dcomm
roundup_to_multiple	./include/ipicmath.h	/^inline int roundup_to_multiple(int n, int m)$/;"	f
save	./inputoutput/Collective.cpp	/^void Collective::save() {$/;"	f	class:Collective
scale	./include/Basic.h	/^inline void scale(arr3_double vect, double alfa, int nx, int ny) {$/;"	f
scale	./include/Basic.h	/^inline void scale(arr3_double vect, double alfa, int nx, int ny, int nz) {$/;"	f
scale	./include/Basic.h	/^inline void scale(arr3_double vect1, const arr3_double vect2, double alfa, int nx, int ny) {$/;"	f
scale	./include/Basic.h	/^inline void scale(arr3_double vect1, const arr3_double vect2, double alfa, int nx, int ny, int nz) {$/;"	f
scale	./include/Basic.h	/^inline void scale(double *vect, double alfa, int n) {$/;"	f
scale	./include/Basic.h	/^inline void scale(double *vect1, double *vect2, double alfa, int n) {$/;"	f
scale	./include/Basic.h	/^inline void scale(double vect[][2][2], double alfa, int nx, int ny, int nz) {$/;"	f
scaleandsum	./include/Basic.h	/^inline void scaleandsum(arr3_double vect1, double alfa, double beta, const arr3_double vect2, const arr3_double vect3, int nx, int ny, int nz) {$/;"	f
scaleandsum	./include/Basic.h	/^inline void scaleandsum(arr3_double vect1, double alfa, double beta, const arr4_double vect2, const arr3_double vect3, int ns, int nx, int ny, int nz) {$/;"	f
set	./include/Alloc.h	/^      void set(size_t n1, type value)$/;"	f	class:iPic3D::array_ref1
set	./include/Alloc.h	/^      void set(size_t n2,size_t n1, type value)$/;"	f	class:iPic3D::array_ref2
set	./include/Alloc.h	/^      void set(size_t n3,size_t n2,size_t n1, type value)$/;"	f	class:iPic3D::array_ref3
set	./include/Alloc.h	/^      void set(size_t n3,size_t n2,size_t n1, type value)$/;"	f	class:iPic3D::const_array_ref3
set	./include/Alloc.h	/^      void set(size_t n4,size_t n3,size_t n2,size_t n1, type value)$/;"	f	class:iPic3D::array_ref4
set	./include/Alloc.h	/^      void set(size_t n4,size_t n3,size_t n2,size_t n1, type value)$/;"	f	class:iPic3D::const_array_ref4
set	./include/Particle.h	/^  void set(long long _ID,$/;"	f	class:SpeciesParticle
setComment	./ConfigFile/src/ConfigFile.h	/^  } string setComment(const string & s) {$/;"	f	class:ConfigFile
setComment	./include/ConfigFile.h	/^  } string setComment(const string & s) {$/;"	f	class:ConfigFile
setDelimiter	./ConfigFile/src/ConfigFile.h	/^  } string setDelimiter(const string & s) {$/;"	f	class:ConfigFile
setDelimiter	./include/ConfigFile.h	/^  } string setDelimiter(const string & s) {$/;"	f	class:ConfigFile
setFluidFieldsCenter	./include/InterfaceFluid.h	/^  inline void setFluidFieldsCenter($/;"	f	class:InterfaceFluid
setGlobalStartIndex	./include/InterfaceFluid.h	/^  void setGlobalStartIndex(VCtopology3D *vct)$/;"	f	class:InterfaceFluid
setZeroDensities	./fields/EMfields3D.cpp	/^void EMfields3D::setZeroDensities() {$/;"	f	class:EMfields3D
setZeroDerivedMoments	./fields/EMfields3D.cpp	/^void EMfields3D::setZeroDerivedMoments()$/;"	f	class:EMfields3D
setZeroPrimaryMoments	./fields/EMfields3D.cpp	/^void EMfields3D::setZeroPrimaryMoments() {$/;"	f	class:EMfields3D
set_ID	./include/Particle.h	/^  void set_ID(long long in){ ID=in; }$/;"	f	class:SpeciesParticle
set_ID	./include/Particle.h	/^  void set_ID(long long in){ ID=in; }$/;"	f	struct:CellParticle
set_communicating	./include/TimeTasks.h	/^  void set_communicating(bool val) { communicating = val; }$/;"	f	class:TimeTasks
set_fieldForPcls	./fields/EMfields3D.cpp	/^void EMfields3D::set_fieldForPcls()$/;"	f	class:EMfields3D
set_prod3	./tests/test_arrays.cpp	/^void set_prod3(array_ref3<type> Aarr,const_arr3<type> Barr,array_ref3<type> Carr,int ITERS, size_t dim1,size_t dim2,size_t dim3)$/;"	f
set_q	./include/Particle.h	/^  void set_q(double in) { q = in; }$/;"	f	class:SpeciesParticle
set_simulation_pointers	./include/PSKOutput.h	/^  void set_simulation_pointers(Field * field, Grid * grid, VCtopology3D * vct, MPIdata * mpi, Collective * col) {$/;"	f	class:myOutputAgent
set_simulation_pointers_part	./include/PSKOutput.h	/^  void set_simulation_pointers_part(Particles * part) {$/;"	f	class:myOutputAgent
set_to_zero	./fields/Moments.cpp	/^void Moments10::set_to_zero()$/;"	f	class:Moments10
set_u	./include/Particle.h	/^  void set_u(double in){ u[0]=in; }$/;"	f	class:SpeciesParticle
set_u	./include/Particle.h	/^  void set_u(float in){ u[0]=in; }$/;"	f	struct:CellParticle
set_u	./include/Particle.h	/^  void set_u(int i, double in) { u[i] = in; }$/;"	f	class:SpeciesParticle
set_v	./include/Particle.h	/^  void set_v(double in){ u[1]=in; }$/;"	f	class:SpeciesParticle
set_v	./include/Particle.h	/^  void set_v(float in){ u[1]=in; }$/;"	f	struct:CellParticle
set_w	./include/Particle.h	/^  void set_w(double in){ u[2]=in; }$/;"	f	class:SpeciesParticle
set_w	./include/Particle.h	/^  void set_w(float in){ u[2]=in; }$/;"	f	struct:CellParticle
set_x	./include/Particle.h	/^  void set_x(double in){ x[0]=in; }$/;"	f	class:SpeciesParticle
set_x	./include/Particle.h	/^  void set_x(int i, double in) { x[i] = in; }$/;"	f	class:SpeciesParticle
set_y	./include/Particle.h	/^  void set_y(double in){ x[1]=in; }$/;"	f	class:SpeciesParticle
set_z	./include/Particle.h	/^  void set_z(double in){ x[2]=in; }$/;"	f	class:SpeciesParticle
setall	./include/Alloc.h	/^      void setall(type val) { const_array_ref4<type>::setall(val); }$/;"	f	class:iPic3D::array_ref4
setall	./include/Alloc.h	/^      void setall(type val)$/;"	f	class:iPic3D::const_array_ref4
setall	./include/Alloc.h	/^      void setall(type val){$/;"	f	class:iPic3D::array_ref3
setall	./include/Alloc.h	/^      void setall(type val){$/;"	f	class:iPic3D::base_arr
setup_vctopology	./communication/VCtopology3D.cpp	/^void VCtopology3D::setup_vctopology(MPI_Comm old_comm) {$/;"	f	class:VCtopology3D
shift	./include/Alloc.h	/^    const size_t shift;$/;"	m	class:iPic3D::array_fetch1
shift	./include/Alloc.h	/^    const size_t shift;$/;"	m	class:iPic3D::array_fetch2
shift	./include/Alloc.h	/^    const size_t shift;$/;"	m	class:iPic3D::array_fetch3
shift	./include/Alloc.h	/^    const size_t shift;$/;"	m	class:iPic3D::const_array_get1
shift	./include/Alloc.h	/^    const size_t shift;$/;"	m	class:iPic3D::const_array_get2
shift	./include/Alloc.h	/^    const size_t shift;$/;"	m	class:iPic3D::const_array_get3
size	./include/Alloc.h	/^      size_t size;$/;"	m	class:iPic3D::base_arr
size	./include/Alloc.h	/^      size_t size;$/;"	m	class:iPic3D::const_array_ref3
size	./include/Alloc.h	/^      size_t size;$/;"	m	class:iPic3D::const_array_ref4
size	./include/PSKOutput.h	/^    int size(void) const {$/;"	f	class:PSK::Dimens
sizeMomentsArray	./include/EMfields3D.h	/^    int sizeMomentsArray;$/;"	m	class:EMfields3D
slice_normal	./postprocessing_tools/c++/fft-2D-slice-of-vtk/user_inputs.h	/^    string slice_normal="y";$/;"	v
slice_pos	./postprocessing_tools/c++/fft-2D-slice-of-vtk/user_inputs.h	/^    float slice_pos=7.5;$/;"	v
smooth	./fields/EMfields3D.cpp	/^void EMfields3D::smooth(double value, arr3_double vector, int type, Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
smooth	./fields/EMfields3D.cpp	/^void EMfields3D::smooth(double value, arr4_double vector, int is, int type, Grid * grid, VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
smoothE	./fields/EMfields3D.cpp	/^void EMfields3D::smoothE(double value, VirtualTopology3D * vct, Collective *col) {$/;"	f	class:EMfields3D
solver2phys	./include/TransArraySpace3D.h	/^inline void solver2phys(arr3_double vectPhys, double *vectSolver, int nx, int ny, int nz) {$/;"	f
solver2phys	./include/TransArraySpace3D.h	/^inline void solver2phys(arr3_double vectPhys1, arr3_double vectPhys2, arr3_double vectPhys3, double *vectSolver, int nx, int ny, int nz) {$/;"	f
sort_particles_serial	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::sort_particles_serial($/;"	f	class:Particles3Dcomm
sort_particles_serial	./particles/Particles3Dcomm.cpp	/^void Particles3Dcomm::sort_particles_serial(Grid * grid, VirtualTopology3D * vct)$/;"	f	class:Particles3Dcomm
split_name	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::split_name(const std::string & name, std::vector < std::string > &elements) {$/;"	f	class:HDF5OutputAdaptor
stack_depth	./include/TimeTasks.h	/^  int stack_depth[NUMBER_OF_TASKS];$/;"	m	class:TimeTasks
start	./utility/new/diagnostics.cpp	/^void TimeTasks::start(int taskid)$/;"	f	class:TimeTasks
startTiming	./performances/Timing.cpp	/^void Timing::startTiming() {$/;"	f	class:Timing
start_communicate	./utility/new/diagnostics.cpp	/^void TimeTasks::start_communicate()$/;"	f	class:TimeTasks
start_field	./performances/Timing.cpp	/^void Timing::start_field() {$/;"	f	class:Timing
start_interpP2G	./performances/Timing.cpp	/^void Timing::start_interpP2G() {$/;"	f	class:Timing
start_main_task	./utility/TimeTasks.cpp	/^void TimeTasks::start_main_task(TimeTasks::Tasks taskid)$/;"	f	class:TimeTasks
start_mover	./performances/Timing.cpp	/^void Timing::start_mover() {$/;"	f	class:Timing
start_task	./utility/TimeTasks.cpp	/^void TimeTasks::start_task(TimeTasks::Tasks taskid)$/;"	f	class:TimeTasks
start_task	./utility/TimeTasks.cpp	/^void TimeTasks::start_task(TimeTasks::Tasks taskid, double start_time)$/;"	f	class:TimeTasks
start_time	./include/TimeTasks.h	/^  double start_time;$/;"	m	class:TimeTasks_caller_to_set_communication_mode_for_scope
start_time	./include/TimeTasks.h	/^  double start_time;$/;"	m	class:TimeTasks_caller_to_set_main_task_for_scope
start_time	./include/TimeTasks.h	/^  double start_time;$/;"	m	class:TimeTasks_caller_to_set_task_for_scope
start_times	./include/TimeTasks.h	/^  double start_times[NUMBER_OF_TASKS];$/;"	m	class:TimeTasks
state	./tests/stopwatch.h	/^   sw_state_t state;$/;"	m	struct:__anon3
status	./include/MPIdata.h	/^  MPI_Status status;$/;"	m	class:MPIdata
status	./include/VCtopology3D.h	/^  MPI_Status status;$/;"	m	class:VCtopology3D
stopTiming	./performances/Timing.cpp	/^void Timing::stopTiming() {$/;"	f	class:Timing
stop_field	./performances/Timing.cpp	/^void Timing::stop_field() {$/;"	f	class:Timing
stop_interpP2G	./performances/Timing.cpp	/^void Timing::stop_interpP2G() {$/;"	f	class:Timing
stop_mover	./performances/Timing.cpp	/^void Timing::stop_mover() {$/;"	f	class:Timing
stopwatch	./tests/stopwatch.h	/^struct timeval stopwatch(sw_action_t action){$/;"	f
stopwatch.h	./tests/stopwatch.h	1;"	F
stopwatch_mt	./tests/stopwatch.h	/^static inline struct timeval stopwatch_mt(stopwatch_t * const sw, sw_action_t action){$/;"	f
stopwatch_t	./tests/stopwatch.h	/^} stopwatch_t;$/;"	t	typeref:struct:__anon3
string_as_T	./ConfigFile/src/ConfigFile.h	/^template < class T > T ConfigFile::string_as_T(const string & s) {$/;"	f	class:ConfigFile
string_as_T	./ConfigFile/src/ConfigFile.h	/^template <> inline bool ConfigFile::string_as_T < bool > (const string & s) {$/;"	f	class:ConfigFile
string_as_T	./ConfigFile/src/ConfigFile.h	/^template <> inline string ConfigFile::string_as_T < string > (const string & s) {$/;"	f	class:ConfigFile
string_as_T	./include/ConfigFile.h	/^template < class T > T ConfigFile::string_as_T(const string & s) {$/;"	f	class:ConfigFile
string_as_T	./include/ConfigFile.h	/^template <> inline bool ConfigFile::string_as_T < bool > (const string & s) {$/;"	f	class:ConfigFile
string_as_T	./include/ConfigFile.h	/^template <> inline string ConfigFile::string_as_T < string > (const string & s) {$/;"	f	class:ConfigFile
sub	./include/Basic.h	/^inline void sub(arr3_double vect1, const arr3_double vect2, int nx, int ny) {$/;"	f
sub	./include/Basic.h	/^inline void sub(arr3_double vect1, const arr3_double vect2, int nx, int ny, int nz) {$/;"	f
sub	./include/Basic.h	/^inline void sub(double *res, double *vect1, double *vect2, int n) {$/;"	f
sum	./include/Basic.h	/^inline void sum(arr3_double vect1, const arr3_double vect2, int nx, int ny) {$/;"	f
sum	./include/Basic.h	/^inline void sum(arr3_double vect1, const arr3_double vect2, int nx, int ny, int nz) {$/;"	f
sum	./include/Basic.h	/^inline void sum(arr3_double vect1, const arr4_double vect2, int nx, int ny, int ns) {$/;"	f
sum	./include/Basic.h	/^inline void sum(arr3_double vect1, const arr4_double vect2, int nx, int ny, int nz, int ns) {$/;"	f
sum	./include/Basic.h	/^inline void sum(double *vect1, double *vect2, int n) {$/;"	f
sum4	./include/Basic.h	/^inline void sum4(arr3_double vect1, double alfa, const arr3_double vect2, double beta, const arr3_double vect3, double gamma, const arr3_double vect4, double delta, const arr3_double vect5, int nx, int ny, int nz) {$/;"	f
sumMoments	./fields/EMfields3D.cpp	/^void EMfields3D::sumMoments(const Particles3Dcomm* part, Grid * grid, VirtualTopology3D * vct)$/;"	f	class:EMfields3D
sumMomentsOld	./fields/EMfields3D.cpp	/^void EMfields3D::sumMomentsOld(const Particles3Dcomm& pcls, Grid * grid, VirtualTopology3D * vct)$/;"	f	class:EMfields3D
sumMoments_AoS	./fields/EMfields3D.cpp	/^void EMfields3D::sumMoments_AoS($/;"	f	class:EMfields3D
sumMoments_vectorized	./fields/EMfields3D.cpp	/^void EMfields3D::sumMoments_vectorized($/;"	f	class:EMfields3D
sumOverSpecies	./fields/EMfields3D.cpp	/^void EMfields3D::sumOverSpecies(VirtualTopology3D * vct) {$/;"	f	class:EMfields3D
sumOverSpeciesJ	./fields/EMfields3D.cpp	/^void EMfields3D::sumOverSpeciesJ() {$/;"	f	class:EMfields3D
sustensorLeftX	./fields/EMfields3D.cpp	/^void EMfields3D::sustensorLeftX(double **susxx, double **susyx, double **suszx) {$/;"	f	class:EMfields3D
sustensorLeftY	./fields/EMfields3D.cpp	/^void EMfields3D::sustensorLeftY(double **susxy, double **susyy, double **suszy) {$/;"	f	class:EMfields3D
sustensorLeftZ	./fields/EMfields3D.cpp	/^void EMfields3D::sustensorLeftZ(double **susxz, double **susyz, double **suszz) {$/;"	f	class:EMfields3D
sustensorRightX	./fields/EMfields3D.cpp	/^void EMfields3D::sustensorRightX(double **susxx, double **susyx, double **suszx) {$/;"	f	class:EMfields3D
sustensorRightY	./fields/EMfields3D.cpp	/^void EMfields3D::sustensorRightY(double **susxy, double **susyy, double **suszy) {$/;"	f	class:EMfields3D
sustensorRightZ	./fields/EMfields3D.cpp	/^void EMfields3D::sustensorRightZ(double **susxz, double **susyz, double **suszz) {$/;"	f	class:EMfields3D
sw_action_t	./tests/stopwatch.h	/^typedef enum {START, STOP, LAP, RESET} sw_action_t;$/;"	t	typeref:enum:__anon1
sw_lap	./tests/stopwatch.h	/^static inline struct timeval sw_lap(stopwatch_t * const sw ){$/;"	f
sw_reset	./tests/stopwatch.h	/^static inline struct timeval sw_reset(stopwatch_t * const sw ){$/;"	f
sw_start	./tests/stopwatch.h	/^static inline struct timeval sw_start(stopwatch_t * const sw ){$/;"	f
sw_state_t	./tests/stopwatch.h	/^typedef enum {OFF, STARTED, STOPPED} sw_state_t;$/;"	t	typeref:enum:__anon2
sw_stop	./tests/stopwatch.h	/^static inline struct timeval sw_stop(stopwatch_t * const sw ){$/;"	f
swapBuffer	./communication/ComParser3D.cpp	/^void swapBuffer(double *b_left, double *b_right) {$/;"	f
swapBuffer	./communication/ComParser3D.cpp	/^void swapBuffer(int buffer_size, double *b_left, double *b_right) {$/;"	f
swapGhostFace	./communication/ComParser3D.cpp	/^void swapGhostFace(int n1, int n2, double **ghostFaceLeft, double **ghostFaceRight) {$/;"	f
task	./include/TimeTasks.h	/^  TimeTasks::Tasks task;$/;"	m	class:TimeTasks_caller_to_set_main_task_for_scope
task	./include/TimeTasks.h	/^  TimeTasks::Tasks task;$/;"	m	class:TimeTasks_caller_to_set_task_for_scope
taskNames	./utility/TimeTasks.cpp	/^static const char *taskNames[] = \/\/ order must agree with Tasks in TimeTasks.h$/;"	v	file:
task_duration	./include/TimeTasks.h	/^  double task_duration[NUMBER_OF_TASKS];$/;"	m	class:TimeTasks
temp2X	./include/EMfields3D.h	/^    array3_double temp2X;$/;"	m	class:EMfields3D
temp2Y	./include/EMfields3D.h	/^    array3_double temp2Y;$/;"	m	class:EMfields3D
temp2Z	./include/EMfields3D.h	/^    array3_double temp2Z;$/;"	m	class:EMfields3D
tempC	./include/EMfields3D.h	/^    array3_double tempC;$/;"	m	class:EMfields3D
tempX	./include/EMfields3D.h	/^    array3_double tempX;$/;"	m	class:EMfields3D
tempXC	./include/EMfields3D.h	/^    array3_double tempXC;$/;"	m	class:EMfields3D
tempXN	./include/EMfields3D.h	/^    array3_double tempXN;$/;"	m	class:EMfields3D
tempY	./include/EMfields3D.h	/^    array3_double tempY;$/;"	m	class:EMfields3D
tempYC	./include/EMfields3D.h	/^    array3_double tempYC;$/;"	m	class:EMfields3D
tempYN	./include/EMfields3D.h	/^    array3_double tempYN;$/;"	m	class:EMfields3D
tempZ	./include/EMfields3D.h	/^    array3_double tempZ;$/;"	m	class:EMfields3D
tempZC	./include/EMfields3D.h	/^    array3_double tempZC;$/;"	m	class:EMfields3D
tempZN	./include/EMfields3D.h	/^    array3_double tempZN;$/;"	m	class:EMfields3D
tend	./include/Timing.h	/^  double tend;$/;"	m	class:Timing
testArr2	./tests/test_arrays.cpp	/^void testArr2()$/;"	f
testArr2_diagonal	./tests/test_arrays.cpp	/^void testArr2_diagonal()$/;"	f
testArr3	./tests/test_arrays.cpp	/^void testArr3()$/;"	f
testArr3nestedFor	./tests/test_arrays.cpp	535;"	d	file:
testArr4	./tests/test_arrays.cpp	/^void testArr4()$/;"	f
test_arrays.cpp	./tests/test_arrays.cpp	1;"	F
texecution	./include/Timing.h	/^  double texecution;$/;"	m	class:Timing
th	./include/Collective.h	/^    double th;$/;"	m	class:Collective
th	./include/EMfields3D.h	/^    double th;$/;"	m	class:EMfields3D
timeTasks	./utility/TimeTasks.cpp	/^TimeTasks timeTasks;$/;"	v
timeTasks_begin_task	./include/TimeTasks.h	162;"	d
timeTasks_end_task	./include/TimeTasks.h	163;"	d
timeTasks_set_communicating	./include/TimeTasks.h	157;"	d
timeTasks_set_main_task	./include/TimeTasks.h	153;"	d
timeTasks_set_task	./include/TimeTasks.h	155;"	d
total	./tests/stopwatch.h	/^   struct timeval total, now, last;$/;"	m	struct:__anon3	typeref:struct:__anon3::timeval
trim	./ConfigFile/src/ConfigFile.cpp	/^void ConfigFile::trim(string & s) {$/;"	f	class:ConfigFile
tstart	./include/Timing.h	/^  double tstart;$/;"	m	class:Timing
ttick	./include/Timing.h	/^  double ttick;$/;"	m	class:Timing
tv_to_ms	./tests/stopwatch.h	/^static inline myuint64_t tv_to_ms(struct timeval tv){$/;"	f
tv_to_sec	./tests/stopwatch.h	/^static inline myuint64_t tv_to_sec(struct timeval tv){$/;"	f
tv_to_us	./tests/stopwatch.h	/^static inline myuint64_t tv_to_us(struct timeval tv){$/;"	f
type	./include/arrays.h	/^  FixedArray2D1(type (&_arr)[s1][s2], size_t _n1) :$/;"	m	class:FixedArray2D1
type	./include/arrays.h	/^  FixedArray3D1(type (&_arr)[s1][s2][s3], size_t _n1, size_t _n2) :$/;"	m	class:FixedArray3D1
type	./include/arrays.h	/^  FixedArray3D2(type (&_arr)[s1][s2][s3], size_t _n1) : arr(_arr), n1(_n1) {};$/;"	m	class:FixedArray3D2
type	./include/arrays.h	/^  FixedArray4D1(type(&_arr)[s1][s2][s3][s4],size_t _n1,size_t _n2,size_t _n3):$/;"	m	class:FixedArray4D1
type	./include/arrays.h	/^  FixedArray4D2(type (&_arr)[s1][s2][s3][s4], size_t _n1, size_t _n2) :$/;"	m	class:FixedArray4D2
type	./include/arrays.h	/^  FixedArray4D3(type (&_arr)[s1][s2][s3][s4], size_t _n1) :$/;"	m	class:FixedArray4D3
u	./include/Particle.h	/^  double u[3];$/;"	m	class:SpeciesParticle
u	./include/Particle.h	/^  float u[3];$/;"	m	struct:CellParticle
u	./include/Particles3Dcomm.h	/^  double *u;$/;"	m	class:Particles3Dcomm
u0	./include/Collective.h	/^    double *u0;$/;"	m	class:Collective
u0	./include/Particles3Dcomm.h	/^  double u0;$/;"	m	class:Particles3Dcomm
ue0	./include/EMfields3D.h	/^    double ue0, ve0, we0;$/;"	m	class:EMfields3D
unbuffer	./particles/Particles3Dcomm.cpp	/^int Particles3Dcomm::unbuffer(double *b_) {$/;"	f	class:Particles3Dcomm
uniform_background	./particles/Particles3D.cpp	/^void Particles3D::uniform_background(Grid * grid, Field * EMf) {$/;"	f	class:Particles3D
unsupported_value_error	./include/errors.h	25;"	d
updateInfoFields	./fields/EMfields3D.cpp	/^void EMfields3D::updateInfoFields(Grid *grid,VirtualTopology3D *vct,Collective *col){$/;"	f	class:EMfields3D
user_inputs.h	./postprocessing_tools/c++/fft-2D-slice-of-vtk/user_inputs.h	1;"	F
user_inputs_block.h	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block/user_inputs_block.h	1;"	F
user_inputs_block_single_var.h	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var/user_inputs_block_single_var.h	1;"	F
user_inputs_block_single_var_2D.h	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var-2D/user_inputs_block_single_var_2D.h	1;"	F
user_inputs_point.h	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point/user_inputs_point.h	1;"	F
user_inputs_point_2D.h	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point-2D/user_inputs_point_2D.h	1;"	F
uth	./include/Collective.h	/^    double *uth;$/;"	m	class:Collective
uth	./include/Particles3Dcomm.h	/^  double uth;$/;"	m	class:Particles3Dcomm
utmp	./include/Particles3Dcomm.h	/^  double *utmp;$/;"	m	class:Particles3Dcomm
v	./include/Particles3Dcomm.h	/^  double *v;$/;"	m	class:Particles3Dcomm
v0	./include/Collective.h	/^    double *v0;$/;"	m	class:Collective
v0	./include/Particles3Dcomm.h	/^  double v0;$/;"	m	class:Particles3Dcomm
valid_sw_action	./tests/stopwatch.h	/^static inline int valid_sw_action(sw_action_t t){$/;"	f
valid_sw_state	./tests/stopwatch.h	/^static inline int valid_sw_state(sw_state_t s){$/;"	f
var_type	./postprocessing_tools/c++/fft-2D-slice-of-vtk/user_inputs.h	/^    string var_type="scalar";$/;"	v
vct	./include/iPic3D.h	/^    VCtopology3D  *vct;$/;"	m	class:iPic3D::c_Solver
ve0	./include/EMfields3D.h	/^    double ue0, ve0, we0;$/;"	m	class:EMfields3D
vectX	./include/EMfields3D.h	/^    array3_double vectX;$/;"	m	class:EMfields3D
vectY	./include/EMfields3D.h	/^    array3_double vectY;$/;"	m	class:EMfields3D
vectZ	./include/EMfields3D.h	/^    array3_double vectZ;$/;"	m	class:EMfields3D
verbose	./include/Collective.h	/^    bool verbose;$/;"	m	class:Collective
verbose	./include/iPic3D.h	/^    bool verbose;$/;"	m	class:iPic3D::c_Solver
vth	./include/Collective.h	/^    double *vth;$/;"	m	class:Collective
vth	./include/Particles3Dcomm.h	/^  double vth;$/;"	m	class:Particles3Dcomm
vtk_filename	./postprocessing_tools/c++/fft-2D-slice-of-vtk/user_inputs.h	/^    char vtk_filename[]="\/media\/Elements\/Data_and_Runs\/iPIC3D_data\/tred46\/rho_tot_electrons_cycle12000.vtk";$/;"	v
vtmp	./include/Particles3Dcomm.h	/^  double *vtmp;$/;"	m	class:Particles3Dcomm
w	./include/Particles3Dcomm.h	/^  double *w;$/;"	m	class:Particles3Dcomm
w0	./include/Collective.h	/^    double *w0;$/;"	m	class:Collective
w0	./include/Particles3Dcomm.h	/^  double w0;$/;"	m	class:Particles3Dcomm
warning_printf	./include/errors.h	17;"	d
we0	./include/EMfields3D.h	/^    double ue0, ve0, we0;$/;"	m	class:EMfields3D
wmethod	./include/Collective.h	/^    string wmethod;$/;"	m	class:Collective
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & objname, const Dimens dimens, const float ***f_array) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & objname, const Dimens dimens, const int ***i_array) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & objname, const Dimens dimens, const int ns, const_arr3_double d_array) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & objname, const Dimens dimens, const int ns, const_arr4_double d_array) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & objname, const Dimens dimens, const_arr3_double d_array) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & objname, const Dimens dimens, double **d_array) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const double *d_array) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const float *f_array) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const int *i_array) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const long *i_array) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const std::vector < double >&d_array) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const std::vector < float >&f_array) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const std::vector < int >&i_array) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, const Dimens dimens, const std::vector < long >&i_array) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, double d_value) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, float f_value) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, int i_value) {$/;"	f	class:HDF5OutputAdaptor
write	./PSKOutput3D/PSKhdf5adaptor.cpp	/^void HDF5OutputAdaptor::write(const std::string & tag, long i_value) {$/;"	f	class:HDF5OutputAdaptor
write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const double *d_array) {$/;"	f	class:PSK::OutputAdaptor
write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const float *f_array) {$/;"	f	class:PSK::OutputAdaptor
write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const int *i_array) {$/;"	f	class:PSK::OutputAdaptor
write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const long *i_array) {$/;"	f	class:PSK::OutputAdaptor
write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const std::vector < double >&d_array) {$/;"	f	class:PSK::OutputAdaptor
write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const std::vector < float >&f_array) {$/;"	f	class:PSK::OutputAdaptor
write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const std::vector < int >&i_array) {$/;"	f	class:PSK::OutputAdaptor
write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, const Dimens dimens, const std::vector < long >&i_array) {$/;"	f	class:PSK::OutputAdaptor
write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, double d) {$/;"	f	class:PSK::OutputAdaptor
write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, float f) {$/;"	f	class:PSK::OutputAdaptor
write	./include/PSKOutput.h	/^    virtual void write(const std::string & objname, int i) {$/;"	f	class:PSK::OutputAdaptor
write	./include/PSKOutput.h	/^    void write(const std::string & objname, const Dimens dimens, const double *d_array) {$/;"	f	class:PSK::coutOutputAdaptor
write	./include/PSKOutput.h	/^    void write(const std::string & objname, const Dimens dimens, const float *f_array) {$/;"	f	class:PSK::coutOutputAdaptor
write	./include/PSKOutput.h	/^    void write(const std::string & objname, const Dimens dimens, const int *i_array) {$/;"	f	class:PSK::coutOutputAdaptor
write	./include/PSKOutput.h	/^    void write(const std::string & objname, const Dimens dimens, const std::vector < double >&d_array) {$/;"	f	class:PSK::coutOutputAdaptor
write	./include/PSKOutput.h	/^    void write(const std::string & objname, const Dimens dimens, const std::vector < float >&f_array) {$/;"	f	class:PSK::coutOutputAdaptor
write	./include/PSKOutput.h	/^    void write(const std::string & objname, const Dimens dimens, const std::vector < int >&i_array) {$/;"	f	class:PSK::coutOutputAdaptor
write	./include/PSKOutput.h	/^    void write(const std::string & objname, double d) {$/;"	f	class:PSK::coutOutputAdaptor
write	./include/PSKOutput.h	/^    void write(const std::string & objname, float f) {$/;"	f	class:PSK::coutOutputAdaptor
write	./include/PSKOutput.h	/^    void write(const std::string & objname, int i) {$/;"	f	class:PSK::coutOutputAdaptor
writeRESTART	./inputoutput/Restart3D.cpp	/^void writeRESTART(string SaveDirName, int myrank, int cycle, int ns, MPIdata * mpi, VCtopology3D * vct, Collective * col, Grid * grid, Field * field, Particles3Dcomm * part) {$/;"	f
writeRESTART	./inputoutput/Restart3D.cpp	/^void writeRESTART(string SaveDirName, int myrank, int cycle, int ns, MPIdata * mpi, VCtopology3D * vct, Collective * col, Grid * grid, Field * field, Particles3Dcomm * part, bool fool) {$/;"	f
writeRESTART_ES	./inputoutput/Restart3D.cpp	/^void writeRESTART_ES(string SaveDirName, int myrank, int cycle, int ns, MPIdata * mpi, VCtopology3D * vct, Collective * col, Grid * grid, Field * field, Particles * part) {$/;"	f
writeRESTART_ES	./inputoutput/Restart3D.cpp	/^void writeRESTART_ES(string SaveDirName, int myrank, int cycle, int ns, MPIdata * mpi, VCtopology3D * vct, Collective * col, Grid * grid, Field * field, Particles * part, bool fool) {$/;"	f
wth	./include/Collective.h	/^    double *wth;$/;"	m	class:Collective
wth	./include/Particles3Dcomm.h	/^  double wth;$/;"	m	class:Particles3Dcomm
wtmp	./include/Particles3Dcomm.h	/^  double *wtmp;$/;"	m	class:Particles3Dcomm
x	./include/Particle.h	/^  double x[3];$/;"	m	class:SpeciesParticle
x	./include/Particles3Dcomm.h	/^  double *x;$/;"	m	class:Particles3Dcomm
xEnd	./include/EMfields3D.h	/^    double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:EMfields3D
xEnd	./include/Grid3DCU.h	/^  double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:Grid3DCU
xStart	./include/EMfields3D.h	/^    double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:EMfields3D
xStart	./include/Grid3DCU.h	/^  double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:Grid3DCU
x_center	./include/Collective.h	/^    double x_center;$/;"	m	class:Collective
x_center	./include/EMfields3D.h	/^    double x_center;$/;"	m	class:EMfields3D
x_satellite_user	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var-2D/user_inputs_block_single_var_2D.h	/^    float x_satellite_user = 13.0859;         \/\/ x-coordinate$/;"	v
x_satellite_user	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var/user_inputs_block_single_var.h	/^    float x_satellite_user = 13.0859;         \/\/ x-coordinate$/;"	v
x_satellite_user	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block/user_inputs_block.h	/^    float x_satellite_user = 13.0859;         \/\/ x-coordinate$/;"	v
x_satellite_user	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point-2D/user_inputs_point_2D.h	/^    float x_satellite_user = 20.878;         \/\/ x-coordinate$/;"	v
x_satellite_user	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point/user_inputs_point.h	/^    float x_satellite_user = 22.0000;         \/\/ x-coordinate$/;"	v
xavg	./include/Particles3Dcomm.h	/^  double *xavg;$/;"	m	class:Particles3Dcomm
xavgtmp	./include/Particles3Dcomm.h	/^  double *xavgtmp;$/;"	m	class:Particles3Dcomm
xend	./include/Particles3Dcomm.h	/^  double xstart, xend, ystart, yend, zstart, zend, invVOL;$/;"	m	class:Particles3Dcomm
xleft_neighbor	./include/VCtopology3D.h	/^  int xleft_neighbor;$/;"	m	class:VCtopology3D
xleft_neighbor_P	./include/VCtopology3D.h	/^  int xleft_neighbor_P;$/;"	m	class:VCtopology3D
xright_neighbor	./include/VCtopology3D.h	/^  int xright_neighbor;$/;"	m	class:VCtopology3D
xright_neighbor_P	./include/VCtopology3D.h	/^  int xright_neighbor_P;$/;"	m	class:VCtopology3D
xstart	./include/Particles3Dcomm.h	/^  double xstart, xend, ystart, yend, zstart, zend, invVOL;$/;"	m	class:Particles3Dcomm
xtmp	./include/Particles3Dcomm.h	/^  double *xtmp;$/;"	m	class:Particles3Dcomm
y	./include/Particles3Dcomm.h	/^  double *y;$/;"	m	class:Particles3Dcomm
yEnd	./include/EMfields3D.h	/^    double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:EMfields3D
yEnd	./include/Grid3DCU.h	/^  double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:Grid3DCU
yStart	./include/EMfields3D.h	/^    double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:EMfields3D
yStart	./include/Grid3DCU.h	/^  double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:Grid3DCU
y_center	./include/Collective.h	/^    double y_center;$/;"	m	class:Collective
y_center	./include/EMfields3D.h	/^    double y_center;$/;"	m	class:EMfields3D
y_satellite_user	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var-2D/user_inputs_block_single_var_2D.h	/^    float y_satellite_user = 6.44532;         \/\/ y-coordinate$/;"	v
y_satellite_user	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var/user_inputs_block_single_var.h	/^    float y_satellite_user = 6.44532;         \/\/ y-coordinate$/;"	v
y_satellite_user	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block/user_inputs_block.h	/^    float y_satellite_user = 6.44532;         \/\/ y-coordinate$/;"	v
y_satellite_user	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point-2D/user_inputs_point_2D.h	/^    float y_satellite_user = 4.94141;         \/\/ y-coordinate$/;"	v
y_satellite_user	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point/user_inputs_point.h	/^    float y_satellite_user = 7.50000;         \/\/ y-coordinate$/;"	v
yavg	./include/Particles3Dcomm.h	/^  double *yavg;$/;"	m	class:Particles3Dcomm
yavgtmp	./include/Particles3Dcomm.h	/^  double *yavgtmp;$/;"	m	class:Particles3Dcomm
yend	./include/Particles3Dcomm.h	/^  double xstart, xend, ystart, yend, zstart, zend, invVOL;$/;"	m	class:Particles3Dcomm
yleft_neighbor	./include/VCtopology3D.h	/^  int yleft_neighbor;$/;"	m	class:VCtopology3D
yleft_neighbor_P	./include/VCtopology3D.h	/^  int yleft_neighbor_P;$/;"	m	class:VCtopology3D
yright_neighbor	./include/VCtopology3D.h	/^  int yright_neighbor;$/;"	m	class:VCtopology3D
yright_neighbor_P	./include/VCtopology3D.h	/^  int yright_neighbor_P;$/;"	m	class:VCtopology3D
ystart	./include/Particles3Dcomm.h	/^  double xstart, xend, ystart, yend, zstart, zend, invVOL;$/;"	m	class:Particles3Dcomm
ytmp	./include/Particles3Dcomm.h	/^  double *ytmp;$/;"	m	class:Particles3Dcomm
z	./include/Particles3Dcomm.h	/^  double *z;$/;"	m	class:Particles3Dcomm
zEnd	./include/EMfields3D.h	/^    double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:EMfields3D
zEnd	./include/Grid3DCU.h	/^  double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:Grid3DCU
zStart	./include/EMfields3D.h	/^    double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:EMfields3D
zStart	./include/Grid3DCU.h	/^  double xStart, xEnd, yStart, yEnd, zStart, zEnd;$/;"	m	class:Grid3DCU
z_center	./include/Collective.h	/^    double z_center;$/;"	m	class:Collective
z_center	./include/EMfields3D.h	/^    double z_center;$/;"	m	class:EMfields3D
z_satellite_user	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var-2D/user_inputs_block_single_var_2D.h	/^    float z_satellite_user = 0.195311;         \/\/ z-coordinate$/;"	v
z_satellite_user	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block-single-var/user_inputs_block_single_var.h	/^    float z_satellite_user = 0.195311;         \/\/ z-coordinate$/;"	v
z_satellite_user	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-block/user_inputs_block.h	/^    float z_satellite_user = 0.195311;         \/\/ z-coordinate$/;"	v
z_satellite_user	./postprocessing_tools/c++/read-virt-sat-files-iPIC/cpp-code-point/user_inputs_point.h	/^    float z_satellite_user = 5.000000;         \/\/ z-coordinate$/;"	v
zavg	./include/Particles3Dcomm.h	/^  double *zavg;$/;"	m	class:Particles3Dcomm
zavgtmp	./include/Particles3Dcomm.h	/^  double *zavgtmp;$/;"	m	class:Particles3Dcomm
zend	./include/Particles3Dcomm.h	/^  double xstart, xend, ystart, yend, zstart, zend, invVOL;$/;"	m	class:Particles3Dcomm
zleft_neighbor	./include/VCtopology3D.h	/^  int zleft_neighbor;$/;"	m	class:VCtopology3D
zleft_neighbor_P	./include/VCtopology3D.h	/^  int zleft_neighbor_P;$/;"	m	class:VCtopology3D
zright_neighbor	./include/VCtopology3D.h	/^  int zright_neighbor;$/;"	m	class:VCtopology3D
zright_neighbor_P	./include/VCtopology3D.h	/^  int zright_neighbor_P;$/;"	m	class:VCtopology3D
zstart	./include/Particles3Dcomm.h	/^  double xstart, xend, ystart, yend, zstart, zend, invVOL;$/;"	m	class:Particles3Dcomm
ztmp	./include/Particles3Dcomm.h	/^  double *ztmp;$/;"	m	class:Particles3Dcomm
~Collective	./inputoutput/Collective.cpp	/^Collective::~Collective() {$/;"	f	class:Collective
~EMfields3D	./fields/EMfields3D.cpp	/^EMfields3D::~EMfields3D() {$/;"	f	class:EMfields3D
~Grid3DCU	./grids/Grid3DCU.cpp	/^Grid3DCU::~Grid3DCU() {$/;"	f	class:Grid3DCU
~InterfaceFluid	./include/InterfaceFluid.h	/^  ~InterfaceFluid(){$/;"	f	class:InterfaceFluid
~MPIdata	./include/MPIdata.h	/^  ~MPIdata(){}$/;"	f	class:MPIdata
~Moments10	./include/Moments.h	/^    ~Moments10(){};$/;"	f	class:Moments10
~Particles3D	./particles/Particles3D.cpp	/^Particles3D::~Particles3D() {$/;"	f	class:Particles3D
~Particles3Dcomm	./particles/Particles3Dcomm.cpp	/^Particles3Dcomm::~Particles3Dcomm() {$/;"	f	class:Particles3Dcomm
~Rank1	./tests/test_arrays.cpp	/^    ~Rank1() { };$/;"	f	class:Rank1
~Rank2	./tests/test_arrays.cpp	/^    ~Rank2() { };$/;"	f	class:Rank2
~Rank3	./tests/test_arrays.cpp	/^    ~Rank3() { }$/;"	f	class:Rank3
~Rank4	./tests/test_arrays.cpp	/^    ~Rank4() { }$/;"	f	class:Rank4
~TimeTasks_caller_to_set_communication_mode_for_scope	./utility/TimeTasks.cpp	/^~TimeTasks_caller_to_set_communication_mode_for_scope()$/;"	f	class:TimeTasks_caller_to_set_communication_mode_for_scope
~TimeTasks_caller_to_set_main_task_for_scope	./utility/TimeTasks.cpp	/^~TimeTasks_caller_to_set_main_task_for_scope()$/;"	f	class:TimeTasks_caller_to_set_main_task_for_scope
~TimeTasks_caller_to_set_task_for_scope	./utility/TimeTasks.cpp	/^~TimeTasks_caller_to_set_task_for_scope()$/;"	f	class:TimeTasks_caller_to_set_task_for_scope
~VCtopology3D	./communication/VCtopology3D.cpp	/^VCtopology3D::~VCtopology3D() {$/;"	f	class:VCtopology3D
~array1	./include/Alloc.h	/^      ~array1(){array_ref1<type>::free();}$/;"	f	struct:iPic3D::array1
~array2	./include/Alloc.h	/^      ~array2(){array_ref2<type>::free();}$/;"	f	struct:iPic3D::array2
~array3	./include/Alloc.h	/^      ~array3(){array_ref3<type>::free();}$/;"	f	struct:iPic3D::array3
~array4	./include/Alloc.h	/^      ~array4(){array_ref4<type>::free();}$/;"	f	struct:iPic3D::array4
~array_ref1	./include/Alloc.h	/^      ~array_ref1() { }$/;"	f	class:iPic3D::array_ref1
~array_ref2	./include/Alloc.h	/^      ~array_ref2(){}$/;"	f	class:iPic3D::array_ref2
~array_ref3	./include/Alloc.h	/^      ~array_ref3(){}$/;"	f	class:iPic3D::array_ref3
~array_ref4	./include/Alloc.h	/^      ~array_ref4(){}$/;"	f	class:iPic3D::array_ref4
~base_arr	./include/Alloc.h	/^      ~base_arr(){}$/;"	f	class:iPic3D::base_arr
~const_array_ref3	./include/Alloc.h	/^      ~const_array_ref3(){}$/;"	f	class:iPic3D::const_array_ref3
~const_array_ref4	./include/Alloc.h	/^      ~const_array_ref4(){}$/;"	f	class:iPic3D::const_array_ref4
~injInfoFields	./fields/BCStructure.cpp	/^injInfoFields::~injInfoFields() {$/;"	f	class:injInfoFields
~injInfoParticles	./fields/BCStructure.cpp	/^injInfoParticles::~injInfoParticles() {$/;"	f	class:injInfoParticles
